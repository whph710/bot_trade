"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π multiple AI providers
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 1H –∏ 4H —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
"""

import os
from dataclasses import dataclass
from typing import Literal

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
try:
    with open('.env', 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key.strip()] = value.strip()
except:
    pass


@dataclass
class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è 1H-4H —Ç–æ—Ä–≥–æ–≤–ª–∏"""

    # API –ù–ê–°–¢–†–û–ô–ö–ò
    DEEPSEEK_API_KEY = os.getenv('DEEPSEEK') or os.getenv('DEEPSEEK_API_KEY')
    DEEPSEEK_URL = 'https://api.deepseek.com/v1'
    DEEPSEEK_MODEL = 'deepseek-chat'

    ANTHROPIC_API_KEY = os.getenv('ANTHROPIC')
    ANTHROPIC_MODEL = 'claude-sonnet-4-20250514'

    # AI –ü–†–û–í–ê–ô–î–ï–†–´ –î–õ–Ø –≠–¢–ê–ü–û–í
    AI_STAGE_SELECTION: Literal['deepseek', 'anthropic', 'fallback'] = 'anthropic'
    AI_STAGE_ANALYSIS: Literal['deepseek', 'anthropic', 'fallback'] = 'anthropic'
    AI_STAGE_VALIDATION: Literal['deepseek', 'anthropic', 'fallback'] = 'fallback'

    # –≠–¢–ê–ü–´ –û–ë–†–ê–ë–û–¢–ö–ò - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è 1H/4H
    # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º 4H —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–≤–µ—á–µ–π
    QUICK_SCAN_15M = 48  # ~8 –¥–Ω–µ–π –Ω–∞ 4H (48 —Å–≤–µ—á–µ–π * 4 —á–∞—Å–∞ = 192 —á–∞—Å–∞)

    # –î–ª—è AI bulk –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∂–µ 4H
    AI_BULK_15M = 48  # ~8 –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    AI_INDICATORS_HISTORY = 40  # –ò—Å—Ç–æ—Ä–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤

    # –î–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º 1H (–±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π)
    FINAL_5M = 168  # ~7 –¥–Ω–µ–π –Ω–∞ 1H (168 —Å–≤–µ—á–µ–π)
    FINAL_15M = 84   # ~14 –¥–Ω–µ–π –Ω–∞ 4H (84 —Å–≤–µ—á–∏ * 4 —á–∞—Å–∞)
    FINAL_INDICATORS = 60  # –ò—Å—Ç–æ—Ä–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

    # –ò–ù–î–ò–ö–ê–¢–û–†–´ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    EMA_FAST = 9      # –ë—ã—Å—Ç—Ä–∞—è EMA (–≤–º–µ—Å—Ç–æ 5)
    EMA_MEDIUM = 21   # –°—Ä–µ–¥–Ω—è—è EMA (–≤–º–µ—Å—Ç–æ 8)
    EMA_SLOW = 50     # –ú–µ–¥–ª–µ–Ω–Ω–∞—è EMA (–≤–º–µ—Å—Ç–æ 20)
    RSI_PERIOD = 14   # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π RSI
    MACD_FAST = 12
    MACD_SLOW = 26
    MACD_SIGNAL = 9
    ATR_PERIOD = 14

    # –¢–û–†–ì–û–í–´–ï –ü–û–†–û–ì–ò - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    MIN_CONFIDENCE = 75  # –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –±–æ–ª—å—à–∏—Ö –¢–§
    MIN_VOLUME_RATIO = 1.3  # –ß—É—Ç—å –≤—ã—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    MIN_ATR_RATIO = 0.8
    MIN_RISK_REWARD_RATIO = 2.0  # –í—ã—à–µ R/R –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    MAX_HOLD_DURATION_MINUTES = 2880  # 48 —á–∞—Å–æ–≤ (2 –¥–Ω—è)
    MIN_HOLD_DURATION_MINUTES = 240   # 4 —á–∞—Å–∞ –º–∏–Ω–∏–º—É–º
    VALIDATION_CONFIDENCE_BOOST = 5

    # –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨
    BATCH_SIZE = 50
    MAX_CONCURRENT = 10
    API_TIMEOUT = 120
    MAX_FINAL_PAIRS = 5
    MAX_BULK_PAIRS = 15

    # –ü–†–û–ú–ü–¢–´
    SELECTION_PROMPT = 'prompt_select.txt'
    ANALYSIS_PROMPT = 'prompt_analyze.txt'
    VALIDATION_PROMPT = 'prompt_validate.txt'

    # –ò–ò –ù–ê–°–¢–†–û–ô–ö–ò
    AI_TEMPERATURE_SELECT = 0.3
    AI_TEMPERATURE_ANALYZE = 0.7
    AI_TEMPERATURE_VALIDATE = 0.3
    AI_MAX_TOKENS_SELECT = 2000    # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    AI_MAX_TOKENS_ANALYZE = 3000   # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    AI_MAX_TOKENS_VALIDATE = 3500  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏


config = Config()


def get_available_ai_providers() -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    providers = {}

    if config.DEEPSEEK_API_KEY:
        providers['deepseek'] = True
    else:
        providers['deepseek'] = False

    if config.ANTHROPIC_API_KEY:
        providers['anthropic'] = True
    else:
        providers['anthropic'] = False

    providers['fallback'] = True  # –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω

    return providers


def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    providers = get_available_ai_providers()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DeepSeek
    if providers['deepseek']:
        print(f"‚úì DeepSeek API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(config.DEEPSEEK_API_KEY)})")
    else:
        print("‚ö† –í–ù–ò–ú–ê–ù–ò–ï: DeepSeek API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Anthropic
    if providers['anthropic']:
        print(f"‚úì Anthropic API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(config.ANTHROPIC_API_KEY)})")
        print(f"  –ú–æ–¥–µ–ª—å: {config.ANTHROPIC_MODEL}")
    else:
        print("‚ö† –í–ù–ò–ú–ê–ù–ò–ï: Anthropic API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–ø–æ–≤
    print(f"\nüìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
    print(f"‚îú‚îÄ –≠—Ç–∞–ø –æ—Ç–±–æ—Ä–∞: {config.AI_STAGE_SELECTION} ({'‚úì' if providers[config.AI_STAGE_SELECTION] else '‚úó'})")
    print(f"‚îú‚îÄ –≠—Ç–∞–ø –∞–Ω–∞–ª–∏–∑–∞: {config.AI_STAGE_ANALYSIS} ({'‚úì' if providers[config.AI_STAGE_ANALYSIS] else '‚úó'})")
    print(f"‚îî‚îÄ –≠—Ç–∞–ø –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {config.AI_STAGE_VALIDATION} ({'‚úì' if providers[config.AI_STAGE_VALIDATION] else '‚úó'})")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
    prompt_files = [
        config.SELECTION_PROMPT,
        config.ANALYSIS_PROMPT,
        config.VALIDATION_PROMPT
    ]

    missing_prompts = []
    for prompt_file in prompt_files:
        if not os.path.exists(prompt_file):
            missing_prompts.append(prompt_file)

    if missing_prompts:
        print(f"\n‚ö† –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤: {missing_prompts}")
    else:
        print(f"\n‚úì –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω—ã")

    print(f"\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ (1H-4H —Å—Ç—Ä–∞—Ç–µ–≥–∏—è):")
    print(f"‚îú‚îÄ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: 1H (–¥–µ—Ç–∞–ª–∏) + 4H (—Ç—Ä–µ–Ω–¥)")
    print(f"‚îú‚îÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {config.MIN_CONFIDENCE}%")
    print(f"‚îú‚îÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ R/R: 1:{config.MIN_RISK_REWARD_RATIO}")
    print(f"‚îú‚îÄ –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {config.MIN_HOLD_DURATION_MINUTES//60}-{config.MAX_HOLD_DURATION_MINUTES//60} —á–∞—Å–æ–≤")
    print(f"‚îú‚îÄ EMA —Å–∏—Å—Ç–µ–º–∞: {config.EMA_FAST}/{config.EMA_MEDIUM}/{config.EMA_SLOW}")
    print(f"‚îî‚îÄ –ë–æ–Ω—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏: +{config.VALIDATION_CONFIDENCE_BOOST}%")

    return any(providers[stage] for stage in [config.AI_STAGE_SELECTION, config.AI_STAGE_ANALYSIS, config.AI_STAGE_VALIDATION])


has_ai_available = check_config()