"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã—Å–æ–∫–æ–ø—Ä–∏–±—ã–ª—å–Ω–æ–≥–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥-–±–æ—Ç–∞
–û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
"""

import os
from dataclasses import dataclass
from typing import Dict, Any
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()


@dataclass
class TradingConfig:
    """–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    # –¢–∞–π–º—Ñ—Ä–µ–π–º—ã (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞)
    HIGHER_TF: str = '15'  # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–µ–Ω–¥–∞
    ENTRY_TF: str = '5'    # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
    CANDLES_HIGHER: int = 50   # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
    CANDLES_ENTRY: int = 100   # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π profitable —Å—Ç–µ–∫)
    EMA_FAST: int = 8      # –ë—ã—Å—Ç—Ä–∞—è EMA
    EMA_SLOW: int = 21     # –ú–µ–¥–ª–µ–Ω–Ω–∞—è EMA
    RSI_PERIOD: int = 14   # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π RSI
    ATR_PERIOD: int = 14   # –î–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    VOLUME_PERIOD: int = 20 # –î–ª—è –æ–±—ä–µ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

    # –ü–æ—Ä–æ–≥–∏ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    MIN_CONFIDENCE: int = 70    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    MIN_VOLUME_RATIO: float = 1.2  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
    MIN_ATR_RATIO: float = 0.8     # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å

    # Risk Management (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    MAX_RISK_PERCENT: float = 1.0   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É
    MIN_RR_RATIO: float = 1.5       # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Risk/Reward
    MAX_RR_RATIO: float = 3.0       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π Risk/Reward


@dataclass
class AIConfig:
    """–ò–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    API_KEY_ENV: str = 'DEEPSEEK'
    BASE_URL: str = 'https://api.deepseek.com'
    MODEL: str = 'deepseek-chat'

    # –¢–∞–π–º–∞—É—Ç—ã (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞)
    SELECTION_TIMEOUT: int = 30
    ANALYSIS_TIMEOUT: int = 60

    # –¢–æ–∫–µ–Ω—ã (–±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏)
    SELECTION_TOKENS: int = 2000
    ANALYSIS_TOKENS: int = 4000

    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
    TEMPERATURE: float = 0.3

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
    MAX_PAIRS_TO_AI: int = 15
    MAX_SELECTED_PAIRS: int = 5


@dataclass
class ExchangeConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏"""
    BASE_URL: str = "https://api.bybit.com"
    KLINE_ENDPOINT: str = "/v5/market/kline"
    INSTRUMENTS_ENDPOINT: str = "/v5/market/instruments-info"
    CATEGORY: str = "linear"
    QUOTE_CURRENCY: str = "USDT"
    TIMEOUT: int = 20


@dataclass
class SystemConfig:
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    LOG_LEVEL: str = 'INFO'
    LOG_FILE: str = 'trading_bot.log'
    ANALYSIS_FILE: str = 'analysis_results.log'
    ENCODING: str = 'utf-8'

    # –ü—Ä–æ–º–ø—Ç—ã
    SELECTION_PROMPT: str = 'selection_prompt.txt'
    ANALYSIS_PROMPT: str = 'analysis_prompt.txt'


class Config:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    def __init__(self):
        self.trading = TradingConfig()
        self.ai = AIConfig()
        self.exchange = ExchangeConfig()
        self.system = SystemConfig()

    def validate(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        import logging
        logger = logging.getLogger(__name__)

        api_key = os.getenv(self.ai.API_KEY_ENV)

        validations = {
            'API key exists': api_key is not None,
            'API key not empty': api_key is not None and len(api_key.strip()) > 0,
            'Min confidence > 0': self.trading.MIN_CONFIDENCE > 0,
            'Min RR ratio > 1.0': self.trading.MIN_RR_RATIO > 1.0,
            'EMA fast < slow': self.trading.EMA_FAST < self.trading.EMA_SLOW,
            'Selection timeout > 0': self.ai.SELECTION_TIMEOUT > 0,
            'Analysis timeout > 0': self.ai.ANALYSIS_TIMEOUT > 0
        }

        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
        failed_validations = [name for name, result in validations.items() if not result]

        if failed_validations:
            logger.error("‚ùå Configuration validation failed:")
            for failed in failed_validations:
                logger.error(f"   - {failed}")

            if not api_key:
                logger.error(f"   üí° Create .env file with: {self.ai.API_KEY_ENV}=your_api_key")
            elif len(api_key.strip()) == 0:
                logger.error(f"   üí° API key is empty in .env file")

            return False

        logger.info("‚úÖ Configuration validation passed")
        return True


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
config = Config()