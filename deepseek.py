"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ò –∫–ª–∏–µ–Ω—Ç –¥–ª—è DeepSeek
–£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:
- –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
- –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
- –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π fallback
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞"
"""

import asyncio
import json
import logging
from typing import List, Dict, Optional
from openai import AsyncOpenAI
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ö—ç—à –ø—Ä–æ–º–ø—Ç–æ–≤
_prompts_cache = {}


def validate_api_key() -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞ DeepSeek"""
    if not config.DEEPSEEK_API_KEY:
        return False, "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"

    key = config.DEEPSEEK_API_KEY.strip()

    if len(key) < 20:
        return False, f"API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(key)} —Å–∏–º–≤–æ–ª–æ–≤)"

    if not key.startswith('sk-'):
        return False, f"API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-' (—Ç–µ–∫—É—â–∏–π: {key[:10]}...)"

    return True, "API –∫–ª—é—á –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é"


def load_prompt(filename: str) -> str:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if filename not in _prompts_cache:
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                _prompts_cache[filename] = f.read()
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–º–ø—Ç: {filename}")
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π")
            # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ú JSON
            if 'select' in filename:
                _prompts_cache[filename] = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-—Ç—Ä–µ–π–¥–µ—Ä —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.

–ü–û–õ–£–ß–ê–ï–®–¨: –î–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º –ø–∞—Ä–∞–º —Å –±–∞–∑–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏.
–î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã: 32 —Å–≤–µ—á–∏ 15–º + –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ + —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è.

–ó–ê–î–ê–ß–ê: –í—ã–±—Ä–∞—Ç—å 3-5 –ª—É—á—à–∏—Ö –ø–∞—Ä –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞.

–ö–†–ò–¢–ï–†–ò–ò –û–¢–ë–û–†–ê:
1. –ß–ï–¢–ö–ò–ô –¢–†–ï–ù–î: EMA –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–µ—Ä–∂–∏—Ç—Å—è 10+ —Å–≤–µ—á–µ–π
2. –°–ò–õ–¨–ù–´–ô MOMENTUM: RSI –∞–∫—Ç–∏–≤–µ–Ω (–Ω–µ –≤ –∫—Ä–∞–π–Ω–æ—Å—Ç—è—Ö) + MACD –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ç–µ—Ç
3. –û–ë–™–ï–ú –ü–û–î–¢–í–ï–†–ñ–î–ê–ï–¢: Volume ratio > 1.2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
4. –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨ –ü–ê–¢–¢–ï–†–ù–ê: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –Ω–µ—Ç —Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç–∏
5. –°–í–ï–ß–ù–û–ô –ê–ù–ê–õ–ò–ó: –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5-8 —Å–≤–µ—á–µ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:
- –ò–∑–±–µ–≥–∞–π –ø–∞—Ä—ã —Å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–∞—Ä–∞–º —Å —É—Å–∏–ª–∏–≤–∞—é—â–∏–º—Å—è momentum
- –ò—â–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤

–û–¢–í–ï–¢ –°–¢–†–û–ì–û –í JSON –ë–ï–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –¢–ï–ö–°–¢–ê:
{
  "selected_pairs": ["BTCUSDT", "ETHUSDT"],
  "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"
}

–ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞—Ä –Ω–µ—Ç:
{
  "selected_pairs": [],
  "reasoning": "–Ω–µ—Ç —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
}"""
            else:
                _prompts_cache[filename] = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫–∞–ª—å–ø–µ—Ä —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ.

–ü–û–õ–£–ß–ê–ï–®–¨: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ:
- 200 —Å–≤–µ—á–µ–π 5–º + 100 —Å–≤–µ—á–µ–π 15–º
- –ü–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤  
- –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞

–ó–ê–î–ê–ß–ê: –î–∞—Ç—å —Ç–æ—á–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏.

–ú–ï–¢–û–î–û–õ–û–ì–ò–Ø:
1. –ö–û–ù–¢–ï–ö–°–¢ 15–ú: –û—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–¥, –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
2. –¢–û–ß–ö–ê –í–•–û–î–ê 5–ú: –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞
3. –ò–ù–î–ò–ö–ê–¢–û–†–´: EMA —Å–∏—Å—Ç–µ–º–∞, RSI momentum, MACD –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
4. –°–í–ï–ß–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´: –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ü–∏–π
5. –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨: ATR –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–ø–æ–≤

–†–ê–°–ß–ï–¢ –£–†–û–í–ù–ï–ô:
- –í–•–û–î: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ¬± –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ –ª—É—á—à–µ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
- –°–¢–û–ü: –ë–æ–ª—å—à–∏–π –∏–∑ (ATR √ó 1.5) –∏–ª–∏ (–∫–ª—é—á–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å + –±—É—Ñ–µ—Ä)  
- –ü–†–û–§–ò–¢: –†–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –º–∏–Ω–∏–º—É–º 1:1.5

–í–ê–õ–ò–î–ê–¶–ò–Ø (–≤—Å–µ —É—Å–ª–æ–≤–∏—è):
‚úì –¢—Ä–µ–Ω–¥ 15–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚úì –°–≤–µ—á–∞ 5–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –¥–≤–∏–∂–µ–Ω–∏–µ
‚úì –û–±—ä–µ–º –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
‚úì RSI –Ω–µ –≤ —ç–∫—Å—Ç—Ä–µ–º—É–º–µ
‚úì MACD –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –≤ –Ω—É–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏

–û–¢–í–ï–¢ –°–¢–†–û–ì–û –í JSON –ë–ï–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –¢–ï–ö–°–¢–ê:
{
  "signal": "LONG",
  "confidence": 85,
  "entry_price": 43250.50,
  "stop_loss": 43100.00,
  "take_profit": 43475.75,
  "analysis": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"
}

–ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª —Å–ª–∞–±—ã–π: {"signal": "NO_SIGNAL", "confidence": 0, "analysis": "–ø—Ä–∏—á–∏–Ω–∞"}"""

    return _prompts_cache[filename]


def extract_json_from_text(text: str) -> Optional[Dict]:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ò–ò
    """
    if not text or not isinstance(text, str):
        logger.error("‚ùå –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –ò–ò")
        return None

    try:
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown –±–ª–æ–∫–∏
        import re
        text = re.sub(r'```json\s*', '', text)
        text = re.sub(r'```\s*', '', text)
        text = text.strip()

        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ JSON
        start = text.find('{')
        if start == -1:
            logger.error(f"‚ùå JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ: {text[:100]}...")
            return None

        # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–±–∫–∏ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ JSON
        brace_count = 0
        for i, char in enumerate(text[start:], start):
            if char == '{':
                brace_count += 1
            elif char == '}':
                brace_count -= 1
                if brace_count == 0:
                    json_str = text[start:i+1]
                    try:
                        result = json.loads(json_str)
                        logger.debug(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                        return result
                    except json.JSONDecodeError as e:
                        logger.error(f"‚ùå JSON decode error: {e}")
                        logger.debug(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π JSON: {json_str[:200]}...")
                        return None

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
        try:
            result = json.loads(text[start:])
            logger.debug(f"‚úÖ JSON —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏")
            return result
        except:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {text[start:100]}...")
            return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON: {e}")
        return None


def smart_fallback_selection(pairs_data: List[Dict], max_pairs: int = 3) -> List[str]:
    """
    –£–õ–£–ß–®–ï–ù–ù–ê–Ø fallback –ª–æ–≥–∏–∫–∞ –±–µ–∑ –ò–ò
    """
    logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–º–Ω—ã–π fallback –æ—Ç–±–æ—Ä –ø–∞—Ä (–±–µ–∑ –ò–ò)")

    if not pairs_data:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è fallback –æ—Ç–±–æ—Ä–∞")
        return []

    def calculate_comprehensive_score(pair_data: Dict) -> float:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–∞—Ä—ã"""
        base_confidence = pair_data.get('confidence', 0)
        direction = pair_data.get('direction', 'NONE')
        base_indicators = pair_data.get('base_indicators', {})

        score = base_confidence

        # –ë–æ–Ω—É—Å –∑–∞ —á–µ—Ç–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if direction in ['LONG', 'SHORT']:
            score += 15

        # –ê–Ω–∞–ª–∏–∑ –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        volume_ratio = base_indicators.get('volume_ratio', 1.0)
        rsi = base_indicators.get('rsi', 50)
        macd_hist = abs(base_indicators.get('macd_histogram', 0))

        # –ë–æ–Ω—É—Å—ã –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        if volume_ratio > 1.5:
            score += 20
        elif volume_ratio > 1.2:
            score += 10

        # RSI –≤ —Ä–∞–±–æ—á–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if 35 <= rsi <= 65:
            score += 15
        elif 25 <= rsi <= 75:
            score += 8

        # MACD –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if macd_hist > 0.001:
            score += 12

        return score

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ
    scored_pairs = []
    for pair in pairs_data:
        score = calculate_comprehensive_score(pair)
        scored_pairs.append((pair, score))
        logger.debug(f"   {pair['symbol']}: –æ—Ü–µ–Ω–∫–∞ {score:.1f}")

    sorted_pairs = sorted(scored_pairs, key=lambda x: x[1], reverse=True)

    # –ë–µ—Ä–µ–º —Ç–æ–ø –ø–∞—Ä—ã
    selected = []
    for pair, score in sorted_pairs[:max_pairs]:
        if score >= config.MIN_CONFIDENCE:
            selected.append(pair['symbol'])
            logger.info(f"‚úÖ Fallback –≤—ã–±—Ä–∞–ª {pair['symbol']} (–æ—Ü–µ–Ω–∫–∞: {score:.1f})")

    logger.info(f"üìä Fallback –æ—Ç–æ–±—Ä–∞–ª {len(selected)} –∏–∑ {len(pairs_data)} –ø–∞—Ä")
    return selected


async def ai_select_pairs(pairs_data: List[Dict]) -> List[str]:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ò –æ—Ç–±–æ—Ä –ø–∞—Ä —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    """
    logger.info(f"ü§ñ –ò–ò –æ—Ç–±–æ—Ä: –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {len(pairs_data)} –ø–∞—Ä")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞
    api_valid, api_message = validate_api_key()
    if not api_valid:
        logger.warning(f"‚ö†Ô∏è {api_message}")
        logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback —Ä–µ–∂–∏–º")
        return smart_fallback_selection(pairs_data, config.MAX_FINAL_PAIRS)

    logger.info(f"‚úÖ {api_message}")

    if not pairs_data:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞")
        return []

    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if len(pairs_data) > config.MAX_BULK_PAIRS:
            logger.info(f"üìä –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ {config.MAX_BULK_PAIRS} –ø–∞—Ä –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞")
            pairs_data = sorted(pairs_data, key=lambda x: x.get('confidence', 0), reverse=True)[:config.MAX_BULK_PAIRS]

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò
        logger.info("üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò...")
        full_market_data = {}

        for item in pairs_data:
            symbol = item['symbol']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if 'indicators_15m' not in item:
                logger.warning(f"‚ö†Ô∏è {symbol}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã 15–º")
                continue

            candles_15m = item.get('candles_15m', [])
            indicators_15m = item.get('indicators_15m', {})

            if not candles_15m:
                logger.warning(f"‚ö†Ô∏è {symbol}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–≤–µ—á–∏ 15–º")
                continue

            if not indicators_15m:
                logger.warning(f"‚ö†Ô∏è {symbol}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
                continue

            # –°–û–•–†–ê–ù–Ø–ï–ú –ü–û–õ–ù–´–ô –û–ë–™–ï–ú –î–ê–ù–ù–´–•
            full_market_data[symbol] = {
                'base_signal': {
                    'direction': item.get('direction', 'NONE'),
                    'confidence': item.get('confidence', 0)
                },
                'candles_15m': candles_15m[-32:],
                'indicators': {
                    'ema5': indicators_15m.get('ema5_history', [])[-32:],
                    'ema8': indicators_15m.get('ema8_history', [])[-32:],
                    'ema20': indicators_15m.get('ema20_history', [])[-32:],
                    'rsi': indicators_15m.get('rsi_history', [])[-32:],
                    'macd_histogram': indicators_15m.get('macd_histogram_history', [])[-32:],
                    'volume_ratio': indicators_15m.get('volume_ratio_history', [])[-32:]
                },
                'current_state': indicators_15m.get('current', {})
            }

            logger.debug(f"‚úÖ {symbol}: –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è –ò–ò")

        if not full_market_data:
            logger.error("‚ùå –ù–ï–¢ –ü–û–î–ì–û–¢–û–í–õ–ï–ù–ù–´–• –î–ê–ù–ù–´–• –î–õ–Ø –ò–ò!")
            logger.error("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.error("1. –î–∞–Ω–Ω—ã–µ pairs_data –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç indicators_15m")
            logger.error("2. –î–∞–Ω–Ω—ã–µ pairs_data –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç candles_15m")
            logger.error("3. –û—à–∏–±–∫–∞ –≤ stage2_ai_bulk_select –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö")
            logger.error("–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback...")
            return smart_fallback_selection(pairs_data, config.MAX_FINAL_PAIRS)

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        json_data = json.dumps(full_market_data, separators=(',', ':'))
        data_size = len(json_data)
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò: {data_size:,} –±–∞–π—Ç ({data_size/1024:.1f} KB)")

        if data_size > 500000:  # –ë–æ–ª—å—à–µ 500KB
            logger.warning(f"‚ö†Ô∏è –ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö: {data_size/1024:.0f}KB")

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL
        logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ DeepSeek API: {config.DEEPSEEK_URL}")
        client = AsyncOpenAI(
            api_key=config.DEEPSEEK_API_KEY,
            base_url=config.DEEPSEEK_URL
        )

        prompt = load_prompt(config.SELECTION_PROMPT)
        logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò: {len(full_market_data)} –ø–∞—Ä")

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º JSON
        response = await asyncio.wait_for(
            client.chat.completions.create(
                model=config.DEEPSEEK_MODEL,
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": json_data}
                ],
                response_format={"type": "json_object"},
                max_tokens=config.AI_MAX_TOKENS_SELECT,
                temperature=config.AI_TEMPERATURE_SELECT
            ),
            timeout=config.API_TIMEOUT
        )

        result_text = response.choices[0].message.content
        logger.info(f"üì® –ò–ò –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(result_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.debug(f"–ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {result_text[:200]}...")

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ JSON
        json_result = extract_json_from_text(result_text)

        if json_result:
            selected_pairs = json_result.get('selected_pairs', [])
            reasoning = json_result.get('reasoning', '–ù–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è')

            if selected_pairs:
                logger.info(f"‚úÖ –ò–ò –≤—ã–±—Ä–∞–ª {len(selected_pairs)} –ø–∞—Ä: {selected_pairs}")
                logger.info(f"üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ò–ò: {reasoning}")
                return selected_pairs[:config.MAX_FINAL_PAIRS]
            else:
                logger.info(f"‚ö†Ô∏è –ò–ò –Ω–µ –≤—ã–±—Ä–∞–ª –ø–∞—Ä—ã. –ü—Ä–∏—á–∏–Ω–∞: {reasoning}")
                return []
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò")
            logger.error(f"üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò: {result_text}")
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback...")
            return smart_fallback_selection(pairs_data, config.MAX_FINAL_PAIRS)

    except asyncio.TimeoutError:
        logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ò–ò –∑–∞–ø—Ä–æ—Å–∞ ({config.API_TIMEOUT}—Å)")
        logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback...")
        return smart_fallback_selection(pairs_data, config.MAX_FINAL_PAIRS)

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ò–ò –æ—Ç–±–æ—Ä–∞: {e}")
        logger.error(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
        if "401" in str(e) or "authentication" in str(e).lower():
            logger.error("üîë –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")
        elif "403" in str(e) or "forbidden" in str(e).lower():
            logger.error("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ API –∫–ª—é—á–∞")
        elif "429" in str(e) or "rate limit" in str(e).lower():
            logger.error("üö¶ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        elif "connection" in str(e).lower():
            logger.error("üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API")

        logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback...")
        return smart_fallback_selection(pairs_data, config.MAX_FINAL_PAIRS)


async def ai_analyze_pair(symbol: str, data_5m: List, data_15m: List,
                          indicators_5m: Dict, indicators_15m: Dict) -> Dict:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¥–µ—Ç–∞–ª—å–Ω—ã–π –ò–ò –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã
    """
    logger.info(f"üîç –ò–ò –∞–Ω–∞–ª–∏–∑ {symbol}: {len(data_5m)} —Å–≤–µ—á–µ–π 5–º, {len(data_15m)} —Å–≤–µ—á–µ–π 15–º")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞
    api_valid, api_message = validate_api_key()
    if not api_valid:
        logger.warning(f"‚ö†Ô∏è DeepSeek API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {api_message}")
        return create_fallback_analysis(symbol, indicators_5m)

    try:
        current_price = indicators_5m.get('current', {}).get('price', 0)
        atr_5m = indicators_5m.get('current', {}).get('atr', 0)

        if current_price <= 0:
            logger.error(f"‚ùå {symbol}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ({current_price})")
            return create_fallback_analysis(symbol, indicators_5m)

        # –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        analysis_data = {
            'symbol': symbol,
            'current_price': current_price,
            'timeframes': {
                '5m': {
                    'candles': data_5m[-100:],
                    'indicators': {
                        'ema5': indicators_5m.get('ema5_history', [])[-100:],
                        'ema8': indicators_5m.get('ema8_history', [])[-100:],
                        'ema20': indicators_5m.get('ema20_history', [])[-100:],
                        'rsi': indicators_5m.get('rsi_history', [])[-100:],
                        'macd_histogram': indicators_5m.get('macd_histogram_history', [])[-100:],
                        'volume_ratio': indicators_5m.get('volume_ratio_history', [])[-100:]
                    }
                },
                '15m': {
                    'candles': data_15m[-50:],
                    'indicators': {
                        'ema5': indicators_15m.get('ema5_history', [])[-50:],
                        'ema8': indicators_15m.get('ema8_history', [])[-50:],
                        'ema20': indicators_15m.get('ema20_history', [])[-50:],
                        'rsi': indicators_15m.get('rsi_history', [])[-50:],
                        'macd_histogram': indicators_15m.get('macd_histogram_history', [])[-50:]
                    }
                }
            },
            'current_state': {
                'price': current_price,
                'atr': atr_5m,
                'trend_5m': 'UP' if indicators_5m.get('current', {}).get('ema5', 0) > indicators_5m.get('current', {}).get('ema20', 0) else 'DOWN',
                'trend_15m': 'UP' if indicators_15m.get('current', {}).get('ema5', 0) > indicators_15m.get('current', {}).get('ema20', 0) else 'DOWN',
                'rsi_5m': indicators_5m.get('current', {}).get('rsi', 50),
                'rsi_15m': indicators_15m.get('current', {}).get('rsi', 50),
                'volume_ratio': indicators_5m.get('current', {}).get('volume_ratio', 1.0),
                'macd_momentum': indicators_5m.get('current', {}).get('macd_histogram', 0)
            }
        }

        client = AsyncOpenAI(
            api_key=config.DEEPSEEK_API_KEY,
            base_url=config.DEEPSEEK_URL
        )

        prompt = load_prompt(config.ANALYSIS_PROMPT)

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º JSON
        response = await asyncio.wait_for(
            client.chat.completions.create(
                model=config.DEEPSEEK_MODEL,
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": json.dumps(analysis_data, separators=(',', ':'))}
                ],
                response_format={"type": "json_object"},
                max_tokens=config.AI_MAX_TOKENS_ANALYZE,
                temperature=config.AI_TEMPERATURE_ANALYZE
            ),
            timeout=config.API_TIMEOUT
        )

        result_text = response.choices[0].message.content
        logger.debug(f"üì® –ò–ò –∞–Ω–∞–ª–∏–∑ {symbol}: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç {len(result_text)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ JSON
        json_result = extract_json_from_text(result_text)

        if json_result:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            signal = json_result.get('signal', 'NO_SIGNAL').upper()
            confidence = max(0, min(100, int(json_result.get('confidence', 0))))
            entry_price = float(json_result.get('entry_price', current_price))
            stop_loss = float(json_result.get('stop_loss', 0))
            take_profit = float(json_result.get('take_profit', 0))
            analysis = json_result.get('analysis', '–ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò')

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π
            if signal in ['LONG', 'SHORT'] and entry_price > 0:
                if stop_loss <= 0:
                    stop_loss = entry_price * 0.98 if signal == 'LONG' else entry_price * 1.02
                if take_profit <= 0:
                    risk = abs(entry_price - stop_loss)
                    take_profit = entry_price + risk * 2 if signal == 'LONG' else entry_price - risk * 2

            result = {
                'symbol': symbol,
                'signal': signal,
                'confidence': confidence,
                'entry_price': entry_price,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'analysis': analysis,
                'trend_alignment': analysis_data['current_state']['trend_5m'] == analysis_data['current_state']['trend_15m'],
                'volume_confirmation': analysis_data['current_state']['volume_ratio'] > 1.2,
                'ai_generated': True
            }

            logger.info(f"‚úÖ {symbol}: {signal} ({confidence}%) –í—Ö–æ–¥: {entry_price:.4f}")
            return result
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ {symbol}")
            logger.debug(f"üîç –û—Ç–≤–µ—Ç –ò–ò: {result_text}")
            return create_fallback_analysis(symbol, indicators_5m)

    except asyncio.TimeoutError:
        logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∞–Ω–∞–ª–∏–∑–∞ {symbol} ({config.API_TIMEOUT}—Å)")
        return create_fallback_analysis(symbol, indicators_5m)
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        return create_fallback_analysis(symbol, indicators_5m)


def create_fallback_analysis(symbol: str, indicators_5m: Dict) -> Dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ fallback –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ –ò–ò"""
    current_price = indicators_5m.get('current', {}).get('price', 0)

    return {
        'symbol': symbol,
        'signal': 'NO_SIGNAL',
        'confidence': 0,
        'entry_price': current_price,
        'stop_loss': 0,
        'take_profit': 0,
        'analysis': '–ò–ò –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º',
        'trend_alignment': False,
        'volume_confirmation': False,
        'ai_generated': False
    }