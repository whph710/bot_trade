import asyncio
from openai import AsyncOpenAI
from dotenv import load_dotenv
import os

load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
with open('prompt.txt', 'r', encoding='utf-8') as file:
    prompt1 = file.read()

import asyncio
import os
import httpx
from openai import AsyncOpenAI


async def deep_seek(data, prompt=prompt1, timeout=60, max_tokens=4000, max_retries=3):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –º–æ–¥–µ–ª—å DeepSeek —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π connection error.

    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–¥–µ–ª–∏ (–±—É–¥—É—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É)
        prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ —Ñ–∞–π–ª–∞ prompt.txt)
        timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)
        max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        max_retries: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

    Returns:
        str: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
    """

    api_key = os.getenv('DEEPSEEK')

    if not api_key:
        return "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á DEEPSEEK"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    http_client = httpx.AsyncClient(
        timeout=httpx.Timeout(timeout),
        limits=httpx.Limits(max_connections=10, max_keepalive_connections=5),
        verify=True  # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    )

    client = AsyncOpenAI(
        api_key=api_key,
        base_url="https://api.deepseek.com",
        http_client=http_client
    )

    for attempt in range(max_retries):
        try:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek...")
            print(f"–î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: {len(str(data))} —Å–∏–º–≤–æ–ª–æ–≤")

            response = await client.chat.completions.create(
                model="deepseek-chat",  # –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": str(data)},
                ],
                stream=False,
                max_tokens=max_tokens,
                temperature=0.7
            )

            result = response.choices[0].message.content
            print(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {result[:50]}...")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await http_client.aclose()
            return result

        except Exception as e:
            error_msg = str(e)
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {error_msg}")

            if attempt < max_retries - 1:
                wait_time = 2 ** attempt  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1, 2, 4 —Å–µ–∫
                print(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(wait_time)
            else:
                await http_client.aclose()
                return f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {error_msg}"

    await http_client.aclose()
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API
async def test_deepseek_connection():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å DeepSeek API
    """
    api_key = os.getenv('DEEPSEEK')

    if not api_key:
        print("‚ùå API –∫–ª—é—á DEEPSEEK –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å DeepSeek API...")

    try:
        # –ü—Ä–æ—Å—Ç–æ–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get("https://api.deepseek.com")
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
    try:
        http_client = httpx.AsyncClient(timeout=30.0)
        api_client = AsyncOpenAI(
            api_key=api_key,
            base_url="https://api.deepseek.com",
            http_client=http_client
        )

        response = await api_client.chat.completions.create(
            model="deepseek-chat",
            messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç"}],
            max_tokens=10
        )

        await http_client.aclose()
        print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        return False


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
async def deep_seek_streaming(data, trade1, prompt=prompt1, timeout=120):
    """
    –í–µ—Ä—Å–∏—è —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    """

    api_key = os.getenv('DEEPSEEK')

    if not api_key:
        return "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á DEEPSEEK"

    try:
        client = AsyncOpenAI(
            api_key=api_key,
            base_url="https://api.deepseek.com",
            timeout=timeout
        )

        print("–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞...")

        stream = await client.chat.completions.create(
            model="deepseek-reasoner",
            messages=[
                {"role": "system", "content": trade1 + prompt},
                {"role": "user", "content": data},
            ],
            stream=True,
            max_tokens=4000
        )

        result = ""
        async for chunk in stream:
            if chunk.choices[0].delta.content is not None:
                content = chunk.choices[0].delta.content
                result += content
                print(content, end='', flush=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

        print("\n--- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
        return result

    except asyncio.TimeoutError:
        error_msg = f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ ({timeout} —Å–µ–∫)"
        print(error_msg)
        return f"–û—à–∏–±–∫–∞: {error_msg}"

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API: {e}"
        print(error_msg)
        return f"–û—à–∏–±–∫–∞: {str(e)}"

# a =""" {'long': ['AUCTIONUSDT', 'AXSUSDT', 'BCHUSDT', 'BSVUSDT', 'DASHUSDT', 'DEXEUSDT', 'ETCUSDT', 'ILVUSDT', 'LTCUSDT', 'OMNIUSDT', 'TAOUSDT'], 'short': ['BCHUSDT', 'FXSUSDT', 'NXPCUSDT']}"""
# b = asyncio.run(deep_seek_streaming(a))

# print(b)