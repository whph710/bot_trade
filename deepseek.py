import asyncio
import os
import logging
from typing import Optional
import httpx
from openai import AsyncOpenAI
from dotenv import load_dotenv
import time

load_dotenv()
logger = logging.getLogger(__name__)

# –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
_cached_prompts = {}

# –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø 5M –°–ö–ê–õ–¨–ü–ò–ù–ì–ê (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞)
SCALPING_CONFIG = {
    'default_timeout': 20,  # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è 5M
    'selection_timeout': 15,  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞
    'analysis_timeout': 30,  # –ë—ã—Å—Ç—Ä–µ–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    'max_retries': 2,  # –ú–∏–Ω–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    'max_tokens_selection': 800,  # –ï—â—ë –º–µ–Ω—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–±–æ—Ä–∞
    'max_tokens_analysis': 2500,  # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
}


def get_cached_prompt(filename: str = 'prompt.txt') -> str:
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏."""
    global _cached_prompts

    if filename not in _cached_prompts:
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                _cached_prompts[filename] = file.read()
                logger.info(f"–ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {filename}")
        except FileNotFoundError:
            default_prompt = "–¢—ã –æ–ø—ã—Ç–Ω—ã–π 5M —Å–∫–∞–ª—å–ø–µ—Ä. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ."
            _cached_prompts[filename] = default_prompt
            logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è {filename}")

    return _cached_prompts[filename]


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è 5M)
_global_http_client = None


async def get_http_client(timeout: int = 20) -> httpx.AsyncClient:
    """–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏."""
    global _global_http_client

    if _global_http_client is None or _global_http_client.is_closed:
        _global_http_client = httpx.AsyncClient(
            timeout=httpx.Timeout(timeout),
            limits=httpx.Limits(
                max_connections=15,  # –ë–æ–ª—å—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
                max_keepalive_connections=8
            ),
            verify=True,
            http2=True,
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ 5M
            headers={
                'Connection': 'keep-alive',
                'Keep-Alive': 'timeout=25, max=150'
            }
        )

    return _global_http_client


async def deep_seek(data: str,
                    prompt: str = None,
                    request_type: str = 'analysis',  # 'selection' –∏–ª–∏ 'analysis'
                    timeout: int = None,
                    max_tokens: int = None,
                    max_retries: int = None) -> str:
    """
    –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞.

    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        prompt: –ü—Ä–æ–º–ø—Ç (–µ—Å–ª–∏ None - –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞)
        request_type: 'selection' –¥–ª—è –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞, 'analysis' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        timeout: –¢–∞–π–º–∞—É—Ç (–µ—Å–ª–∏ None - –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ —Ç–∏–ø—É –∑–∞–ø—Ä–æ—Å–∞)
        max_tokens: –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ (–µ—Å–ª–∏ None - –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        max_retries: –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ (–µ—Å–ª–∏ None - –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
    """
    start_time = time.time()

    api_key = os.getenv('DEEPSEEK')
    if not api_key:
        error_msg = "API –∫–ª—é—á DEEPSEEK –Ω–µ –Ω–∞–π–¥–µ–Ω"
        logger.error(error_msg)
        return f"–û—à–∏–±–∫–∞: {error_msg}"

    # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è 5M
    if request_type == 'selection':
        timeout = timeout or SCALPING_CONFIG['selection_timeout']
        max_tokens = max_tokens or SCALPING_CONFIG['max_tokens_selection']
        max_retries = max_retries or SCALPING_CONFIG['max_retries']
        prompt_file = 'prompt2.txt'  # –ü—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞
    else:  # analysis
        timeout = timeout or SCALPING_CONFIG['analysis_timeout']
        max_tokens = max_tokens or SCALPING_CONFIG['max_tokens_analysis']
        max_retries = max_retries or SCALPING_CONFIG['max_retries']
        prompt_file = 'prompt.txt'  # –ü—Ä–æ–º–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
    if prompt is None:
        prompt = get_cached_prompt(prompt_file)

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π HTTP –∫–ª–∏–µ–Ω—Ç
    http_client = await get_http_client(timeout)

    client = AsyncOpenAI(
        api_key=api_key,
        base_url="https://api.deepseek.com",
        http_client=http_client
    )

    for attempt in range(max_retries):
        try:
            logger.info(f"DeepSeek 5M {request_type} –∑–∞–ø—Ä–æ—Å {attempt + 1}/{max_retries}")

            # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            response = await client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": str(data)},
                ],
                stream=False,
                max_tokens=max_tokens,

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ 5M
                temperature=0.2 if request_type == 'selection' else 0.6,  # –ú–µ–Ω—å—à–µ —Ä–∞–Ω–¥–æ–º–∞ –¥–ª—è –æ—Ç–±–æ—Ä–∞
                top_p=0.7 if request_type == 'selection' else 0.85,
                frequency_penalty=0.15,  # –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–æ–≤
                presence_penalty=0.1 if request_type == 'selection' else 0.05
            )

            result = response.choices[0].message.content
            execution_time = time.time() - start_time

            logger.info(f"‚úÖ DeepSeek 5M {request_type} –æ—Ç–≤–µ—Ç: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ {execution_time:.2f}—Å–µ–∫")

            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –º–µ–¥–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –¥–ª—è 5M
            if execution_time > (timeout * 0.7):
                logger.warning(f"‚ö†Ô∏è –ú–ï–î–õ–ï–ù–ù–´–ô –æ—Ç–≤–µ—Ç –ò–ò –¥–ª—è 5M: {execution_time:.2f}—Å–µ–∫ (–ª–∏–º–∏—Ç {timeout}—Å–µ–∫)")
            print(result)
            return result

        except asyncio.TimeoutError:
            logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ò–ò –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {timeout}—Å–µ–∫ (–ö–†–ò–¢–ò–ß–ù–û –¥–ª—è 5M)")
            if attempt < max_retries - 1:
                await asyncio.sleep(0.5)  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è 5M

        except Exception as e:
            error_msg = str(e)
            logger.warning(f"‚ùå 5M –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {error_msg}")

            if attempt < max_retries - 1:
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
                wait_time = 0.5 + (attempt * 0.3)  # –ú–∞–∫—Å–∏–º—É–º 1.1 —Å–µ–∫—É–Ω–¥—ã –æ–∂–∏–¥–∞–Ω–∏—è
                logger.info(f"‚è≥ –ë—ã—Å—Ç—Ä–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f}—Å...")
                await asyncio.sleep(wait_time)
            else:
                logger.error(f"üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è 5M: {error_msg}")
                return f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {error_msg}"

    execution_time = time.time() - start_time
    logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô —Å–±–æ–π DeepSeek –∑–∞ {execution_time:.2f}—Å–µ–∫ (5M)")
    return f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ DeepSeek API –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫"


async def deep_seek_selection(data: str, prompt: str = None) -> str:
    """–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞ –ø–∞—Ä (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è 5M)."""
    return await deep_seek(
        data=data,
        prompt=prompt,
        request_type='selection'
    )


async def deep_seek_analysis(data: str, prompt: str = None) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è 5M)."""
    return await deep_seek(
        data=data,
        prompt=prompt,
        request_type='analysis'
    )


async def test_deepseek_connection() -> bool:
    """–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DeepSeek API –¥–ª—è 5M."""
    api_key = os.getenv('DEEPSEEK')
    if not api_key:
        logger.error("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    try:
        http_client = await get_http_client(10)  # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è 5M
        api_client = AsyncOpenAI(
            api_key=api_key,
            base_url="https://api.deepseek.com",
            http_client=http_client
        )

        response = await api_client.chat.completions.create(
            model="deepseek-chat",
            messages=[{"role": "user", "content": "5M test"}],
            max_tokens=3,
            temperature=0.1
        )

        logger.info("‚úÖ DeepSeek API —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ DeepSeek API: {e}")
        return False


async def batch_deep_seek_5m(requests: list, request_type: str = 'selection') -> list:
    """
    –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞.
    –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è 5M.
    """
    results = []

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    tasks = []
    for req_data in requests:
        task = deep_seek(
            data=req_data.get('data', ''),
            prompt=req_data.get('prompt'),
            request_type=request_type
        )
        tasks.append(task)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º (–±–æ–ª—å—à–µ –¥–ª—è 5M)
    semaphore = asyncio.Semaphore(4)  # –ú–∞–∫—Å–∏–º—É–º 4 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è 5M

    async def bounded_request(task):
        async with semaphore:
            return await task

    bounded_tasks = [bounded_request(task) for task in tasks]
    results = await asyncio.gather(*bounded_tasks, return_exceptions=True)

    return results


async def check_api_health_5m() -> dict:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞."""
    start_time = time.time()

    health_info = {
        "api_key_exists": bool(os.getenv('DEEPSEEK')),
        "api_functional": False,
        "response_time": None,
        "suitable_for_5m_scalping": False
    }

    try:
        health_info["api_functional"] = await test_deepseek_connection()
        end_time = time.time()
        response_time = round(end_time - start_time, 2)
        health_info["response_time"] = response_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ (–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã)
        health_info["suitable_for_5m_scalping"] = response_time < 8.0

        if response_time > 12.0:
            logger.warning(f"‚ö†Ô∏è –ú–ï–î–õ–ï–ù–ù–û–ï API ({response_time}—Å–µ–∫) - –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞")
        elif response_time > 8.0:
            logger.warning(f"‚ö†Ô∏è API ({response_time}—Å–µ–∫) - –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞")
        else:
            logger.info(f"‚úÖ API –±—ã—Å—Ç—Ä–æ–µ ({response_time}—Å–µ–∫) - –æ—Ç–ª–∏—á–Ω–æ –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")

    return health_info


async def cleanup_http_client():
    """–û—á–∏—Å—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ HTTP –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã."""
    global _global_http_client
    if _global_http_client and not _global_http_client.is_closed:
        await _global_http_client.aclose()
        _global_http_client = None
        logger.info("üßπ HTTP –∫–ª–∏–µ–Ω—Ç –æ—á–∏—â–µ–Ω")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
async def deep_seek_legacy(data: str, prompt: str = None, timeout: int = 45,
                           max_tokens: int = 3500, max_retries: int = 3) -> str:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è 5M)."""
    return await deep_seek(
        data=data,
        prompt=prompt,
        request_type='analysis',
        timeout=min(timeout, 30),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è 5M
        max_tokens=min(max_tokens, 2500),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è 5M
        max_retries=min(max_retries, 2)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è 5M
    )


# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
async def deep_seek_ultra_fast(data: str, prompt: str = None) -> str:
    """
    –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤ 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞.
    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–¥–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏.
    """
    return await deep_seek(
        data=data,
        prompt=prompt,
        request_type='selection',
        timeout=12,  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ
        max_tokens=500,  # –ú–∏–Ω–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤
        max_retries=1  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞
    )