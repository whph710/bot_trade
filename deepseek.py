import asyncio
import os
import logging
from typing import Optional
import httpx
from openai import AsyncOpenAI
from dotenv import load_dotenv
import time
import json

load_dotenv()
logger = logging.getLogger(__name__)

# –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
_cached_prompts = {}

# –°–ö–ê–õ–¨–ü–ò–ù–ì–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
SCALPING_CONFIG = {
    'default_timeout': 35,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
    'selection_timeout': 30,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
    'analysis_timeout': 45,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
    'max_retries': 2,
    'max_tokens_selection': 1500,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
    'max_tokens_analysis': 4000,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
}


def get_cached_prompt(filename: str = 'prompt.txt') -> str:
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏."""
    global _cached_prompts

    if filename not in _cached_prompts:
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                _cached_prompts[filename] = file.read()
                logger.info(f"–ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {filename}")
        except FileNotFoundError:
            default_prompt = "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä-—Å–∫–∞–ª—å–ø–µ—Ä. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –±—ã—Å—Ç—Ä–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ."
            _cached_prompts[filename] = default_prompt
            logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è {filename}")

    return _cached_prompts[filename]


def create_thinking_prompt(original_prompt: str, request_type: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π."""

    thinking_instruction = """
–í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –¥–∞—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ –æ–±–¥—É–º–∞–π –∑–∞–¥–∞—á—É –≤ —Å–µ–∫—Ü–∏–∏ <thinking>.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
<thinking>
–ó–¥–µ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
1. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
2. –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É –º–µ–Ω—è –µ—Å—Ç—å
3. –ö–∞–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–ª–∏ —Å–∏–≥–Ω–∞–ª—ã –≤–∏–∂—É
4. –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
5. –õ–æ–≥–∏–∫—É –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
</thinking>

–ü–æ—Å–ª–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –¥–∞–π —á–µ—Ç–∫–∏–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.
"""

    return thinking_instruction + "\n\n" + original_prompt


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—ç–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏)
_global_http_client = None


async def get_http_client(timeout: int = 35) -> httpx.AsyncClient:
    """–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏."""
    global _global_http_client

    if _global_http_client is None or _global_http_client.is_closed:
        _global_http_client = httpx.AsyncClient(
            timeout=httpx.Timeout(timeout),
            limits=httpx.Limits(
                max_connections=10,
                max_keepalive_connections=5
            ),
            verify=True,
            http2=True,
            headers={
                'Connection': 'keep-alive',
                'Keep-Alive': 'timeout=30, max=100'
            }
        )

    return _global_http_client


def extract_final_answer(response_text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —É–±–∏—Ä–∞—è —Å–µ–∫—Ü–∏—é —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π."""
    if '<thinking>' in response_text and '</thinking>' in response_text:
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
        thinking_end = response_text.find('</thinking>')
        if thinking_end != -1:
            # –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ </thinking>
            final_answer = response_text[thinking_end + len('</thinking>'):].strip()
            if final_answer:
                return final_answer

    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–∫—Ü–∏–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return response_text


async def deep_seek(data: str,
                    prompt: str = None,
                    request_type: str = 'analysis',
                    timeout: int = None,
                    max_tokens: int = None,
                    max_retries: int = None,
                    enable_thinking: bool = True) -> str:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ —Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.

    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        prompt: –ü—Ä–æ–º–ø—Ç (–µ—Å–ª–∏ None - –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞)
        request_type: 'selection' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–±–æ—Ä–∞, 'analysis' –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        timeout: –¢–∞–π–º–∞—É—Ç (–µ—Å–ª–∏ None - –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ —Ç–∏–ø—É –∑–∞–ø—Ä–æ—Å–∞)
        max_tokens: –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ (–µ—Å–ª–∏ None - –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        max_retries: –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ (–µ—Å–ª–∏ None - –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        enable_thinking: –í–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
    """
    start_time = time.time()

    api_key = os.getenv('DEEPSEEK')
    if not api_key:
        error_msg = "API –∫–ª—é—á DEEPSEEK –Ω–µ –Ω–∞–π–¥–µ–Ω"
        logger.error(error_msg)
        return f"–û—à–∏–±–∫–∞: {error_msg}"

    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
    if request_type == 'selection':
        timeout = timeout or SCALPING_CONFIG['selection_timeout']
        max_tokens = max_tokens or SCALPING_CONFIG['max_tokens_selection']
        max_retries = max_retries or SCALPING_CONFIG['max_retries']
        prompt_file = 'prompt2.txt'
    else:  # analysis
        timeout = timeout or SCALPING_CONFIG['analysis_timeout']
        max_tokens = max_tokens or SCALPING_CONFIG['max_tokens_analysis']
        max_retries = max_retries or SCALPING_CONFIG['max_retries']
        prompt_file = 'prompt.txt'

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
    if prompt is None:
        prompt = get_cached_prompt(prompt_file)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
    if enable_thinking:
        prompt = create_thinking_prompt(prompt, request_type)

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π HTTP –∫–ª–∏–µ–Ω—Ç
    http_client = await get_http_client(timeout)

    client = AsyncOpenAI(
        api_key=api_key,
        base_url="https://api.deepseek.com",
        http_client=http_client
    )

    for attempt in range(max_retries):
        try:
            logger.info(
                f"DeepSeek {request_type} –∑–∞–ø—Ä–æ—Å {attempt + 1}/{max_retries} {'—Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏' if enable_thinking else ''}")

            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            response = await client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": str(data)},
                ],
                stream=False,
                max_tokens=max_tokens,
                temperature=0.3 if request_type == 'selection' else 0.7,
                top_p=0.8 if request_type == 'selection' else 0.9,
                frequency_penalty=0.1,
                presence_penalty=0.1 if request_type == 'selection' else 0.05
            )

            raw_result = response.choices[0].message.content

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —É–±–∏—Ä–∞—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
            if enable_thinking:
                result = extract_final_answer(raw_result)

                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if '<thinking>' in raw_result:
                    thinking_start = raw_result.find('<thinking>') + len('<thinking>')
                    thinking_end = raw_result.find('</thinking>')
                    if thinking_end > thinking_start:
                        thinking_content = raw_result[thinking_start:thinking_end].strip()
                        logger.debug(f"üß† –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ò–ò: {thinking_content[:200]}...")
            else:
                result = raw_result

            execution_time = time.time() - start_time

            logger.info(f"‚úÖ DeepSeek {request_type} –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ {execution_time:.2f}—Å–µ–∫")

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –º–µ–¥–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            if execution_time > (timeout * 0.8):
                logger.warning(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò: {execution_time:.2f}—Å–µ–∫ (–ª–∏–º–∏—Ç {timeout}—Å–µ–∫)")

            print(result)
            return result

        except asyncio.TimeoutError:
            logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ò–ò –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {timeout}—Å–µ–∫")
            if attempt < max_retries - 1:
                await asyncio.sleep(1)

        except Exception as e:
            error_msg = str(e)
            logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {error_msg}")

            if attempt < max_retries - 1:
                wait_time = 1 + (attempt * 0.5)
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f}—Å...")
                await asyncio.sleep(wait_time)
            else:
                logger.error(f"üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã: {error_msg}")
                return f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {error_msg}"

    execution_time = time.time() - start_time
    logger.error(f"üí• –ü–æ–ª–Ω–∞—è –Ω–µ—É–¥–∞—á–∞ DeepSeek –∑–∞ {execution_time:.2f}—Å–µ–∫")
    return f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ DeepSeek API –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫"


async def deep_seek_selection(data: str, prompt: str = None) -> str:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞ –ø–∞—Ä —Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏."""
    return await deep_seek(
        data=data,
        prompt=prompt,
        request_type='selection',
        enable_thinking=True
    )


async def deep_seek_analysis(data: str, prompt: str = None) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏."""
    return await deep_seek(
        data=data,
        prompt=prompt,
        request_type='analysis',
        enable_thinking=True
    )


async def deep_seek_fast(data: str, prompt: str = None, request_type: str = 'analysis') -> str:
    """–ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)."""
    return await deep_seek(
        data=data,
        prompt=prompt,
        request_type=request_type,
        enable_thinking=False
    )


async def test_deepseek_connection() -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DeepSeek API."""
    api_key = os.getenv('DEEPSEEK')
    if not api_key:
        logger.error("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    try:
        http_client = await get_http_client(15)
        api_client = AsyncOpenAI(
            api_key=api_key,
            base_url="https://api.deepseek.com",
            http_client=http_client
        )

        response = await api_client.chat.completions.create(
            model="deepseek-chat",
            messages=[{"role": "user", "content": "Test connection"}],
            max_tokens=5,
            temperature=0.1
        )

        logger.info("‚úÖ DeepSeek API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ DeepSeek API: {e}")
        return False


async def batch_deep_seek(requests: list, request_type: str = 'selection') -> list:
    """–ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è."""
    results = []

    tasks = []
    for req_data in requests:
        task = deep_seek(
            data=req_data.get('data', ''),
            prompt=req_data.get('prompt'),
            request_type=request_type,
            enable_thinking=req_data.get('enable_thinking', True)
        )
        tasks.append(task)

    semaphore = asyncio.Semaphore(3)

    async def bounded_request(task):
        async with semaphore:
            return await task

    bounded_tasks = [bounded_request(task) for task in tasks]
    results = await asyncio.gather(*bounded_tasks, return_exceptions=True)

    return results


async def check_api_health() -> dict:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞."""
    start_time = time.time()

    health_info = {
        "api_key_exists": bool(os.getenv('DEEPSEEK')),
        "api_functional": False,
        "response_time": None,
        "suitable_for_scalping": False
    }

    try:
        health_info["api_functional"] = await test_deepseek_connection()
        end_time = time.time()
        response_time = round(end_time - start_time, 2)
        health_info["response_time"] = response_time

        # –° —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
        health_info["suitable_for_scalping"] = response_time < 15.0

        if response_time > 20.0:
            logger.warning(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ–µ API ({response_time}—Å–µ–∫) - –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ —Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏")
        else:
            logger.info(f"‚úÖ API –ø–æ–¥—Ö–æ–¥—è—â–µ–µ ({response_time}—Å–µ–∫) –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ —Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")

    return health_info


async def cleanup_http_client():
    """–û—á–∏—Å—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ HTTP –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã."""
    global _global_http_client
    if _global_http_client and not _global_http_client.is_closed:
        await _global_http_client.aclose()
        _global_http_client = None
        logger.info("üßπ HTTP –∫–ª–∏–µ–Ω—Ç –æ—á–∏—â–µ–Ω")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
async def deep_seek_legacy(data: str, prompt: str = None, timeout: int = 60,
                           max_tokens: int = 4000, max_retries: int = 3) -> str:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""
    return await deep_seek(
        data=data,
        prompt=prompt,
        request_type='analysis',
        timeout=timeout,
        max_tokens=max_tokens,
        max_retries=max_retries,
        enable_thinking=True
    )