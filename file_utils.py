"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±–æ—Ç–∞
"""

import json
from pathlib import Path
from datetime import datetime
from typing import Dict, Any
from logging_config import setup_module_logger

logger = setup_module_logger(__name__)


def save_bot_result(result: Dict[str, Any], output_dir: str = "bot_results") -> str:
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ JSON —Ñ–∞–π–ª

    Args:
        result: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π)

    Returns:
        –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    try:
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)

        timestamp = result.get('timestamp', datetime.now().strftime('%Y%m%d_%H%M%S'))
        filename = f"bot_result_{timestamp}.json"
        file_path = output_path / filename

        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)

        return str(file_path.absolute())

    except Exception as e:
        logger.error(f"Failed to save result: {e}")
        return ""


def print_bot_result(result: Dict[str, Any]) -> None:
    """
    –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å

    Args:
        result: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    """
    print("\n" + "=" * 80)
    print(f"{'RESULT: ' + result['result']:^80}")
    print("=" * 80)

    # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    total_time = result.get('total_time', 0)
    print(f"\n‚è±Ô∏è  Total time: {total_time:.1f}s")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = result.get('stats', {})
    print(f"\nüìä STATISTICS:")
    print(f"  ‚Ä¢ Pairs scanned:       {stats.get('pairs_scanned', 0)}")
    print(f"  ‚Ä¢ Signal pairs found:  {stats.get('signal_pairs_found', 0)}")
    print(f"  ‚Ä¢ AI selected:         {stats.get('ai_selected', 0)}")
    print(f"  ‚Ä¢ Analyzed:            {stats.get('analyzed', 0)}")
    print(f"  ‚Ä¢ Validated signals:   {stats.get('validated_signals', 0)}")
    print(f"  ‚Ä¢ Rejected signals:    {stats.get('rejected_signals', 0)}")
    print(f"  ‚Ä¢ Processing speed:    {stats.get('processing_speed', 0):.1f} pairs/sec")

    # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞
    if result.get('result') == 'VALIDATION_SKIPPED':
        print(f"\n‚è∞ Validation skipped: {result.get('reason', 'Unknown reason')}")
        print("=" * 80 + "\n")
        return

    # –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    validated = result.get('validated_signals', [])
    if validated:
        print(f"\n‚úÖ VALIDATED SIGNALS ({len(validated)}):")
        print("-" * 80)
        for sig in validated:
            tp_levels = sig.get('take_profit_levels', [0, 0, 0])
            print(f"\n  {sig['symbol']:>10} | {sig['signal']:<5} | Confidence: {sig['confidence']}%")
            print(f"  {'':>10} | Entry:  ${sig['entry_price']:.2f}")
            print(f"  {'':>10} | Stop:   ${sig['stop_loss']:.2f}")
            print(f"  {'':>10} | TP 1/2/3: ${tp_levels[0]:.2f} / ${tp_levels[1]:.2f} / ${tp_levels[2]:.2f}")
            print(f"  {'':>10} | R/R:    1:{sig.get('risk_reward_ratio', 0):.2f}")
            print(f"  {'':>10} | Hold:   {sig.get('hold_duration_minutes', 0)} min")

    # –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–ø–µ—Ä–≤—ã–µ 5)
    rejected = result.get('rejected_signals', [])
    if rejected:
        print(f"\n‚ùå REJECTED SIGNALS ({len(rejected)}):")
        print("-" * 80)
        for rej in rejected[:5]:
            reason = rej.get('rejection_reason', 'Unknown')
            print(f"  {rej['symbol']:>10} | {reason}")

        if len(rejected) > 5:
            print(f"  {'...':>10} | and {len(rejected) - 5} more")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    vstats = result.get('validation_stats', {})
    if vstats and vstats.get('total', 0) > 0:
        print(f"\nüìà VALIDATION STATS:")
        print(f"  ‚Ä¢ Approval rate:      {vstats.get('approval_rate', 0):.1f}%")
        print(f"  ‚Ä¢ Avg R/R:            1:{vstats.get('avg_risk_reward', 0):.2f}")

        rr_stats = vstats.get('rr_stats', {})
        if rr_stats.get('samples_counted', 0) > 0:
            print(f"  ‚Ä¢ R/R range:          1:{rr_stats.get('min_rr', 0):.2f} - 1:{rr_stats.get('max_rr', 0):.2f}")

        top_reasons = vstats.get('top_rejection_reasons', [])
        if top_reasons:
            print(f"  ‚Ä¢ Top rejection:")
            for reason in top_reasons[:2]:
                print(f"    - {reason}")

    print("\n" + "=" * 80 + "\n")


def get_latest_result(results_dir: str = "bot_results") -> Dict[str, Any] | None:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    Args:
        results_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–ª–∏ None
    """
    try:
        results_path = Path(results_dir)

        if not results_path.exists():
            logger.warning(f"Results directory not found: {results_dir}")
            return None

        json_files = list(results_path.glob("bot_result_*.json"))

        if not json_files:
            logger.warning("No result files found")
            return None

        latest_file = max(json_files, key=lambda p: p.stat().st_mtime)

        with open(latest_file, 'r', encoding='utf-8') as f:
            result = json.load(f)

        logger.info(f"Latest result loaded: {latest_file.name}")
        return result

    except Exception as e:
        logger.error(f"Failed to load latest result: {e}")
        return None


def cleanup_old_results(results_dir: str = "bot_results", keep_last: int = 10) -> int:
    """
    –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N

    Args:
        results_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keep_last: –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ –æ—Å—Ç–∞–≤–∏—Ç—å

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    try:
        results_path = Path(results_dir)

        if not results_path.exists():
            return 0

        json_files = list(results_path.glob("bot_result_*.json"))

        if len(json_files) <= keep_last:
            return 0

        json_files.sort(key=lambda p: p.stat().st_mtime, reverse=True)
        files_to_delete = json_files[keep_last:]
        deleted_count = 0

        for file_path in files_to_delete:
            try:
                file_path.unlink()
                deleted_count += 1
            except Exception as e:
                logger.warning(f"Failed to delete {file_path.name}: {e}")

        if deleted_count > 0:
            logger.info(f"Cleanup: Removed {deleted_count} old result file(s)")

        return deleted_count

    except Exception as e:
        logger.error(f"Cleanup failed: {e}")
        return 0