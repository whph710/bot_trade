"""
Template-based —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
–ó–∞–º–µ–Ω—è–µ—Ç AI —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π Python template
–§–∞–π–ª: trade_bot_programm/signal_formatter.py
"""

from typing import Dict, List
from logging_config import setup_module_logger

logger = setup_module_logger(__name__)

SIGNAL_TEMPLATE = """
{emoji} <b>{symbol}</b> | {signal}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>üìä –ü–ê–†–ê–ú–ï–¢–†–´:</b>

‚Ä¢ Confidence: <b>{confidence}%</b>
‚Ä¢ Risk/Reward: <b>1:{rr_ratio:.1f}</b>
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{hold_duration} –º–∏–Ω</b>

<b>üí∞ –£–†–û–í–ù–ò –í–•–û–î–ê/–í–´–•–û–î–ê:</b>

‚Ä¢ Entry:  <code>${entry_price:.4f}</code>
‚Ä¢ Stop:   <code>${stop_loss:.4f}</code>
‚Ä¢ TP1:    <code>${tp1:.4f}</code>
‚Ä¢ TP2:    <code>${tp2:.4f}</code>
‚Ä¢ TP3:    <code>${tp3:.4f}</code>

<b>üìà –†–´–ù–û–ö:</b>

{market_conditions}

<b>üìù –ê–ù–ê–õ–ò–ó:</b>

<i>{analysis}</i>

<b>üèÅ –í–ê–õ–ò–î–ê–¶–ò–Ø:</b>

{validation_notes}
"""


def format_signal_simple(signal_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É—è template (–ë–ï–ó AI)

    Args:
        signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Telegram
    """
    try:
        emoji = 'üü¢' if signal_data.get('signal') == 'LONG' else 'üî¥'

        tp_levels = signal_data.get('take_profit_levels', [0, 0, 0])
        if len(tp_levels) < 3:
            tp_levels = tp_levels + [0] * (3 - len(tp_levels))

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º R/R
        entry = signal_data.get('entry_price', 0)
        stop = signal_data.get('stop_loss', 0)
        risk = abs(entry - stop)
        reward = abs(tp_levels[1] - entry) if len(tp_levels) > 1 else 0
        rr_ratio = (reward / risk) if risk > 0 else 0

        # Market conditions
        market_cond = signal_data.get('market_conditions', 'N/A')
        if isinstance(market_cond, dict):
            market_cond = f"Trend: {market_cond.get('trend', 'N/A')}, Vol: {market_cond.get('volume', 'N/A')}"

        # Analysis
        analysis = signal_data.get('analysis', 'No detailed analysis available')
        if len(analysis) > 500:
            analysis = analysis[:497] + "..."

        # Validation notes
        validation = signal_data.get('validation_notes', 'Signal validated')

        return SIGNAL_TEMPLATE.format(
            emoji=emoji,
            symbol=signal_data.get('symbol', 'UNKNOWN'),
            signal=signal_data.get('signal', 'NONE'),
            confidence=signal_data.get('confidence', 0),
            rr_ratio=rr_ratio,
            hold_duration=signal_data.get('hold_duration_minutes', 720),
            entry_price=entry,
            stop_loss=stop,
            tp1=tp_levels[0],
            tp2=tp_levels[1],
            tp3=tp_levels[2],
            market_conditions=market_cond,
            analysis=analysis,
            validation_notes=validation
        ).strip()

    except Exception as e:
        logger.error(f"Error formatting signal: {e}")
        return f"‚ö†Ô∏è Error formatting signal for {signal_data.get('symbol', 'UNKNOWN')}"


def format_multiple_signals(signals: List[Dict]) -> List[str]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª–æ–≤

    Args:
        signals: –°–ø–∏—Å–æ–∫ JSON –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

    Returns:
        –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    """
    if not signals:
        return []

    formatted = []
    for signal in signals:
        try:
            formatted_text = format_signal_simple(signal)
            formatted.append(formatted_text)
        except Exception as e:
            logger.error(f"Error formatting signal {signal.get('symbol', 'UNKNOWN')}: {e}")
            continue

    logger.info(f"Formatted {len(formatted)}/{len(signals)} signals successfully")
    return formatted