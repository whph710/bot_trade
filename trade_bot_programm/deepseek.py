"""
DeepSeek AI –∫–ª–∏–µ–Ω—Ç - FIXED: Stage 2 compact multi-TF support + max_pairs enforcement
–§–∞–π–ª: trade_bot_programm/deepseek.py
"""

import os
import json
from openai import AsyncOpenAI
from typing import Optional, Dict, List
from pathlib import Path


def load_prompt_unified(prompt_file: str) -> str:
    """Unified prompt loader"""
    search_paths = [
        Path(prompt_file),
        Path(__file__).parent / "prompts" / Path(prompt_file).name,
        Path(__file__).parent.parent / "prompts" / Path(prompt_file).name,
        Path(__file__).parent.parent.parent / "prompts" / Path(prompt_file).name,
    ]

    for path in search_paths:
        if path.exists() and path.is_file():
            with open(path, 'r', encoding='utf-8') as f:
                content = f.read()
                print(f"[DeepSeek] üìÑ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {path.name} ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return content

    error_msg = f"–ü—Ä–æ–º–ø—Ç —Ñ–∞–π–ª '{prompt_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–∫–∞–ª –≤:\n"
    for path in search_paths:
        error_msg += f"  - {path.absolute()}\n"
    raise FileNotFoundError(error_msg)


class DeepSeekClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek API"""

    def __init__(
        self,
        api_key: Optional[str] = None,
        model: Optional[str] = None,
        use_reasoning: Optional[bool] = None,
        base_url: str = "https://api.deepseek.com"
    ):
        self.api_key = api_key or os.getenv("DEEPSEEK_API_KEY")
        if not self.api_key:
            raise ValueError("DEEPSEEK_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

        self.model = model or os.getenv("DEEPSEEK_MODEL", "deepseek-chat")

        reasoning_env = os.getenv("DEEPSEEK_REASONING", "false").lower()
        self.use_reasoning = use_reasoning if use_reasoning is not None else (reasoning_env in ["true", "1", "yes"])

        self.is_reasoning_model = "reasoner" in self.model.lower() or self.model == "deepseek-reasoner"

        if self.use_reasoning and not self.is_reasoning_model:
            print(f"[DeepSeek] ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: DEEPSEEK_REASONING=true, –Ω–æ –º–æ–¥–µ–ª—å {self.model} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç reasoning")
            print(f"[DeepSeek] üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º reasoning —Ä–µ–∂–∏–º")
            self.use_reasoning = False

        self.client = AsyncOpenAI(
            api_key=self.api_key,
            base_url=base_url
        )

        self.prompts_cache: Dict[str, str] = {}

        print(f"[DeepSeek] ‚ïî{'‚ïê'*60}‚ïó")
        print(f"[DeepSeek] ‚ïë {'–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø DEEPSEEK':^60} ‚ïë")
        print(f"[DeepSeek] ‚ï†{'‚ïê'*60}‚ï£")
        print(f"[DeepSeek] ‚ïë –ú–æ–¥–µ–ª—å: {self.model:<49} ‚ïë")
        print(f"[DeepSeek] ‚ïë Reasoning –º–æ–¥–µ–ª—å: {'–î–∞' if self.is_reasoning_model else '–ù–µ—Ç':<43} ‚ïë")
        print(f"[DeepSeek] ‚ïë Reasoning —Ä–µ–∂–∏–º: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if self.use_reasoning else '‚ùå –í—ã–∫–ª—é—á–µ–Ω':<44} ‚ïë")
        print(f"[DeepSeek] ‚ïë Base URL: {base_url:<47} ‚ïë")
        print(f"[DeepSeek] ‚ïö{'‚ïê'*60}‚ïù")

    def _load_prompt(self, prompt_file: str) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if prompt_file in self.prompts_cache:
            return self.prompts_cache[prompt_file]

        content = load_prompt_unified(prompt_file)
        self.prompts_cache[prompt_file] = content
        return content

    async def select_pairs(
        self,
        pairs_data: List[Dict],
        max_pairs: Optional[int] = None,
        system_prompt_file: str = "prompt_select.txt",
        temperature: Optional[float] = None,
        max_tokens: Optional[int] = None
    ) -> List[str]:
        """–í—ã–±–æ—Ä –ø–∞—Ä —á–µ—Ä–µ–∑ DeepSeek (Stage 2 - compact multi-TF)"""
        try:
            if temperature is None:
                temperature = float(os.getenv("AI_TEMPERATURE_SELECT", "0.3"))
            if max_tokens is None:
                max_tokens = int(os.getenv("AI_MAX_TOKENS_SELECT", "2000"))

            system_prompt = self._load_prompt(system_prompt_file)

            pairs_info = []
            for pair in pairs_data:
                symbol = pair.get('symbol', 'UNKNOWN')

                # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ multi-TF –¥–∞–Ω–Ω—ã—Ö
                info = [f"Symbol: {symbol}"]
                info.append(f"Direction: {pair.get('direction', 'NONE')} ({pair.get('confidence', 0)}%)")

                # 1H —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if pair.get('indicators_1h'):
                    current_1h = pair['indicators_1h'].get('current', {})
                    if current_1h:
                        info.append(f"1H: RSI={current_1h.get('rsi', 0):.1f}, Price=${current_1h.get('price', 0):.2f}")

                # 4H —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if pair.get('indicators_4h'):
                    current_4h = pair['indicators_4h'].get('current', {})
                    if current_4h:
                        info.append(f"4H: RSI={current_4h.get('rsi', 0):.1f}, Vol={current_4h.get('volume_ratio', 0):.2f}")

                # 1D —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if pair.get('indicators_1d'):
                    current_1d = pair['indicators_1d'].get('current', {})
                    if current_1d:
                        info.append(f"1D: RSI={current_1d.get('rsi', 0):.1f}")

                pairs_info.append('\n'.join(info))

            pairs_text = "\n---\n".join(pairs_info)

            limit_text = f"–º–∞–∫—Å–∏–º—É–º {max_pairs} –ø–∞—Ä" if max_pairs else "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"
            user_prompt = (
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ {len(pairs_data)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏ "
                f"multi-timeframe –¥–∞–Ω–Ω—ã–º–∏ (1H/4H/1D) –∏ –≤—ã–±–µ—Ä–∏ {limit_text} "
                f"—Å –Ω–∞–∏–ª—É—á—à–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è swing trading:\n\n{pairs_text}\n\n"
                f"–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {{\"selected_pairs\": [\"BTCUSDT\", \"ETHUSDT\"]}}"
            )

            print(f"\n[DeepSeek] {'‚îÄ'*60}")
            print(f"[DeepSeek] üéØ STAGE 2: –í–´–ë–û–† –ü–ê–† (COMPACT MULTI-TF)")
            print(f"[DeepSeek] {'‚îÄ'*60}")
            print(f"[DeepSeek] üìä –ü–∞—Ä –Ω–∞ –∞–Ω–∞–ª–∏–∑: {len(pairs_data)}")
            print(f"[DeepSeek] üéöÔ∏è  –õ–∏–º–∏—Ç –≤—ã–±–æ—Ä–∞: {limit_text}")
            print(f"[DeepSeek] üìè –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(pairs_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"[DeepSeek] ü§ñ –ú–æ–¥–µ–ª—å: {self.model}")
            print(f"[DeepSeek] üå°Ô∏è  Temperature: {temperature}")
            print(f"[DeepSeek] üé´ Max tokens: {max_tokens}")
            print(f"[DeepSeek] üí≠ Reasoning: {'‚úÖ' if self.use_reasoning else '‚ùå'}")

            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=max_tokens,
                temperature=temperature
            )

            if self.use_reasoning and self.is_reasoning_model:
                if hasattr(response.choices[0].message, 'reasoning_content'):
                    reasoning = response.choices[0].message.reasoning_content
                    if reasoning:
                        print(f"\n[DeepSeek] {'='*60}")
                        print(f"[DeepSeek] üí≠ –†–ê–°–°–£–ñ–î–ï–ù–ò–Ø –ú–û–î–ï–õ–ò (–ø–µ—Ä–≤—ã–µ 800 —Å–∏–º–≤–æ–ª–æ–≤):")
                        print(f"[DeepSeek] {'='*60}")
                        print(f"{reasoning[:800]}...")
                        print(f"[DeepSeek] {'='*60}\n")

            content = response.choices[0].message.content.strip()

            print(f"[DeepSeek] üìù –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(f"[DeepSeek]    {content[:200]}...")

            # –ü–∞—Ä—Å–∏–º JSON response
            selected = []

            try:
                # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if '```json' in content:
                    start = content.find('```json') + 7
                    end = content.find('```', start)
                    if end != -1:
                        content = content[start:end].strip()
                elif '```' in content:
                    start = content.find('```') + 3
                    end = content.find('```', start)
                    if end != -1:
                        content = content[start:end].strip()

                # –ü–∞—Ä—Å–∏–º JSON
                data = json.loads(content)
                selected_pairs = data.get('selected_pairs', [])

                # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                for symbol in selected_pairs:
                    if isinstance(symbol, str):
                        clean_symbol = symbol.strip().strip('"').strip("'").strip('[').strip(']').upper()
                        if clean_symbol and clean_symbol not in selected:
                            selected.append(clean_symbol)

            except json.JSONDecodeError:
                # Fallback: –∏—â–µ–º —Å–∏–º–≤–æ–ª—ã –≤—Ä—É—á–Ω—É—é
                print(f"[DeepSeek] ‚ö†Ô∏è  JSON parsing failed, using fallback")
                for line in content.split('\n'):
                    line = line.strip()
                    if not line or line.startswith('#') or line.startswith('//'):
                        continue

                    tokens = line.replace(',', ' ').replace('"', ' ').replace("'", ' ').replace('[', ' ').replace(']', ' ').split()
                    for token in tokens:
                        token = token.strip().upper()
                        if 2 <= len(token) <= 15 and token not in selected:
                            if 'USDT' in token or token.replace('USDT', '').isalpha():
                                selected.append(token)

            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –°–¢–†–û–ì–û
            if max_pairs:
                if len(selected) > max_pairs:
                    print(f"[DeepSeek] ‚ö†Ô∏è  –û–±—Ä–µ–∑–∞–µ–º —Å {len(selected)} –¥–æ {max_pairs} –ø–∞—Ä")
                    selected = selected[:max_pairs]
                elif len(selected) == 0:
                    print(f"[DeepSeek] ‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –ø–∞—Ä—ã - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

            print(f"\n[DeepSeek] {'='*60}")
            print(f"[DeepSeek] ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –í—ã–±—Ä–∞–Ω–æ {len(selected)} –ø–∞—Ä (–ª–∏–º–∏—Ç: {max_pairs if max_pairs else '–Ω–µ—Ç'})")
            if selected:
                print(f"[DeepSeek] üìã –°–ø–∏—Å–æ–∫: {selected}")
            print(f"[DeepSeek] {'='*60}\n")

            return selected

        except Exception as e:
            print(f"\n[DeepSeek] ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞—Ä: {e}")
            import traceback
            traceback.print_exc()
            return []

    async def chat(
        self,
        messages: List[Dict[str, str]],
        max_tokens: int = 2000,
        temperature: float = 0.7
    ) -> str:
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —á–∞—Ç–∞ —Å DeepSeek"""
        try:
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                max_tokens=max_tokens,
                temperature=temperature
            )

            if self.use_reasoning and self.is_reasoning_model:
                if hasattr(response.choices[0].message, 'reasoning_content'):
                    reasoning = response.choices[0].message.reasoning_content
                    if reasoning:
                        print(f"[DeepSeek] üí≠ –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:")
                        print(f"      {reasoning[:500]}...")

            return response.choices[0].message.content.strip()

        except Exception as e:
            print(f"[DeepSeek] ‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {e}")
            raise