"""
AI Router - COMPLETE: –í—Å–µ –º–µ—Ç–æ–¥—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DeepSeek –∏ Anthropic Claude —Å reasoning/thinking —Ä–µ–∂–∏–º–∞–º–∏
"""

import os
from typing import List, Dict, Optional
from deepseek import DeepSeekClient
from config import (
    DEEPSEEK_API_KEY, ANTHROPIC_API_KEY,
    DEEPSEEK_MODEL, ANTHROPIC_MODEL,
    DEEPSEEK_REASONING, ANTHROPIC_THINKING,
    STAGE2_PROVIDER, STAGE3_PROVIDER, STAGE4_PROVIDER,
    AI_TEMPERATURE_SELECT, AI_TEMPERATURE_ANALYZE, AI_TEMPERATURE_VALIDATE,
    AI_MAX_TOKENS_SELECT, AI_MAX_TOKENS_ANALYZE, AI_MAX_TOKENS_VALIDATE
)


class AIRouter:
    """
    –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç multi-stage pipeline —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞"""
        self.deepseek_client: Optional[DeepSeekClient] = None
        self.claude_client = None

        self.stage_providers = {
            'stage2': STAGE2_PROVIDER,
            'stage3': STAGE3_PROVIDER,
            'stage4': STAGE4_PROVIDER
        }

        print(f"\n[AI Router] {'='*70}")
        print(f"[AI Router] {'AI ROUTER –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø':^70}")
        print(f"[AI Router] {'='*70}")
        print(f"[AI Router] üéØ Multi-Stage Pipeline:")
        print(f"[AI Router]    ‚Ä¢ Stage 2 (–≤—ã–±–æ—Ä –ø–∞—Ä): {STAGE2_PROVIDER.upper()}")
        print(f"[AI Router]    ‚Ä¢ Stage 3 (–∞–Ω–∞–ª–∏–∑): {STAGE3_PROVIDER.upper()}")
        print(f"[AI Router]    ‚Ä¢ Stage 4 (–≤–∞–ª–∏–¥–∞—Ü–∏—è): {STAGE4_PROVIDER.upper()}")
        print(f"[AI Router] {'='*70}\n")

    async def initialize_deepseek(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç DeepSeek –∫–ª–∏–µ–Ω—Ç"""
        if not DEEPSEEK_API_KEY:
            print(f"[AI Router] ‚ö†Ô∏è  DEEPSEEK_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
            return False

        try:
            self.deepseek_client = DeepSeekClient(
                api_key=DEEPSEEK_API_KEY,
                model=DEEPSEEK_MODEL,
                use_reasoning=DEEPSEEK_REASONING
            )
            print(f"[AI Router] ‚úÖ DeepSeek –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            print(f"[AI Router] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DeepSeek: {e}")
            return False

    async def initialize_claude(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Anthropic Claude –∫–ª–∏–µ–Ω—Ç"""
        if not ANTHROPIC_API_KEY:
            print(f"[AI Router] ‚ö†Ô∏è  ANTHROPIC_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
            return False

        try:
            from anthropic import AsyncAnthropic

            self.claude_client = AsyncAnthropic(api_key=ANTHROPIC_API_KEY)

            print(f"[AI Router] {'='*70}")
            print(f"[AI Router] {'–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø CLAUDE':^70}")
            print(f"[AI Router] {'='*70}")
            print(f"[AI Router] ‚ïë –ú–æ–¥–µ–ª—å: {ANTHROPIC_MODEL:<59} ‚ïë")
            print(f"[AI Router] ‚ïë Extended Thinking: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if ANTHROPIC_THINKING else '‚ùå –í—ã–∫–ª—é—á–µ–Ω':<52} ‚ïë")
            print(f"[AI Router] {'='*70}")

            return True
        except ImportError:
            print(f"[AI Router] ‚ùå Anthropic SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install anthropic")
            return False
        except Exception as e:
            print(f"[AI Router] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Claude: {e}")
            return False

    async def _get_provider_client(self, stage: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ stage"""
        provider = self.stage_providers.get(stage, 'deepseek')

        if provider == 'deepseek':
            if not self.deepseek_client:
                await self.initialize_deepseek()
            return 'deepseek', self.deepseek_client

        elif provider == 'claude':
            if not self.claude_client:
                await self.initialize_claude()
            return 'claude', self.claude_client

        else:
            print(f"[AI Router] ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
            return None, None

    async def select_pairs(
        self,
        pairs_data: List[Dict],
        max_pairs: Optional[int] = None
    ) -> List[str]:
        """Stage 2: –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ –ø–∞—Ä—ã —á–µ—Ä–µ–∑ AI"""
        print(f"\n[AI Router] {'='*70}")
        print(f"[AI Router] üéØ STAGE 2: –í–´–ë–û–† –ü–ê–†")
        print(f"[AI Router] {'='*70}")
        print(f"[AI Router] üìä –ü–∞—Ä –Ω–∞ –≤—Ö–æ–¥–µ: {len(pairs_data)}")
        print(f"[AI Router] üéöÔ∏è  –õ–∏–º–∏—Ç: {max_pairs if max_pairs else '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}")

        provider_name, client = await self._get_provider_client('stage2')

        if not client:
            print(f"[AI Router] ‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è Stage 2")
            return []

        print(f"[AI Router] ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name.upper()}")

        try:
            if provider_name == 'deepseek':
                selected = await self.deepseek_client.select_pairs(
                    pairs_data=pairs_data,
                    max_pairs=max_pairs,
                    temperature=AI_TEMPERATURE_SELECT,
                    max_tokens=AI_MAX_TOKENS_SELECT
                )

            elif provider_name == 'claude':
                selected = await self._claude_select_pairs(
                    pairs_data=pairs_data,
                    max_pairs=max_pairs
                )

            else:
                return []

            print(f"[AI Router] ‚úÖ Stage 2 –∑–∞–≤–µ—Ä—à–µ–Ω: –≤—ã–±—Ä–∞–Ω–æ {len(selected)} –ø–∞—Ä")
            if selected:
                print(f"[AI Router] üìã {', '.join(selected)}")
            print(f"[AI Router] {'='*70}\n")

            return selected

        except Exception as e:
            print(f"[AI Router] ‚ùå –û—à–∏–±–∫–∞ –≤ Stage 2: {e}")
            import traceback
            traceback.print_exc()
            return []

    async def analyze_pair_comprehensive(
        self,
        symbol: str,
        comprehensive_data: Dict
    ) -> Dict:
        """Stage 3: Comprehensive analysis with all data"""
        print(f"\n[AI Router] {'‚îÄ'*70}")
        print(f"[AI Router] üî¨ STAGE 3: COMPREHENSIVE ANALYSIS {symbol}")
        print(f"[AI Router] {'‚îÄ'*70}")

        provider_name, client = await self._get_provider_client('stage3')

        if not client:
            print(f"[AI Router] ‚ùå Client unavailable for Stage 3")
            return {
                'symbol': symbol,
                'signal': 'NO_SIGNAL',
                'confidence': 0,
                'rejection_reason': 'AI client unavailable'
            }

        print(f"[AI Router] ü§ñ Provider: {provider_name.upper()}")

        try:
            if provider_name == 'claude':
                from anthropic_client import AnthropicClient
                claude = AnthropicClient()
                result = await claude.analyze_comprehensive(symbol, comprehensive_data)

                if result:
                    print(f"[AI Router] ‚úÖ Stage 3 complete for {symbol}")
                    return result
                else:
                    return {
                        'symbol': symbol,
                        'signal': 'NO_SIGNAL',
                        'confidence': 0,
                        'rejection_reason': 'Claude analysis returned no result'
                    }

            elif provider_name == 'deepseek':
                return {
                    'symbol': symbol,
                    'signal': 'NO_SIGNAL',
                    'confidence': 0,
                    'rejection_reason': 'DeepSeek –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç comprehensive analysis. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Claude –¥–ª—è Stage 3'
                }

            else:
                return {
                    'symbol': symbol,
                    'signal': 'NO_SIGNAL',
                    'confidence': 0,
                    'rejection_reason': f'Unknown provider: {provider_name}'
                }

        except Exception as e:
            print(f"[AI Router] ‚ùå Error in Stage 3 for {symbol}: {e}")
            import traceback
            traceback.print_exc()
            return {
                'symbol': symbol,
                'signal': 'NO_SIGNAL',
                'confidence': 0,
                'rejection_reason': f'Exception: {str(e)[:100]}'
            }

    async def validate_signal_with_stage3_data(
        self,
        signal: Dict,
        comprehensive_data: Dict
    ) -> Dict:
        """
        Stage 4: Validation with full Stage 3 data
        FIXED: –¢–µ–ø–µ—Ä—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
        """
        symbol = signal.get('symbol', 'UNKNOWN')

        print(f"\n[AI Router] {'‚îÄ'*70}")
        print(f"[AI Router] üîç STAGE 4: VALIDATION {symbol}")
        print(f"[AI Router] {'‚îÄ'*70}")

        provider_name, client = await self._get_provider_client('stage4')

        if not client:
            print(f"[AI Router] ‚ùå Client unavailable for Stage 4 - using fallback")
            from shared_utils import fallback_validation
            return fallback_validation(signal, comprehensive_data)

        print(f"[AI Router] ü§ñ Provider: {provider_name.upper()}")

        try:
            if provider_name == 'claude':
                from anthropic_client import AnthropicClient
                claude = AnthropicClient()
                result = await claude.validate_signal(signal, comprehensive_data)

                if result:
                    print(f"[AI Router] ‚úÖ Stage 4 complete for {symbol}")
                    return result
                else:
                    print(f"[AI Router] ‚ö†Ô∏è Claude returned no validation, using fallback")
                    from shared_utils import fallback_validation
                    return fallback_validation(signal, comprehensive_data)

            elif provider_name == 'deepseek':
                print(f"[AI Router] ‚ö†Ô∏è DeepSeek validation fallback")
                from shared_utils import fallback_validation
                return fallback_validation(signal, comprehensive_data)

            else:
                print(f"[AI Router] ‚ö†Ô∏è Unknown provider, using fallback")
                from shared_utils import fallback_validation
                return fallback_validation(signal, comprehensive_data)

        except Exception as e:
            print(f"[AI Router] ‚ùå Error in Stage 4 for {symbol}: {e}")
            import traceback
            traceback.print_exc()

            from shared_utils import fallback_validation
            return fallback_validation(signal, comprehensive_data)

    # ========================================================================
    # CLAUDE METHODS
    # ========================================================================

    async def _claude_select_pairs(
        self,
        pairs_data: List[Dict],
        max_pairs: Optional[int] = None
    ) -> List[str]:
        """–í—ã–±–æ—Ä –ø–∞—Ä —á–µ—Ä–µ–∑ Claude"""
        pairs_info = []
        for pair in pairs_data:
            info = (
                f"–ü–∞—Ä–∞: {pair['ticker']}\n"
                f"–°–∏–≥–Ω–∞–ª: {pair['signal_type']} ({pair['signal_strength']}%)\n"
                f"–¶–µ–Ω–∞: ${pair['price']:.8f}\n"
                f"–û–±—ä–µ–º 24—á: ${pair.get('volume_24h', 0):,.0f}\n"
            )
            pairs_info.append(info)

        pairs_text = "\n---\n".join(pairs_info)
        limit_text = f"–º–∞–∫—Å–∏–º—É–º {max_pairs} –ø–∞—Ä" if max_pairs else "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"

        prompt = (
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π {len(pairs_data)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏ –≤—ã–±–µ—Ä–∏ {limit_text} "
            f"—Å –ª—É—á—à–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º:\n\n{pairs_text}\n\n"
            f"–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."
        )

        kwargs = {
            'model': ANTHROPIC_MODEL,
            'max_tokens': AI_MAX_TOKENS_SELECT,
            'temperature': AI_TEMPERATURE_SELECT,
            'messages': [{'role': 'user', 'content': prompt}]
        }

        if ANTHROPIC_THINKING:
            kwargs['thinking'] = {'type': 'enabled', 'budget_tokens': 2000}

        response = await self.claude_client.messages.create(**kwargs)

        if ANTHROPIC_THINKING and hasattr(response, 'thinking'):
            print(f"[Claude] üí≠ Extended Thinking (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(f"     {str(response.thinking)[:500]}...")

        content = response.content[0].text.strip()

        selected = []
        for line in content.split('\n'):
            tokens = line.replace(',', ' ').split()
            for token in tokens:
                token = token.strip().upper()
                if 2 <= len(token) <= 10:
                    clean = token.replace('USDT', '').replace('USD', '')
                    if clean and clean.isalnum() and clean not in selected:
                        selected.append(clean)

        if max_pairs and len(selected) > max_pairs:
            selected = selected[:max_pairs]

        return selected

    # ========================================================================
    # UTILITY METHODS
    # ========================================================================

    def get_config(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        return {
            'stage_providers': self.stage_providers,
            'deepseek_model': DEEPSEEK_MODEL,
            'deepseek_reasoning': DEEPSEEK_REASONING,
            'claude_model': ANTHROPIC_MODEL,
            'claude_thinking': ANTHROPIC_THINKING,
            'deepseek_initialized': self.deepseek_client is not None,
            'claude_initialized': self.claude_client is not None
        }