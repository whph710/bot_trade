"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π result_formatter.py - –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º
"""

from typing import Dict, Any, List


def format_bot_result(result: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Telegram"""

    bot_result = result.get('result', 'UNKNOWN')
    total_time = result.get('total_time', 0)
    stats = result.get('stats', {})

    emoji_map = {
        'SUCCESS': '‚úÖ',
        'NO_VALIDATED_SIGNALS': '‚ö†Ô∏è',
        'NO_SIGNAL_PAIRS': '‚ùå',
        'NO_AI_SELECTION': '‚ùå',
        'NO_ANALYSIS_SIGNALS': '‚ùå',
        'VALIDATION_SKIPPED': '‚è±Ô∏è',
        'ERROR': 'üí•'
    }

    emoji = emoji_map.get(bot_result, '‚ùì')

    result_text = (
        f"<b>{emoji} –†–ï–ó–£–õ–¨–¢–ê–¢: {bot_result}</b>\n\n"
        f"‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {total_time:.1f}s\n\n"
    )

    result_text += "<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
    result_text += f"  ‚Ä¢ –ü–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('pairs_scanned', 0)}\n"
    result_text += f"  ‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {stats.get('signal_pairs_found', 0)}\n"
    result_text += f"  ‚Ä¢ AI –æ—Ç–æ–±—Ä–∞–ª: {stats.get('ai_selected', 0)}\n"
    result_text += f"  ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('analyzed', 0)}\n"
    result_text += f"  ‚Ä¢ ‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats.get('validated_signals', 0)}\n"
    result_text += f"  ‚Ä¢ ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats.get('rejected_signals', 0)}\n"

    if stats.get('processing_speed'):
        result_text += f"  ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {stats.get('processing_speed', 0):.1f} –ø–∞—Ä/—Å–µ–∫\n"

    if result.get('validation_skipped_reason'):
        result_text += f"\n‚è∞ <b>–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞:</b>\n{result['validation_skipped_reason']}"

    if result.get('error'):
        result_text += f"\n‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{result['error']}"

    return result_text


def format_signal_individual(signal: Dict[str, Any], index: int = 1, total: int = 1) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞

    Args:
        signal: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞
        index: –ù–æ–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞
        total: –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞
    """
    symbol = signal.get('symbol', 'N/A')
    signal_type = signal.get('signal', 'N/A')
    confidence = signal.get('confidence', 0)
    entry = signal.get('entry_price', 0)
    stop = signal.get('stop_loss', 0)
    tp_levels = signal.get('take_profit_levels', [0, 0, 0])
    rr = signal.get('risk_reward_ratio', 0)
    hold = signal.get('hold_duration_minutes', 0)
    analysis = signal.get('analysis', '')
    market_cond = signal.get('market_conditions', '')
    validation_notes = signal.get('validation_notes', '')

    # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–Ω—ã–º —ç–º–æ–¥–∑–∏
    dir_emoji = 'üü¢' if signal_type.upper() == 'LONG' else 'üî¥'

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–∏–∫–µ—Ä–∞
    message = f"{dir_emoji} <b>{symbol}</b> | {signal_type}\n"
    message += f"{'‚îÅ' * 40}\n\n"

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    message += f"<b>üìä –ü–ê–†–ê–ú–ï–¢–†–´:</b>\n"
    message += f"  ‚Ä¢ Confidence: <b>{confidence}%</b>\n"
    message += f"  ‚Ä¢ Risk/Reward: <b>1:{rr:.2f}</b>\n"
    message += f"  ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{hold} –º–∏–Ω</b>\n\n"

    # –£—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
    message += f"<b>üí∞ –£–†–û–í–ù–ò –í–•–û–î–ê/–í–´–•–û–î–ê:</b>\n"
    message += f"  ‚Ä¢ Entry:  <code>${entry:.4f}</code>\n"
    message += f"  ‚Ä¢ Stop:   <code>${stop:.4f}</code>\n"
    message += f"  ‚Ä¢ TP1:    <code>${tp_levels[0]:.4f}</code>\n"
    message += f"  ‚Ä¢ TP2:    <code>${tp_levels[1]:.4f}</code>\n"
    message += f"  ‚Ä¢ TP3:    <code>${tp_levels[2]:.4f}</code>\n\n"

    # –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if market_cond:
        message += f"<b>üìà –†–´–ù–û–ö:</b>\n"
        message += f"  {market_cond}\n\n"

    # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ (–≥–ª–∞–≤–Ω–∞—è —á–∞—Å—Ç—å)
    if analysis:
        message += f"<b>üìù –ê–ù–ê–õ–ò–ó:</b>\n"
        message += f"<i>{analysis}</i>\n\n"

    # –ó–∞–º–µ—Ç–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if validation_notes:
        message += f"<b>‚úì –í–ê–õ–ò–î–ê–¶–ò–Ø:</b>\n"
        message += f"  {validation_notes}\n"

    return message


async def send_individual_signals_to_group(bot, chat_id: int, signals: List[Dict[str, Any]]) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∂–¥—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ—Å—Ç–æ–º –≤ –≥—Ä—É–ø–ø—É

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Bot
        chat_id: ID —á–∞—Ç–∞
        signals: –°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    """
    if not signals:
        return 0

    sent_count = 0
    total_signals = len(signals)

    for index, signal in enumerate(signals, 1):
        try:
            formatted_signal = format_signal_individual(signal, index, total_signals)

            await bot.send_message(
                chat_id=chat_id,
                text=formatted_signal,
                parse_mode="HTML"
            )

            sent_count += 1
            print(f"‚úÖ Sent signal {index}/{total_signals} to group")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ (—á—Ç–æ–±—ã Telegram –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª)
            import asyncio
            await asyncio.sleep(0.5)

        except Exception as e:
            print(f"‚ùå Error sending signal {index}/{total_signals}: {e}")
            continue

    return sent_count


async def send_group_message_safe(bot, chat_id: int, text: str, max_length: int = 4096) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Bot
        chat_id: ID —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram

    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        if len(text) <= max_length:
            await bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode="HTML"
            )
            return True
        else:
            # –†–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ max_length
            parts = [text[i:i+max_length] for i in range(0, len(text), max_length)]
            for part in parts:
                await bot.send_message(
                    chat_id=chat_id,
                    text=part,
                    parse_mode="HTML"
                )
            return True
    except Exception as e:
        print(f"‚ùå Error sending message: {e}")
        return False