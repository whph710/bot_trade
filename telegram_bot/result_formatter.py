"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π result_formatter.py - –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
AI —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–Ω–µ—Å–µ–Ω–æ –≤ ai_formatter.py
"""

from typing import Dict, Any


def format_bot_result(result: Dict[str, Any], run_stats: Dict[str, int] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Telegram

    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        run_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—É—Å–∫–æ–≤ (total_runs, today_runs)
    """

    bot_result = result.get('result', 'UNKNOWN')
    total_time = result.get('total_time', 0)
    stats = result.get('stats', {})

    emoji_map = {
        'SUCCESS': '‚úÖ',
        'NO_VALIDATED_SIGNALS': '‚ö†Ô∏è',
        'NO_SIGNAL_PAIRS': '‚ùå',
        'NO_AI_SELECTION': '‚ùå',
        'NO_ANALYSIS_SIGNALS': '‚ùå',
        'VALIDATION_SKIPPED': '‚è±Ô∏è',
        'ERROR': 'üí•'
    }

    emoji = emoji_map.get(bot_result, '‚ùì')

    result_text = (
        f"<b>{emoji} –†–ï–ó–£–õ–¨–¢–ê–¢: {bot_result}</b>\n\n"
        f"‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {total_time:.1f}s\n\n"
    )

    result_text += "<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê:</b>\n"
    result_text += f"  ‚Ä¢ –ü–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('pairs_scanned', 0)}\n"
    result_text += f"  ‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {stats.get('signal_pairs_found', 0)}\n"
    result_text += f"  ‚Ä¢ AI –æ—Ç–æ–±—Ä–∞–ª: {stats.get('ai_selected', 0)}\n"
    result_text += f"  ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('analyzed', 0)}\n"
    result_text += f"  ‚Ä¢ ‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats.get('validated_signals', 0)}\n"
    result_text += f"  ‚Ä¢ ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats.get('rejected_signals', 0)}\n"

    if stats.get('processing_speed'):
        result_text += f"  ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {stats.get('processing_speed', 0):.1f} –ø–∞—Ä/—Å–µ–∫\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—É—Å–∫–æ–≤ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞
    if run_stats:
        result_text += f"\n<b>üî¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ü–£–°–ö–û–í:</b>\n"
        result_text += f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {run_stats.get('total_runs', 0)}\n"
        result_text += f"  ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {run_stats.get('today_runs', 0)}\n"

    if result.get('validation_skipped_reason'):
        result_text += f"\n‚è∞ <b>–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞:</b>\n{result['validation_skipped_reason']}"

    if result.get('error'):
        result_text += f"\n‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{result['error']}"

    return result_text


async def send_formatted_signals_to_group(bot, chat_id: int, formatted_signals: list[str]) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ –≥—Ä—É–ø–ø—É

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Bot
        chat_id: ID —á–∞—Ç–∞
        formatted_signals: –°–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö HTML-—Ç–µ–∫—Å—Ç–æ–≤

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    """
    if not formatted_signals:
        return 0

    sent_count = 0
    total_signals = len(formatted_signals)

    for index, formatted_text in enumerate(formatted_signals, 1):
        try:
            await bot.send_message(
                chat_id=chat_id,
                text=formatted_text,
                parse_mode="HTML"
            )

            sent_count += 1
            print(f"‚úÖ Sent signal {index}/{total_signals} to group")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
            import asyncio
            await asyncio.sleep(0.5)

        except Exception as e:
            print(f"‚ùå Error sending signal {index}/{total_signals}: {e}")
            continue

    return sent_count


async def send_group_message_safe(bot, chat_id: int, text: str, max_length: int = 4096) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    """
    try:
        if len(text) <= max_length:
            await bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode="HTML"
            )
            return True
        else:
            # –†–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ max_length
            parts = [text[i:i+max_length] for i in range(0, len(text), max_length)]
            for part in parts:
                await bot.send_message(
                    chat_id=chat_id,
                    text=part,
                    parse_mode="HTML"
                )
            return True
    except Exception as e:
        print(f"‚ùå Error sending message: {e}")
        return False