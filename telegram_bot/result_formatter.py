"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è Telegram
–§–∞–π–ª: bot_trade/telegram_bot/result_formatter.py
"""

from typing import Dict, Any


def format_bot_result(result: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Telegram"""

    bot_result = result.get('result', 'UNKNOWN')
    total_time = result.get('total_time', 0)
    stats = result.get('stats', {})

    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º–æ–¥–∑–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    emoji_map = {
        'SUCCESS': '‚úÖ',
        'NO_VALIDATED_SIGNALS': '‚ö†Ô∏è',
        'NO_SIGNAL_PAIRS': '‚ùå',
        'NO_AI_SELECTION': '‚ùå',
        'NO_ANALYSIS_SIGNALS': '‚ùå',
        'VALIDATION_SKIPPED': '‚è±Ô∏è',
        'ERROR': 'üí•'
    }

    emoji = emoji_map.get(bot_result, '‚ùì')

    result_text = (
        f"<b>{emoji} –†–ï–ó–£–õ–¨–¢–ê–¢: {bot_result}</b>\n\n"
        f"‚è±Ô∏è <b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {total_time:.1f}s\n\n"
    )

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    result_text += "<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
    result_text += f"  ‚Ä¢ –ü–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('pairs_scanned', 0)}\n"
    result_text += f"  ‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {stats.get('signal_pairs_found', 0)}\n"
    result_text += f"  ‚Ä¢ AI –æ—Ç–æ–±—Ä–∞–ª: {stats.get('ai_selected', 0)}\n"
    result_text += f"  ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('analyzed', 0)}\n"
    result_text += f"  ‚Ä¢ ‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats.get('validated_signals', 0)}\n"
    result_text += f"  ‚Ä¢ ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats.get('rejected_signals', 0)}\n"

    if stats.get('processing_speed'):
        result_text += f"  ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {stats.get('processing_speed', 0):.1f} –ø–∞—Ä/—Å–µ–∫\n"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if result.get('validation_skipped_reason'):
        result_text += f"\n‚è∞ <b>–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞:</b>\n{result['validation_skipped_reason']}"

    if result.get('error'):
        result_text += f"\n‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{result['error']}"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    vstats = result.get('validation_stats', {})
    if vstats.get('total', 0) > 0:
        result_text += f"\n\n<b>üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò:</b>\n"
        result_text += f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {vstats.get('approval_rate', 0):.1f}%\n"
        result_text += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π R/R: 1:{vstats.get('avg_risk_reward', 0):.2f}\n"

        rr_stats = vstats.get('rr_stats', {})
        if rr_stats.get('samples_counted', 0) > 0:
            result_text += f"  ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω R/R: 1:{rr_stats.get('min_rr', 0):.2f} - 1:{rr_stats.get('max_rr', 0):.2f}\n"

    return result_text


def format_signal_for_group(signal: Dict[str, Any], index: int = 1) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è –≥—Ä—É–ø–ø—ã"""

    symbol = signal.get('symbol', 'UNKNOWN')
    signal_type = signal.get('signal', 'UNKNOWN')
    confidence = signal.get('confidence', 0)
    entry = signal.get('entry_price', 0)
    stop = signal.get('stop_loss', 0)
    tp_levels = signal.get('take_profit_levels', [0, 0, 0])
    rr_ratio = signal.get('risk_reward_ratio', 0)
    hold_time = signal.get('hold_duration_minutes', 0)
    notes = signal.get('validation_notes', '')

    emoji = 'üî¥' if signal_type == 'SHORT' else 'üü¢'

    text = (
        f"{emoji} <b>#{index}. {symbol} {signal_type}</b>\n"
        f"üìä Confidence: <b>{confidence}%</b>\n"
        f"üí∞ Entry: <code>${entry:.2f}</code>\n"
        f"üõë Stop: <code>${stop:.2f}</code>\n"
        f"üéØ TP1: <code>${tp_levels[0]:.2f}</code>\n"
        f"üéØ TP2: <code>${tp_levels[1]:.2f}</code>\n"
        f"üéØ TP3: <code>${tp_levels[2]:.2f}</code>\n"
        f"üìà R/R: <b>1:{rr_ratio:.2f}</b>\n"
        f"‚è±Ô∏è Hold: <b>{hold_time}min</b>\n"
    )

    if notes:
        text += f"üìù <i>{notes[:100]}</i>\n"

    return text