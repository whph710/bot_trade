# telegram_bot_main.py - UPDATED with signal_formatter
import asyncio
import logging
from datetime import datetime
from typing import Dict, Any
import pytz
from pathlib import Path
import sys

sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.enums import ChatAction

from telegram_bot.config_tg import TG_TOKEN, TG_CHAT_ID, TG_USER_ID
from telegram_bot.schedule_manager import ScheduleManager
from telegram_bot.result_formatter import (
    format_bot_result,
    send_formatted_signals_to_group,
    send_group_message_safe
)
# –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø: –ó–∞–º–µ–Ω—ë–Ω AI formatter –Ω–∞ template formatter
from trade_bot_programm.signal_formatter import format_multiple_signals
from telegram_bot.stats_manager import StatsManager

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)-8s] %(name)s - %(message)s'
)
logger = logging.getLogger(__name__)


class TradingBotTelegram:
    def __init__(self):
        self.bot = Bot(token=TG_TOKEN)
        self.dp = Dispatcher()
        self.schedule_manager = ScheduleManager()
        # –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø: –£–±—Ä–∞–Ω self.ai_formatter
        self.stats_manager = StatsManager()
        self.trading_bot_running = False
        self._typing_task = None

        self.dp.message.register(self.start_command, Command(commands=["start"]))
        self.dp.message.register(self.handle_message, F.text & ~F.command)

    async def _start_typing_indicator(self, chat_id: int):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ (typing...)"""

        async def send_typing():
            try:
                while True:
                    await self.bot.send_chat_action(
                        chat_id=chat_id,
                        action=ChatAction.TYPING
                    )
                    await asyncio.sleep(4)
            except asyncio.CancelledError:
                pass
            except Exception as e:
                logger.error(f"Error in typing indicator: {e}")

        self._typing_task = asyncio.create_task(send_typing())

    async def _stop_typing_indicator(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏"""
        if self._typing_task:
            self._typing_task.cancel()
            try:
                await self._typing_task
            except asyncio.CancelledError:
                pass
            self._typing_task = None

    async def start_command(self, message: Message):
        user_id = message.from_user.id
        if user_id != TG_USER_ID:
            await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å")],
                [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")]
            ],
            resize_keyboard=True
        )

        await message.answer(
            "ü§ñ Trading Bot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:\n"
            "üü¢ 10:05-11:05 (UTC+5)\n"
            "üü¢ 16:05-17:05 (UTC+5)\n"
            "üü¢ 22:05-23:05 (UTC+5)\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞",
            reply_markup=keyboard
        )

    async def handle_message(self, message: Message):
        user_id = message.from_user.id
        if user_id != TG_USER_ID:
            return

        text = message.text

        if text == "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å":
            await self.run_trading_bot_manual(message)
        elif text == "üìä –°—Ç–∞—Ç—É—Å":
            await self.show_status(message)
        elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self.show_statistics(message)
        elif text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å":
            await self.stop_bot(message)

    async def run_trading_bot_manual(self, message: Message):
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            run_stats = self.stats_manager.increment_run()

            await self.bot.send_message(
                chat_id=TG_USER_ID,
                text="‚è≥ <b>–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...</b>",
                parse_mode="HTML"
            )

            await self._start_typing_indicator(TG_USER_ID)

            try:
                from main import run_trading_bot_cycle
                result = await run_trading_bot_cycle()
            finally:
                await self._stop_typing_indicator()

            formatted_result = format_bot_result(result, run_stats)

            await self.bot.send_message(
                chat_id=TG_USER_ID,
                text=f"üìà <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n{formatted_result}",
                parse_mode="HTML"
            )

            if result.get('validated_signals'):
                await self._post_signals_to_group(result)
            else:
                logger.info("‚ÑπÔ∏è No validated signals to post")

        except Exception as e:
            await self._stop_typing_indicator()
            logger.exception("Error running trading bot manually")
            await self.bot.send_message(
                chat_id=TG_USER_ID,
                text=f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}",
                parse_mode="HTML"
            )

    async def _post_signals_to_group(self, result: Dict[str, Any]) -> None:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —á–µ—Ä–µ–∑ template –∏ –ø–æ—Å—Ç–∏–º –≤ –≥—Ä—É–ø–ø—É
        –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç signal_formatter –≤–º–µ—Å—Ç–æ AI
        """
        try:
            validated_signals = result.get('validated_signals', [])

            if not validated_signals:
                logger.info("No validated signals to post")
                return

            await self.bot.send_message(
                chat_id=TG_USER_ID,
                text=f"üìù <b>–§–æ—Ä–º–∞—Ç–∏—Ä—É—é {len(validated_signals)} —Å–∏–≥–Ω–∞–ª(–æ–≤)...</b>",
                parse_mode="HTML"
            )

            await self._start_typing_indicator(TG_CHAT_ID)

            try:
                # –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º template formatter (–ë–ï–ó AI)
                logger.info(f"Formatting {len(validated_signals)} signals via template...")
                formatted_signals = format_multiple_signals(validated_signals)
            finally:
                await self._stop_typing_indicator()

            if not formatted_signals:
                logger.warning("Template formatting failed, no signals to post")
                await self.bot.send_message(
                    chat_id=TG_USER_ID,
                    text="‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤</b>",
                    parse_mode="HTML"
                )
                return

            sent_count = await send_formatted_signals_to_group(
                self.bot,
                TG_CHAT_ID,
                formatted_signals
            )

            await self.bot.send_message(
                chat_id=TG_USER_ID,
                text=f"‚úÖ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {sent_count}/{len(formatted_signals)} —Å–∏–≥–Ω–∞–ª(–æ–≤) –≤ –≥—Ä—É–ø–ø—É</b>",
                parse_mode="HTML"
            )

            logger.info(f"‚úÖ Posted {sent_count}/{len(formatted_signals)} signal(s) to group {TG_CHAT_ID}")

        except Exception as e:
            await self._stop_typing_indicator()
            logger.exception(f"Error posting signals to group: {e}")

            await self.bot.send_message(
                chat_id=TG_USER_ID,
                text=f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {str(e)[:100]}",
                parse_mode="HTML"
            )

    async def show_status(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        perm_tz = pytz.timezone('Asia/Yekaterinburg')
        perm_time = datetime.now(perm_tz)

        next_run = self.schedule_manager.get_next_run_time()

        status_text = (
            "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n"
            f"‚è∞ –í—Ä–µ–º—è (–ü–µ—Ä–º—å UTC+5): {perm_time.strftime('%H:%M:%S')}\n"
            f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run.strftime('%Y-%m-%d %H:%M')}\n"
            f"üü¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –∞–∫—Ç–∏–≤–µ–Ω\n"
            f"üìç –ì—Ä—É–ø–ø–∞: {TG_CHAT_ID}\n"
        )

        await self.bot.send_message(
            chat_id=TG_USER_ID,
            text=status_text,
            parse_mode="HTML"
        )

    async def show_statistics(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—É—Å–∫–æ–≤"""
        stats_text = self.stats_manager.get_stats_text()

        await self.bot.send_message(
            chat_id=TG_USER_ID,
            text=stats_text,
            parse_mode="HTML"
        )

    async def stop_bot(self, message: Message):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        await self.bot.send_message(
            chat_id=TG_USER_ID,
            text="üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b> –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            parse_mode="HTML"
        )

    async def schedule_callback(self, bot: Bot):
        """Callback –¥–ª—è –ø–ª–∞–Ω–æ–≤—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤"""
        try:
            logger.info("ü§ñ Scheduled trading bot cycle started")

            run_stats = self.stats_manager.increment_run()

            await bot.send_message(
                chat_id=TG_USER_ID,
                text="‚è∞ <b>–ü–ª–∞–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...</b>",
                parse_mode="HTML"
            )

            await self._start_typing_indicator(TG_USER_ID)

            try:
                from main import run_trading_bot_cycle
                result = await run_trading_bot_cycle()
            finally:
                await self._stop_typing_indicator()

            formatted_result = format_bot_result(result, run_stats)

            await bot.send_message(
                chat_id=TG_USER_ID,
                text=f"üìà <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n{formatted_result}",
                parse_mode="HTML"
            )

            if result.get('validated_signals'):
                await self._post_signals_to_group(result)
            else:
                logger.info("‚ÑπÔ∏è No validated signals in this cycle")

        except Exception as e:
            await self._stop_typing_indicator()
            logger.exception("Error in scheduled cycle")

            try:
                await bot.send_message(
                    chat_id=TG_USER_ID,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)[:100]}"
                )
            except Exception as send_error:
                logger.exception(f"Failed to send error message: {send_error}")

    async def start(self):
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.stats_manager.cleanup_old_daily_stats(days_to_keep=30)

        self.schedule_manager.setup_schedule(self.bot, self.schedule_callback)
        logger.info("‚úÖ Telegram bot setup complete")

        try:
            await self.dp.start_polling(self.bot, allowed_updates=["message"])
        finally:
            await self._stop_typing_indicator()
            await self.bot.session.close()


async def run_telegram_bot():
    bot = TradingBotTelegram()
    await bot.start()