"""
AI —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç DeepSeek –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
FIXED: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç config
–§–∞–π–ª: telegram_bot/ai_formatter.py
"""

import asyncio
import json
import os
import sys
from pathlib import Path
from typing import Dict, Any
from openai import AsyncOpenAI

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent))

from logging_config import setup_module_logger

logger = setup_module_logger(__name__)

_prompt_cache = None


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
def load_env():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª"""
    env_path = Path(__file__).parent.parent / '.env'
    if env_path.exists():
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
load_env()


def load_formatter_prompt() -> str:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global _prompt_cache

    if _prompt_cache:
        return _prompt_cache

    # –ò—â–µ–º –ø—Ä–æ–º–ø—Ç –≤ –ø–∞–ø–∫–µ prompts
    prompt_path = Path(__file__).parent / 'prompts' / 'signal_formatter_prompt.txt'

    if not prompt_path.exists():
        logger.error(f"Prompt file not found: {prompt_path}")
        raise FileNotFoundError(f"Signal formatter prompt not found at {prompt_path}")

    try:
        with open(prompt_path, 'r', encoding='utf-8') as f:
            content = f.read().strip()
            if not content:
                raise ValueError(f"Prompt file is empty: {prompt_path}")
            _prompt_cache = content
            logger.info(f"Formatter prompt loaded: {len(content)} chars")
            return content
    except Exception as e:
        logger.error(f"Error loading formatter prompt: {e}")
        raise


class AISignalFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã —á–µ—Ä–µ–∑ DeepSeek AI"""

    def __init__(self):
        self.api_key = os.getenv('DEEPSEEK_API_KEY')
        self.model = os.getenv('FORMATTER_MODEL', 'deepseek-chat')
        self.base_url = os.getenv('DEEPSEEK_URL', 'https://api.deepseek.com')
        self.temperature = float(os.getenv('FORMATTER_TEMPERATURE', '0.3'))
        self.max_tokens = int(os.getenv('FORMATTER_MAX_TOKENS', '2000'))

        logger.info(f"[Formatter] ‚ïî{'‚ïê'*60}‚ïó")
        logger.info(f"[Formatter] ‚ïë {'AI FORMATTER –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø':^60} ‚ïë")
        logger.info(f"[Formatter] ‚ï†{'‚ïê'*60}‚ï£")
        logger.info(f"[Formatter] ‚ïë –ü—Ä–æ–≤–∞–π–¥–µ—Ä: DeepSeek{'':<44} ‚ïë")
        logger.info(f"[Formatter] ‚ïë –ú–æ–¥–µ–ª—å: {self.model:<49} ‚ïë")
        logger.info(f"[Formatter] ‚ïë Temperature: {self.temperature:<46} ‚ïë")
        logger.info(f"[Formatter] ‚ïë Max tokens: {self.max_tokens:<47} ‚ïë")
        logger.info(f"[Formatter] ‚ïö{'‚ïê'*60}‚ïù")

    async def format_signal(self, signal_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ DeepSeek AI

        Args:
            signal_data: JSON –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞

        Returns:
            HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
        """
        try:
            if not self.api_key:
                logger.error("DeepSeek API key not configured")
                raise ValueError("DeepSeek API key not found")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt_template = load_formatter_prompt()

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ JSON
            signal_json = json.dumps(signal_data, ensure_ascii=False, indent=2)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            full_prompt = f"{prompt_template}\n\nSignal Data:\n{signal_json}"

            logger.debug(f"[Formatter] Formatting signal {signal_data.get('symbol', 'UNKNOWN')} via DeepSeek")

            # –í—ã–∑–æ–≤ DeepSeek API
            client = AsyncOpenAI(
                api_key=self.api_key,
                base_url=self.base_url
            )

            response = await asyncio.wait_for(
                client.chat.completions.create(
                    model=self.model,
                    messages=[{"role": "user", "content": full_prompt}],
                    max_tokens=self.max_tokens,
                    temperature=self.temperature
                ),
                timeout=30
            )

            formatted_text = response.choices[0].message.content.strip()

            logger.info(
                f"[Formatter] ‚úÖ Signal {signal_data.get('symbol', 'UNKNOWN')} formatted successfully ({len(formatted_text)} chars)")

            return formatted_text

        except asyncio.TimeoutError:
            logger.error("[Formatter] ‚ùå AI formatting timeout (30s)")
            raise
        except Exception as e:
            logger.error(f"[Formatter] ‚ùå AI formatting error: {e}")
            raise

    async def format_multiple_signals(self, signals: list[Dict[str, Any]]) -> list[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ DeepSeek

        Args:
            signals: –°–ø–∏—Å–æ–∫ JSON –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        """
        if not signals:
            return []

        try:
            logger.info(f"[Formatter] {'='*60}")
            logger.info(f"[Formatter] üìù FORMATTING {len(signals)} SIGNAL(S) VIA DEEPSEEK")
            logger.info(f"[Formatter] {'='*60}")

            tasks = [self.format_signal(signal) for signal in signals]
            results = await asyncio.gather(*tasks, return_exceptions=True)

            formatted_signals = []
            for idx, result in enumerate(results):
                if isinstance(result, Exception):
                    logger.error(f"[Formatter] ‚ùå Failed to format signal {idx}: {result}")
                    continue
                formatted_signals.append(result)

            logger.info(f"[Formatter] ‚úÖ Formatted {len(formatted_signals)}/{len(signals)} signals successfully")
            logger.info(f"[Formatter] {'='*60}")
            return formatted_signals

        except Exception as e:
            logger.error(f"[Formatter] ‚ùå Error in batch formatting: {e}")
            return []