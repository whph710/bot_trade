import aiohttp
import logging
import asyncio
from typing import List, Dict, Any

logger = logging.getLogger(__name__)


async def get_klines_async(symbol: str, interval: str = "5", limit: int = 200) -> List[List[str]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã.
    –ò–ó–ú–ï–ù–ï–ù–û: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω—Ç–µ—Ä–≤–∞–ª "5" (5 –º–∏–Ω—É—Ç) –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
        interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "5" –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞)
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 200)

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Bybit [timestamp, open, high, low, close, volume, turnover]
    """
    url = "https://api.bybit.com/v5/market/kline"
    params = {
        "category": "linear",
        "symbol": symbol,
        "interval": interval,
        "limit": limit
    }

    try:
        timeout = aiohttp.ClientTimeout(total=15)  # –£–º–µ–Ω—å—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url, params=params) as response:
                data = await response.json()

                if data.get("retCode") != 0:
                    error_msg = data.get('retMsg', 'Unknown API error')
                    logger.error(f"API –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {error_msg}")
                    raise Exception(f"Bybit API Error for {symbol}: {error_msg}")

                klines = data["result"]["list"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
                if klines and len(klines) > 1:
                    if int(klines[0][0]) > int(klines[-1][0]):
                        klines.reverse()

                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(klines)} 5M —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                return klines[:-1]  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é —Å–≤–µ—á—É

    except aiohttp.ClientError as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
        raise Exception(f"Network error for {symbol}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è 5M –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        raise


async def get_usdt_trading_pairs() -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö USDT —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä.
    –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã—Å–æ–∫–æ–ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    """
    url = "https://api.bybit.com/v5/market/instruments-info"
    params = {"category": "linear"}

    try:
        timeout = aiohttp.ClientTimeout(total=12)  # –ë—ã—Å—Ç—Ä–µ–µ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url, params=params) as response:
                data = await response.json()

                if data.get("retCode") != 0:
                    error_msg = data.get('retMsg', 'Unknown API error')
                    raise Exception(f"Bybit API Error: {error_msg}")

                # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ USDT –ø–∞—Ä—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
                symbols = []
                for item in data["result"]["list"]:
                    symbol = item["symbol"]
                    status = item["status"]

                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ
                    if (symbol.endswith('USDT') and
                            status == 'Trading' and
                            not symbol.startswith('USDT') and  # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã
                            "-" not in symbol and  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞—Ä—ã —Å –¥–µ—Ñ–∏—Å–æ–º
                            not any(char.isdigit() for char in symbol) and  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞—Ä—ã —Å —Ü–∏—Ñ—Ä–∞–º–∏
                            len(symbol) <= 10):  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                        symbols.append(symbol)

                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(symbols)} –∞–∫—Ç–∏–≤–Ω—ã—Ö USDT –ø–∞—Ä –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞")
                return symbols

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        raise


async def get_market_summary_async(symbol: str) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Ä—ã–Ω–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    url = "https://api.bybit.com/v5/market/tickers"
    params = {
        "category": "linear",
        "symbol": symbol
    }

    try:
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url, params=params) as response:
                data = await response.json()

                if data.get("retCode") != 0 or not data.get("result", {}).get("list"):
                    return {}

                ticker = data["result"]["list"][0]

                return {
                    'symbol': symbol,
                    'last_price': float(ticker.get('lastPrice', 0)),
                    'volume_24h': float(ticker.get('volume24h', 0)),
                    'turnover_24h': float(ticker.get('turnover24h', 0)),
                    'price_change_24h': float(ticker.get('price24hPcnt', 0)) * 100,  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                    'high_24h': float(ticker.get('highPrice24h', 0)),
                    'low_24h': float(ticker.get('lowPrice24h', 0)),
                }

    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –¥–ª—è {symbol}: {e}")
        return {}


async def filter_high_volume_pairs(pairs: List[str], min_volume_usdt: float = 50_000_000) -> List[str]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–∞—Ä—ã –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ–ª–∏–∫–≤–∏–¥–Ω—ã–µ –ø–∞—Ä—ã

    Args:
        pairs: –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        min_volume_usdt: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ USDT –∑–∞ 24—á (50M –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

    Returns:
        –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã—Å–æ–∫–æ–ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä
    """
    logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è {len(pairs)} –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É (–º–∏–Ω. ${min_volume_usdt:,.0f})")

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –±–∞—Ç—á–∞–º–∏
    batch_size = 20
    filtered_pairs = []

    for i in range(0, len(pairs), batch_size):
        batch = pairs[i:i + batch_size]

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –±–∞—Ç—á–∞
        tasks = [get_market_summary_async(pair) for pair in batch]

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        summaries = await asyncio.gather(*tasks, return_exceptions=True)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
        for summary in summaries:
            if isinstance(summary, dict) and summary:
                turnover = summary.get('turnover_24h', 0)
                if turnover >= min_volume_usdt:
                    filtered_pairs.append(summary['symbol'])

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
        if i + batch_size < len(pairs):
            await asyncio.sleep(0.1)

    logger.info(f"‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ {len(filtered_pairs)} –≤—ã—Å–æ–∫–æ–ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä")
    return filtered_pairs


# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è asyncio
