"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –Ω–æ –º–æ—â–Ω—ã–π —Å–∫–∞–ª—å–ø–∏–Ω–≥-–±–æ—Ç
–§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
"""

import asyncio
import logging
import time
from typing import List, Dict, Any
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
from config import config
from exchange import get_candles, get_usdt_pairs, cleanup as cleanup_exchange
from indicators import generate_trading_signal, calculate_all_indicators
from ai_client import select_best_pairs, analyze_pair_detailed, cleanup_ai, check_ai_health

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, config.system.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(config.system.LOG_FILE, encoding=config.system.ENCODING),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


@dataclass
class TradingSignal:
    """–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    pair: str
    signal: str  # LONG/SHORT/NO_SIGNAL
    confidence: int
    pattern: str
    volume_ratio: float
    trend_strength: float
    candles_5m: List = None
    candles_15m: List = None
    indicators: Dict = None


class SimplifiedScalpingBot:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫–∞–ª—å–ø–∏–Ω–≥-–±–æ—Ç"""

    def __init__(self):
        self.start_time = time.time()
        logger.info("üöÄ Simplified Scalping Bot Started")

    async def scan_pair(self, pair: str) -> TradingSignal:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –ø–∞—Ä—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–±–æ–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            candles_5m = await get_candles(
                pair,
                config.trading.ENTRY_TF,
                config.trading.CANDLES_ENTRY
            )
            candles_15m = await get_candles(
                pair,
                config.trading.HIGHER_TF,
                config.trading.CANDLES_HIGHER
            )

            if not candles_5m or not candles_15m:
                logger.debug(f"No data for {pair}")
                return None

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            signal_data = generate_trading_signal(candles_5m, candles_15m)

            if signal_data['signal'] == 'NO_SIGNAL':
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = calculate_all_indicators(candles_5m)

            return TradingSignal(
                pair=pair,
                signal=signal_data['signal'],
                confidence=signal_data['confidence'],
                pattern=signal_data.get('pattern', 'UNKNOWN'),
                volume_ratio=indicators.get('volume_ratio', 1.0),
                trend_strength=indicators.get('trend', {}).get('strength', 0),
                candles_5m=candles_5m,
                candles_15m=candles_15m,
                indicators=indicators
            )

        except Exception as e:
            logger.error(f"Error scanning {pair}: {e}")
            return None

    async def mass_scan(self) -> List[TradingSignal]:
        """–ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä"""
        logger.info("üîç Starting mass market scan...")
        start_time = time.time()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
            pairs = await get_usdt_pairs()
            logger.info(f"Scanning {len(pairs)} USDT pairs")

            # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
            signals = []
            batch_size = 20

            for i in range(0, len(pairs), batch_size):
                batch = pairs[i:i + batch_size]
                logger.info(f"Processing batch {i//batch_size + 1}: {len(batch)} pairs")

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                tasks = [self.scan_pair(pair) for pair in batch]
                results = await asyncio.gather(*tasks, return_exceptions=True)

                # –°–æ–±–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for result in results:
                    if isinstance(result, TradingSignal):
                        signals.append(result)

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if i + batch_size < len(pairs):
                    await asyncio.sleep(0.1)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            signals.sort(key=lambda x: x.confidence, reverse=True)

            scan_time = time.time() - start_time
            logger.info(f"‚úÖ Scan complete: {len(signals)} signals found in {scan_time:.1f}s")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã
            for i, signal in enumerate(signals[:10]):
                logger.info(f"  {i+1}. {signal.pair}: {signal.signal} {signal.pattern} ({signal.confidence}%)")

            return signals

        except Exception as e:
            logger.error(f"Mass scan error: {e}")
            return []

    async def ai_selection_phase(self, signals: List[TradingSignal]) -> List[str]:
        """–§–∞–∑–∞ –ò–ò –æ—Ç–±–æ—Ä–∞ –ª—É—á—à–∏—Ö –ø–∞—Ä"""
        if not signals:
            logger.warning("No signals for AI selection")
            return []

        logger.info(f"ü§ñ AI selecting from {len(signals)} signals...")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò
        signal_data = []
        for signal in signals:
            signal_data.append({
                'pair': signal.pair,
                'signal': signal.signal,
                'confidence': signal.confidence,
                'pattern': signal.pattern,
                'volume_ratio': signal.volume_ratio,
                'trend_strength': signal.trend_strength
            })

        try:
            selected_pairs = await select_best_pairs(signal_data)
            logger.info(f"‚úÖ AI selected {len(selected_pairs)} pairs: {selected_pairs}")
            return selected_pairs

        except Exception as e:
            logger.error(f"AI selection error: {e}")
            # Fallback - –±–µ—Ä–µ–º —Ç–æ–ø –ø–æ confidence
            fallback = [s.pair for s in signals[:config.ai.MAX_SELECTED_PAIRS]]
            logger.info(f"Using fallback selection: {fallback}")
            return fallback

    async def detailed_analysis_phase(self, selected_pairs: List[str], all_signals: List[TradingSignal]) -> int:
        """–§–∞–∑–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä"""
        if not selected_pairs:
            logger.warning("No pairs for detailed analysis")
            return 0

        logger.info(f"üìä Starting detailed analysis of {len(selected_pairs)} pairs...")

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        signals_dict = {signal.pair: signal for signal in all_signals}

        successful_analyses = 0

        for pair in selected_pairs:
            signal = signals_dict.get(pair)
            if not signal:
                logger.warning(f"Signal not found for {pair}")
                continue

            try:
                logger.info(f"Analyzing {pair}...")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ò–ò
                analysis = await analyze_pair_detailed(
                    pair=pair,
                    candles_5m=signal.candles_5m,
                    candles_15m=signal.candles_15m,
                    indicators=signal.indicators
                )

                if analysis:
                    self._save_analysis(pair, analysis, signal)
                    successful_analyses += 1
                    logger.info(f"‚úÖ {pair} analysis complete")
                else:
                    logger.error(f"‚ùå {pair} analysis failed")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏
                await asyncio.sleep(1)

            except Exception as e:
                logger.error(f"Error analyzing {pair}: {e}")

        return successful_analyses

    def _save_analysis(self, pair: str, analysis: str, signal: TradingSignal):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            with open(config.system.ANALYSIS_FILE, 'a', encoding=config.system.ENCODING) as f:
                f.write(f"\n{'='*80}\n")
                f.write(f"PAIR: {pair}\n")
                f.write(f"TIME: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"SIGNAL: {signal.signal}\n")
                f.write(f"PATTERN: {signal.pattern}\n")
                f.write(f"CONFIDENCE: {signal.confidence}%\n")
                f.write(f"VOLUME RATIO: {signal.volume_ratio:.2f}\n")
                f.write(f"TREND STRENGTH: {signal.trend_strength:.1f}\n")
                f.write(f"{'='*40}\n")
                f.write(f"{analysis}\n")
                f.write(f"{'='*80}\n")
        except Exception as e:
            logger.error(f"Error saving analysis: {e}")

    async def run_full_cycle(self):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        cycle_start = time.time()

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò
            logger.info("üîß Checking AI connection...")
            if not await check_ai_health():
                logger.error("AI health check failed - aborting")
                return

            # –≠—Ç–∞–ø 1: –ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            signals = await self.mass_scan()
            if not signals:
                logger.info("No trading signals found")
                return

            # –≠—Ç–∞–ø 2: –ò–ò –æ—Ç–±–æ—Ä
            selected_pairs = await self.ai_selection_phase(signals)
            if not selected_pairs:
                logger.info("AI selected no pairs")
                return

            # –≠—Ç–∞–ø 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            successful_analyses = await self.detailed_analysis_phase(selected_pairs, signals)

            # –ò—Ç–æ–≥–∏
            cycle_time = time.time() - cycle_start
            total_time = time.time() - self.start_time

            logger.info(f"\n{'='*60}")
            logger.info(f"üèÜ CYCLE COMPLETE")
            logger.info(f"‚è±Ô∏è  Cycle time: {cycle_time:.1f}s")
            logger.info(f"üìä Total signals found: {len(signals)}")
            logger.info(f"ü§ñ AI selected pairs: {len(selected_pairs)}")
            logger.info(f"‚úÖ Successful analyses: {successful_analyses}")
            logger.info(f"üìà Success rate: {successful_analyses/len(selected_pairs)*100:.1f}%")
            logger.info(f"üíæ Results saved to: {config.system.ANALYSIS_FILE}")
            logger.info(f"üïí Total runtime: {total_time:.1f}s")
            logger.info(f"{'='*60}")

        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è  Stopped by user")
        except Exception as e:
            logger.error(f"üí• Fatal error in cycle: {e}")
        finally:
            await self._cleanup()

    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ Cleaning up resources...")
        try:
            await cleanup_ai()
            await cleanup_exchange()
        except Exception as e:
            logger.error(f"Cleanup error: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ Starting Simplified Scalping Bot...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info("üîß Validating configuration...")
    if not config.validate():
        logger.error("‚ùå Configuration validation failed - check your .env file")
        logger.error("üí° Make sure you have DEEPSEEK=your_api_key in .env file")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = SimplifiedScalpingBot()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    logger.info(f"üìä Configuration:")
    logger.info(f"   Timeframes: {config.trading.HIGHER_TF}m + {config.trading.ENTRY_TF}m")
    logger.info(f"   Min confidence: {config.trading.MIN_CONFIDENCE}%")
    logger.info(f"   Max pairs to AI: {config.ai.MAX_PAIRS_TO_AI}")
    logger.info(f"   Max selected: {config.ai.MAX_SELECTED_PAIRS}")
    logger.info(f"   API model: {config.ai.MODEL}")

    await bot.run_full_cycle()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  Application stopped by user")
    except Exception as e:
        logger.error(f"üí• Application crash: {e}")
    finally:
        logger.info("üèÅ Application finished")