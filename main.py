"""
–ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã–π –±–æ—Ç - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
"""

import asyncio
import logging
import time
import json
from datetime import datetime
from typing import List, Dict, Any

from config import config, has_api_key
from func_async import get_trading_pairs, fetch_klines, batch_fetch_klines, cleanup as cleanup_api
from func_trade import calculate_basic_indicators, calculate_ai_indicators, check_basic_signal
from deepseek import ai_select_pairs, ai_analyze_pair

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)


class RewrittenScalpingBot:
    """–ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã–π –±–æ—Ç –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ - –ò–°–ü–†–ê–í–õ–ï–ù"""

    def __init__(self):
        self.processed_pairs = 0
        self.session_start = time.time()

    async def stage1_filter_signals(self) -> List[Dict]:
        """
        –≠–¢–ê–ü 1: –û—Ç—Å–µ–∏–≤–∞–µ–º –ø–∞—Ä—ã –ë–ï–ó —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (15–ú –¥–∞–Ω–Ω—ã–µ)
        """
        start_time = time.time()
        logger.info("=" * 50)
        logger.info("–≠–¢–ê–ü 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏...")
        logger.info("=" * 50)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
        pairs = await get_trading_pairs()
        if not pairs:
            logger.error("‚ùå –ü–∞—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            return []

        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
        logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è 15–ú –¥–∞–Ω–Ω—ã—Ö
        requests = [
            {'symbol': pair, 'interval': '15', 'limit': config.QUICK_SCAN_15M}
            for pair in pairs
        ]

        # –ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º 15–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(requests)} –ø–∞—Ä...")
        results = await batch_fetch_klines(requests)
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ {len(results)} –ø–∞—Ä–∞–º")

        pairs_with_signals = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –û–°–¢–ê–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –° –°–ò–ì–ù–ê–õ–ê–ú–ò
        for i, result in enumerate(results):
            if not result.get('success') or len(result['klines']) < 20:
                continue

            symbol = result['symbol']
            klines = result['klines']

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ø–∞—Ä
            if i % 50 == 0:
                logger.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(results)} –ø–∞—Ä...")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            try:
                indicators = calculate_basic_indicators(klines)
                if not indicators:
                    logger.debug(f"‚ö†Ô∏è {symbol}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª - –°–¢–†–û–ì–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø
                signal_check = check_basic_signal(indicators)

                # –û–°–¢–ê–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –ø–∞—Ä—ã —Å —á–µ—Ç–∫–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
                if signal_check['signal'] and signal_check['confidence'] >= config.MIN_CONFIDENCE:
                    pair_data = {
                        'symbol': symbol,
                        'confidence': signal_check['confidence'],
                        'direction': signal_check['direction'],
                        'base_indicators': indicators,
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–µ—á–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
                        'stage1_klines': klines
                    }
                    pairs_with_signals.append(pair_data)

                    logger.info(f"‚úÖ {symbol}: {signal_check['direction']} ({signal_check['confidence']}%)")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
                continue

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        pairs_with_signals.sort(key=lambda x: x['confidence'], reverse=True)

        elapsed = time.time() - start_time
        self.processed_pairs = len(results)

        logger.info("=" * 50)
        logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–¢–ê–ü–ê 1:")
        logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)} –ø–∞—Ä")
        logger.info(f"   –° —Å–∏–≥–Ω–∞–ª–∞–º–∏: {len(pairs_with_signals)} –ø–∞—Ä")
        logger.info(f"   –í—Ä–µ–º—è: {elapsed:.1f}—Å–µ–∫")
        logger.info(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {len(pairs) / elapsed:.0f} –ø–∞—Ä/—Å–µ–∫")

        if pairs_with_signals:
            top_pairs = [(p['symbol'], p['confidence'], p['direction']) for p in pairs_with_signals[:10]]
            logger.info(f"üèÜ –¢–æ–ø-10 –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏:")
            for symbol, conf, direction in top_pairs:
                logger.info(f"   {symbol}: {direction} ({conf}%)")

        logger.info("=" * 50)

        return pairs_with_signals

    async def stage2_ai_bulk_select(self, signal_pairs: List[Dict]) -> List[str]:
        """
        –≠–¢–ê–ü 2: –ò–ò –æ—Ç–±–æ—Ä - –ø–µ—Ä–µ–¥–∞–µ–º –í–°–ï –ø–∞—Ä—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö
        """
        start_time = time.time()
        logger.info("=" * 50)
        logger.info(f"–≠–¢–ê–ü 2: –ò–ò –∞–Ω–∞–ª–∏–∑ {len(signal_pairs)} –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏...")
        logger.info("=" * 50)

        if not signal_pairs:
            logger.warning("‚ùå –ù–µ—Ç –ø–∞—Ä –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞")
            return []

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        logger.info("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞...")

        ai_input_data = []

        for i, pair_data in enumerate(signal_pairs):
            symbol = pair_data['symbol']

            logger.info(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ {symbol} ({i+1}/{len(signal_pairs)})...")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –∏–∑ —ç—Ç–∞–ø–∞ 1
            if 'stage1_klines' in pair_data:
                candles_15m = pair_data['stage1_klines']
                logger.debug(f"   –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–≤–µ—á–∏ –∏–∑ —ç—Ç–∞–ø–∞ 1: {len(candles_15m)} —à—Ç—É–∫")
            else:
                # Fallback - –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                logger.debug(f"   –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö 15–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
                candles_15m = await fetch_klines(symbol, '15', config.AI_BULK_15M)

            if not candles_15m or len(candles_15m) < 20:
                logger.warning(f"‚ö†Ô∏è {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 15–º –¥–∞–Ω–Ω—ã—Ö ({len(candles_15m) if candles_15m else 0} —Å–≤–µ—á–µ–π)")
                continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–ª—è –ò–ò
            try:
                indicators_15m = calculate_ai_indicators(candles_15m, config.AI_INDICATORS_HISTORY)
                if not indicators_15m:
                    logger.warning(f"‚ö†Ô∏è {symbol}: –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ò–ò")
                    continue

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò
                pair_ai_data = {
                    'symbol': symbol,
                    'confidence': pair_data['confidence'],
                    'direction': pair_data['direction'],
                    'candles_15m': candles_15m[-config.AI_BULK_15M:],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                    'indicators_15m': indicators_15m
                }

                ai_input_data.append(pair_ai_data)
                logger.debug(f"‚úÖ {symbol}: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò {symbol}: {e}")
                continue

        if not ai_input_data:
            logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞!")
            logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            logger.error("1. –ü–æ–ª—É—á–µ–Ω—ã –ª–∏ —Å–≤–µ—á–∏ –Ω–∞ —ç—Ç–∞–ø–µ 1")
            logger.error("2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
            logger.error("3. –ù–µ—Ç –ª–∏ –æ—à–∏–±–æ–∫ –≤ calculate_ai_indicators")
            return []

        logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(ai_input_data)} –ø–∞—Ä –¥–ª—è –ò–ò –∏–∑ {len(signal_pairs)}")

        # –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò
        try:
            json_data = json.dumps(ai_input_data, separators=(',', ':'))
            data_size = len(json_data)
            logger.info(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò: {data_size:,} –±–∞–π—Ç ({data_size/1024:.1f} KB)")

            if data_size > 1024 * 1024:  # > 1MB
                logger.warning(f"‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò: {data_size/1024/1024:.1f} MB")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò: {e}")
            return []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ò–ò
        if not has_api_key:
            logger.error("‚ùå DeepSeek API –∫–ª—é—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DEEPSEEK_API_KEY")
            return []

        # –ò–ò –∞–Ω–∞–ª–∏–∑ –í–°–ï–• –ø–∞—Ä –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        selected_pairs = await ai_select_pairs(ai_input_data)

        elapsed = time.time() - start_time

        logger.info("=" * 50)
        logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–¢–ê–ü–ê 2:")
        logger.info(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ò–ò: {len(ai_input_data)} –ø–∞—Ä")
        logger.info(f"   –í—ã–±—Ä–∞–Ω–æ –ò–ò: {len(selected_pairs)} –ø–∞—Ä")
        logger.info(f"   –í—Ä–µ–º—è: {elapsed:.1f}—Å–µ–∫")

        if selected_pairs:
            logger.info(f"üéØ –ü–∞—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {', '.join(selected_pairs)}")
        else:
            logger.warning("‚ö†Ô∏è –ò–ò –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")

        logger.info("=" * 50)

        return selected_pairs

    async def stage3_detailed_analysis(self, selected_pairs: List[str]) -> List[Dict]:
        """
        –≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ
        """
        start_time = time.time()
        logger.info("=" * 50)
        logger.info(f"–≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {len(selected_pairs)} –ø–∞—Ä...")
        logger.info("=" * 50)

        if not selected_pairs:
            logger.warning("‚ùå –ù–µ—Ç –ø–∞—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            return []

        final_signals = []

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
        for i, symbol in enumerate(selected_pairs):
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ {symbol} ({i+1}/{len(selected_pairs)})...")

            try:
                # –ü–æ–ª—É—á–∞–µ–º –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
                logger.debug(f"   –ó–∞–≥—Ä—É–∑–∫–∞ 5–º –¥–∞–Ω–Ω—ã—Ö ({config.FINAL_5M} —Å–≤–µ—á–µ–π)...")
                logger.debug(f"   –ó–∞–≥—Ä—É–∑–∫–∞ 15–º –¥–∞–Ω–Ω—ã—Ö ({config.FINAL_15M} —Å–≤–µ—á–µ–π)...")

                klines_5m_task = fetch_klines(symbol, '5', config.FINAL_5M)
                klines_15m_task = fetch_klines(symbol, '15', config.FINAL_15M)

                klines_5m, klines_15m = await asyncio.gather(klines_5m_task, klines_15m_task)

                if (not klines_5m or len(klines_5m) < 100 or
                        not klines_15m or len(klines_15m) < 50):
                    logger.warning(f"‚ùå {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (5–º: {len(klines_5m) if klines_5m else 0}, 15–º: {len(klines_15m) if klines_15m else 0})")
                    continue

                logger.debug(f"‚úÖ {symbol}: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã (5–º: {len(klines_5m)}, 15–º: {len(klines_15m)})")

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                logger.debug(f"   –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
                indicators_5m = calculate_ai_indicators(klines_5m, config.FINAL_INDICATORS)
                indicators_15m = calculate_ai_indicators(klines_15m, config.FINAL_INDICATORS)

                if not indicators_5m or not indicators_15m:
                    logger.warning(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
                    continue

                # –î–µ—Ç–∞–ª—å–Ω—ã–π –ò–ò –∞–Ω–∞–ª–∏–∑
                logger.debug(f"   –ò–ò –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
                analysis = await ai_analyze_pair(
                    symbol, klines_5m, klines_15m, indicators_5m, indicators_15m
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (analysis['signal'] != 'NO_SIGNAL' and
                    analysis['confidence'] >= config.MIN_CONFIDENCE):

                    final_signals.append(analysis)
                    entry = analysis.get('entry_price', 0)
                    stop = analysis.get('stop_loss', 0)
                    profit = analysis.get('take_profit', 0)

                    logger.info(f"‚úÖ {symbol}: {analysis['signal']} ({analysis['confidence']}%)")
                    if entry and stop and profit:
                        risk_reward = round(abs(profit - entry) / abs(entry - stop), 2) if entry != stop else 0
                        logger.info(f"   üìä –í—Ö–æ–¥: {entry:.4f} | –°—Ç–æ–ø: {stop:.4f} | –ü—Ä–æ—Ñ–∏—Ç: {profit:.4f} | R/R: 1:{risk_reward}")
                else:
                    logger.info(f"‚ö†Ô∏è {symbol}: {analysis['signal']} ({analysis['confidence']}%) - –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                continue

        elapsed = time.time() - start_time

        logger.info("=" * 50)
        logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–¢–ê–ü–ê 3:")
        logger.info(f"   –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(selected_pairs)} –ø–∞—Ä")
        logger.info(f"   –§–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(final_signals)}")
        logger.info(f"   –í—Ä–µ–º—è: {elapsed:.1f}—Å–µ–∫")

        if final_signals:
            logger.info(f"üéØ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
            for signal in final_signals:
                logger.info(f"   {signal['symbol']}: {signal['signal']} ({signal['confidence']}%)")

        logger.info("=" * 50)

        return final_signals

    async def run_full_cycle(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù"""
        cycle_start = time.time()

        logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–ï–†–ï–ü–ò–°–ê–ù–ù–û–ì–û –¶–ò–ö–õ–ê –ê–ù–ê–õ–ò–ó–ê")
        logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%H:%M:%S')}")
        logger.info(f"üîë DeepSeek API: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if has_api_key else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")

        try:
            # –≠–¢–ê–ü 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ (15–ú)
            stage1_start = time.time()
            signal_pairs = await self.stage1_filter_signals()
            stage1_time = time.time() - stage1_start

            if not signal_pairs:
                return {
                    'result': 'NO_SIGNAL_PAIRS',
                    'stage1_time': stage1_time,
                    'total_time': time.time() - cycle_start,
                    'pairs_scanned': self.processed_pairs,
                    'message': '–ù–µ—Ç –ø–∞—Ä —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏'
                }

            # –≠–¢–ê–ü 2: –ò–ò –æ—Ç–±–æ—Ä –≤—Å–µ—Ö –ø–∞—Ä –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            stage2_start = time.time()
            selected_pairs = await self.stage2_ai_bulk_select(signal_pairs)
            stage2_time = time.time() - stage2_start

            if not selected_pairs:
                return {
                    'result': 'NO_AI_SELECTION',
                    'stage1_time': stage1_time,
                    'stage2_time': stage2_time,
                    'signal_pairs': len(signal_pairs),
                    'pairs_scanned': self.processed_pairs,
                    'total_time': time.time() - cycle_start,
                    'message': '–ò–ò –Ω–µ –≤—ã–±—Ä–∞–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä'
                }

            # –≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É—Ä–æ–≤–Ω—è–º–∏
            stage3_start = time.time()
            final_signals = await self.stage3_detailed_analysis(selected_pairs)
            stage3_time = time.time() - stage3_start

            total_time = time.time() - cycle_start

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'result': 'SUCCESS' if final_signals else 'NO_FINAL_SIGNALS',
                'timing': {
                    'stage1_filter': round(stage1_time, 2),
                    'stage2_ai_bulk': round(stage2_time, 2),
                    'stage3_detailed': round(stage3_time, 2),
                    'total': round(total_time, 2)
                },
                'stats': {
                    'pairs_scanned': self.processed_pairs,
                    'signal_pairs_found': len(signal_pairs),
                    'ai_selected': len(selected_pairs),
                    'final_signals': len(final_signals),
                    'processing_speed': round(self.processed_pairs / stage1_time, 1) if stage1_time > 0 else 0
                },
                'pipeline': {
                    'stage1_pairs': [p['symbol'] for p in signal_pairs[:10]],
                    'stage2_selected': selected_pairs,
                    'stage3_signals': [s['symbol'] for s in final_signals]
                },
                'signals': final_signals,
                'api_available': has_api_key
            }

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info("üéâ –ó–ê–í–ï–†–®–ï–ù–ò–ï –¶–ò–ö–õ–ê –ê–ù–ê–õ–ò–ó–ê")
            logger.info(f"üìä –ü–∞–π–ø–ª–∞–π–Ω: {self.processed_pairs} ‚Üí {len(signal_pairs)} ‚Üí {len(selected_pairs)} ‚Üí {len(final_signals)}")
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è: –æ–±—â–µ–µ {total_time:.1f}—Å (—Ñ–∏–ª—å—Ç—Ä: {stage1_time:.1f}—Å | –ò–ò: {stage2_time:.1f}—Å | –∞–Ω–∞–ª–∏–∑: {stage3_time:.1f}—Å)")
            logger.info(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {self.processed_pairs / stage1_time:.0f} –ø–∞—Ä/—Å–µ–∫")

            return result

        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
            import traceback
            logger.error(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return {
                'result': 'ERROR',
                'error': str(e),
                'total_time': time.time() - cycle_start
            }

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        await cleanup_api()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ê"""
    print("ü§ñ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô –°–ö–ê–õ–¨–ü–ò–ù–ì–û–í–´–ô –ë–û–¢ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    print("üìã –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–´:")
    print("   –≠–¢–ê–ü 1: –§–∏–ª—å—Ç—Ä –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ (15–º –¥–∞–Ω–Ω—ã–µ)")
    print("   –≠–¢–ê–ü 2: –ò–ò –æ—Ç–±–æ—Ä (–≤—Å–µ –ø–∞—Ä—ã + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º)")
    print("   –≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 5–º+15–º, —É—Ä–æ–≤–Ω–∏)")
    print()
    print(f"üîë DeepSeek –ò–ò: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if has_api_key else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (fallback —Ä–µ–∂–∏–º)'}")
    print("=" * 70)

    bot = RewrittenScalpingBot()

    try:
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        result = await bot.run_full_cycle()

        # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"   –°—Ç–∞—Ç—É—Å: {result['result']}")
        print(f"   –ò–ò –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'‚úÖ' if result.get('api_available') else '‚ùå'}")

        if 'timing' in result:
            t = result['timing']
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {t['total']}—Å–µ–∫")
            print(f"      ‚îú‚îÄ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {t['stage1_filter']}—Å–µ–∫")
            print(f"      ‚îú‚îÄ –ò–ò –æ—Ç–±–æ—Ä: {t['stage2_ai_bulk']}—Å–µ–∫")
            print(f"      ‚îî‚îÄ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {t['stage3_detailed']}—Å–µ–∫")

        if 'stats' in result:
            s = result['stats']
            print(f"   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {s['pairs_scanned']} ‚Üí {s['signal_pairs_found']} ‚Üí {s['ai_selected']} ‚Üí {s['final_signals']}")
            print(f"   ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {s['processing_speed']} –ø–∞—Ä/—Å–µ–∫")

        if 'pipeline' in result and result['pipeline']:
            p = result['pipeline']
            if p.get('stage1_pairs'):
                print(f"\nüîç –≠–¢–ê–ü 1 - –ü–∞—Ä—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ (—Ç–æ–ø-10):")
                print(f"   {', '.join(p['stage1_pairs'])}")

            if p.get('stage2_selected'):
                print(f"\nü§ñ –≠–¢–ê–ü 2 - –ò–ò –æ—Ç–±–æ—Ä:")