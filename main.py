"""
–ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã–π –±–æ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
–≠–¢–ê–ü 1: –û—Ç—Å–µ–∏–≤–∞–µ—Ç –ø–∞—Ä—ã –ë–ï–ó —Å–∏–≥–Ω–∞–ª–æ–≤
–≠–¢–ê–ü 2: –ü–µ—Ä–µ–¥–∞–µ—Ç –í–°–ï –ø–∞—Ä—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ + 32 —Å–≤–µ—á–∏ + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
–≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –æ—Ç–æ–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã —Å —É—Ä–æ–≤–Ω—è–º–∏
"""

import asyncio
import logging
import time
import json
from typing import List, Dict, Any

from config import config
from func_async import get_trading_pairs, fetch_klines, batch_fetch_klines, cleanup as cleanup_api
from func_trade import calculate_basic_indicators, calculate_ai_indicators, check_basic_signal
from deepseek import ai_select_pairs, ai_analyze_pair

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)


class RewrittenScalpingBot:
    """–ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã–π –±–æ—Ç –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ"""

    def __init__(self):
        self.processed_pairs = 0
        self.session_start = time.time()

    async def stage1_filter_signals(self) -> List[Dict]:
        """
        –≠–¢–ê–ü 1: –û—Ç—Å–µ–∏–≤–∞–µ–º –ø–∞—Ä—ã –ë–ï–ó —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¢–û–õ–¨–ö–û –ø–∞—Ä—ã —Å —á–µ—Ç–∫–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
        """
        start_time = time.time()
        logger.info("üîç –≠–¢–ê–ü 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        pairs = await get_trading_pairs()
        if not pairs:
            logger.error("–ü–∞—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            return []

        logger.info(f"   –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(pairs)} –ø–∞—Ä –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        requests = [
            {'symbol': pair, 'interval': '5', 'limit': config.QUICK_SCAN_5M}
            for pair in pairs
        ]

        # –ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        results = await batch_fetch_klines(requests)

        pairs_with_signals = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –û–°–¢–ê–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –° –°–ò–ì–ù–ê–õ–ê–ú–ò
        for result in results:
            if not result.get('success') or len(result['klines']) < 20:
                continue

            symbol = result['symbol']
            klines = result['klines']

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = calculate_basic_indicators(klines)
            if not indicators:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª - –°–¢–†–û–ì–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø
            signal_check = check_basic_signal(indicators)

            # –û–°–¢–ê–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –ø–∞—Ä—ã —Å —á–µ—Ç–∫–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
            if signal_check['signal'] and signal_check['confidence'] >= config.MIN_CONFIDENCE:
                pairs_with_signals.append({
                    'symbol': symbol,
                    'confidence': signal_check['confidence'],
                    'direction': signal_check['direction'],
                    'base_indicators': indicators
                })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        pairs_with_signals.sort(key=lambda x: x['confidence'], reverse=True)

        elapsed = time.time() - start_time
        self.processed_pairs = len(results)

        logger.info(f"   ‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(pairs_with_signals)} –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –∑–∞ {elapsed:.1f}—Å–µ–∫")
        logger.info(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {len(pairs) / elapsed:.0f} –ø–∞—Ä/—Å–µ–∫")

        return pairs_with_signals

    async def stage2_ai_bulk_select(self, signal_pairs: List[Dict]) -> List[str]:
        """
        –≠–¢–ê–ü 2: –ò–ò –æ—Ç–±–æ—Ä - –ø–µ—Ä–µ–¥–∞–µ–º –í–°–ï –ø–∞—Ä—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        + 32 —Å–≤–µ—á–∏ 15–º + 32 –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
        """
        start_time = time.time()
        logger.info(f"ü§ñ –≠–¢–ê–ü 2: –ò–ò –∞–Ω–∞–ª–∏–∑ {len(signal_pairs)} –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏...")

        if not signal_pairs:
            return []

        # –ü–æ–ª—É—á–∞–µ–º 15–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –í–°–ï–• –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
        requests_15m = [
            {'symbol': pair['symbol'], 'interval': '15', 'limit': 32}  # –†–æ–≤–Ω–æ 32 —Å–≤–µ—á–∏
            for pair in signal_pairs
        ]

        results_15m = await batch_fetch_klines(requests_15m)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò - –í–°–ï –ø–∞—Ä—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        ai_input_data = []

        for pair_data in signal_pairs:
            symbol = pair_data['symbol']

            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ 15–º –¥–∞–Ω–Ω—ã–µ
            candles_15m = None
            for result in results_15m:
                if result['symbol'] == symbol and result.get('success'):
                    candles_15m = result['klines']
                    break

            if not candles_15m or len(candles_15m) < 20:
                logger.warning(f"   –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 15–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –Ω–∞ 32 –∑–Ω–∞—á–µ–Ω–∏—è
            indicators_15m = calculate_ai_indicators(candles_15m, 32)
            if not indicators_15m:
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ò–ò
            ai_input_data.append({
                'symbol': symbol,
                'confidence': pair_data['confidence'],
                'direction': pair_data['direction'],
                'candles_15m': candles_15m,  # 32 —Å–≤–µ—á–∏
                'indicators_15m': indicators_15m  # 32 –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            })

        if not ai_input_data:
            logger.warning("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞")
            return []

        logger.info(f"   –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(ai_input_data)} –ø–∞—Ä –¥–ª—è –ò–ò")
        logger.info(f"   –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ~{len(json.dumps(ai_input_data, separators=(',', ':'))) // 1000}KB")

        # –ò–ò –∞–Ω–∞–ª–∏–∑ –í–°–ï–• –ø–∞—Ä –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        selected_pairs = await ai_select_pairs(ai_input_data)

        elapsed = time.time() - start_time
        logger.info(f"   ‚úÖ –ò–ò –≤—ã–±—Ä–∞–ª {len(selected_pairs)} –ø–∞—Ä –∑–∞ {elapsed:.1f}—Å–µ–∫")
        if selected_pairs:
            logger.info(f"   –§–∏–Ω–∞–ª–∏—Å—Ç—ã: {', '.join(selected_pairs)}")

        return selected_pairs

    async def stage3_detailed_analysis(self, selected_pairs: List[str]) -> List[Dict]:
        """
        –≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ
        –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 5–º + 15–º + –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ‚Üí —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Å —É—Ä–æ–≤–Ω—è–º–∏
        """
        start_time = time.time()
        logger.info(f"üìä –≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {len(selected_pairs)} –ø–∞—Ä...")

        if not selected_pairs:
            return []

        final_signals = []

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
        for symbol in selected_pairs:
            logger.info(f"   –ê–Ω–∞–ª–∏–∑ {symbol}...")

            # –ü–æ–ª—É—á–∞–µ–º –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            klines_5m_task = fetch_klines(symbol, '5', config.FINAL_5M)
            klines_15m_task = fetch_klines(symbol, '15', config.FINAL_15M)

            klines_5m, klines_15m = await asyncio.gather(klines_5m_task, klines_15m_task)

            if (not klines_5m or len(klines_5m) < 100 or
                    not klines_15m or len(klines_15m) < 50):
                logger.warning(f"   –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators_5m = calculate_ai_indicators(klines_5m, config.FINAL_INDICATORS)
            indicators_15m = calculate_ai_indicators(klines_15m, config.FINAL_INDICATORS)

            if not indicators_5m or not indicators_15m:
                logger.warning(f"   –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol}")
                continue

            # –î–µ—Ç–∞–ª—å–Ω—ã–π –ò–ò –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON
            analysis = await ai_analyze_pair(
                symbol, klines_5m, klines_15m, indicators_5m, indicators_15m
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (analysis['signal'] != 'NO_SIGNAL' and
                analysis['confidence'] >= config.MIN_CONFIDENCE):

                final_signals.append(analysis)
                logger.info(f"   ‚úÖ {symbol}: {analysis['signal']} ({analysis['confidence']}%) "
                          f"–í—Ö–æ–¥: {analysis.get('entry_price', 0)}")
            else:
                logger.info(f"   ‚ùå {symbol}: {analysis['signal']} ({analysis['confidence']}%)")

        elapsed = time.time() - start_time
        logger.info(f"   ‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f}—Å–µ–∫")

        return final_signals

    async def run_full_cycle(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        cycle_start = time.time()

        logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–ï–†–ï–ü–ò–°–ê–ù–ù–û–ì–û –¶–ò–ö–õ–ê")
        logger.info("=" * 60)

        try:
            # –≠–¢–ê–ü 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
            stage1_start = time.time()
            signal_pairs = await self.stage1_filter_signals()
            stage1_time = time.time() - stage1_start

            if not signal_pairs:
                return {
                    'result': 'NO_SIGNAL_PAIRS',
                    'stage1_time': stage1_time,
                    'total_time': time.time() - cycle_start,
                    'message': '–ù–µ—Ç –ø–∞—Ä —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏'
                }

            # –≠–¢–ê–ü 2: –ò–ò –æ—Ç–±–æ—Ä –≤—Å–µ—Ö –ø–∞—Ä –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            stage2_start = time.time()
            selected_pairs = await self.stage2_ai_bulk_select(signal_pairs)
            stage2_time = time.time() - stage2_start

            if not selected_pairs:
                return {
                    'result': 'NO_AI_SELECTION',
                    'stage1_time': stage1_time,
                    'stage2_time': stage2_time,
                    'signal_pairs': len(signal_pairs),
                    'total_time': time.time() - cycle_start,
                    'message': '–ò–ò –Ω–µ –≤—ã–±—Ä–∞–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä'
                }

            # –≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É—Ä–æ–≤–Ω—è–º–∏
            stage3_start = time.time()
            final_signals = await self.stage3_detailed_analysis(selected_pairs)
            stage3_time = time.time() - stage3_start

            total_time = time.time() - cycle_start

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'result': 'SUCCESS' if final_signals else 'NO_FINAL_SIGNALS',
                'timing': {
                    'stage1_filter': round(stage1_time, 2),
                    'stage2_ai_bulk': round(stage2_time, 2),
                    'stage3_detailed': round(stage3_time, 2),
                    'total': round(total_time, 2)
                },
                'stats': {
                    'pairs_scanned': self.processed_pairs,
                    'signal_pairs_found': len(signal_pairs),
                    'ai_selected': len(selected_pairs),
                    'final_signals': len(final_signals),
                    'processing_speed': round(self.processed_pairs / stage1_time, 1)
                },
                'pipeline': {
                    'stage1_pairs': [p['symbol'] for p in signal_pairs[:10]],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
                    'stage2_selected': selected_pairs,
                    'stage3_signals': [s['symbol'] for s in final_signals]
                },
                'signals': final_signals
            }

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            logger.info("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–û–ì–û –¶–ò–ö–õ–ê:")
            logger.info(f"   –í—Ä–µ–º—è: —Ñ–∏–ª—å—Ç—Ä {stage1_time:.1f}—Å | –ò–ò –æ—Ç–±–æ—Ä {stage2_time:.1f}—Å | –∞–Ω–∞–ª–∏–∑ {stage3_time:.1f}—Å")
            logger.info(f"   –ü–∞–π–ø–ª–∞–π–Ω: {self.processed_pairs} ‚Üí {len(signal_pairs)} ‚Üí {len(selected_pairs)} ‚Üí {len(final_signals)}")
            logger.info(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {self.processed_pairs / stage1_time:.0f} –ø–∞—Ä/—Å–µ–∫")

            if final_signals:
                logger.info("üéØ –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´ –° –£–†–û–í–ù–Ø–ú–ò:")
                for signal in final_signals:
                    entry = signal.get('entry_price', 0)
                    stop = signal.get('stop_loss', 0)
                    profit = signal.get('take_profit', 0)
                    logger.info(f"   {signal['symbol']}: {signal['signal']} ({signal['confidence']}%)")
                    if entry and stop and profit:
                        risk_reward = round((profit - entry) / (entry - stop), 2) if entry != stop else 0
                        logger.info(f"      –í—Ö–æ–¥: {entry} | –°—Ç–æ–ø: {stop} | –ü—Ä–æ—Ñ–∏—Ç: {profit} | R/R: 1:{risk_reward}")

            return result

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
            return {
                'result': 'ERROR',
                'error': str(e),
                'total_time': time.time() - cycle_start
            }

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        await cleanup_api()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
    print("ü§ñ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô –°–ö–ê–õ–¨–ü–ò–ù–ì–û–í–´–ô –ë–û–¢")
    print(f"‚öôÔ∏è  –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞:")
    print(f"   –≠–¢–ê–ü 1: –§–∏–ª—å—Ç—Ä –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ (5–º –¥–∞–Ω–Ω—ã–µ)")
    print(f"   –≠–¢–ê–ü 2: –ò–ò –æ—Ç–±–æ—Ä (–≤—Å–µ –ø–∞—Ä—ã + 32 —Å–≤–µ—á–∏ 15–º –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º)")
    print(f"   –≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 5–º+15–º, —É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞)")
    print(f"   –ò–ò: {'‚úÖ' if config.DEEPSEEK_API_KEY else '‚ùå'} DeepSeek")
    print("=" * 70)

    bot = RewrittenScalpingBot()

    try:
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        result = await bot.run_full_cycle()

        # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"   –°—Ç–∞—Ç—É—Å: {result['result']}")

        if 'timing' in result:
            t = result['timing']
            print(f"   –í—Ä–µ–º—è: {t['total']}—Å–µ–∫ (—Ñ–∏–ª—å—Ç—Ä: {t['stage1_filter']}—Å, –ò–ò: {t['stage2_ai_bulk']}—Å, –∞–Ω–∞–ª–∏–∑: {t['stage3_detailed']}—Å)")

        if 'stats' in result:
            s = result['stats']
            print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {s['pairs_scanned']} ‚Üí {s['signal_pairs_found']} ‚Üí {s['ai_selected']} ‚Üí {s['final_signals']}")
            print(f"   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {s['processing_speed']} –ø–∞—Ä/—Å–µ–∫")

        if 'pipeline' in result:
            p = result['pipeline']
            if p['stage1_pairs']:
                print(f"\nüîç –≠–¢–ê–ü 1 - –ü–∞—Ä—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ (—Ç–æ–ø-10): {', '.join(p['stage1_pairs'])}")
            if p['stage2_selected']:
                print(f"ü§ñ –≠–¢–ê–ü 2 - –ò–ò –æ—Ç–±–æ—Ä: {', '.join(p['stage2_selected'])}")
            if p['stage3_signals']:
                print(f"üìä –≠–¢–ê–ü 3 - –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã: {', '.join(p['stage3_signals'])}")

        if result.get('signals'):
            print(f"\nüéØ –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´ –° –£–†–û–í–ù–Ø–ú–ò ({len(result['signals'])}):")
            for signal in result['signals']:
                symbol = signal['symbol']
                direction = signal['signal']
                confidence = signal['confidence']
                entry = signal.get('entry_price', 0)
                stop = signal.get('stop_loss', 0)
                profit = signal.get('take_profit', 0)

                trend_mark = "üîÑ" if signal.get('trend_alignment') else "‚ö†Ô∏è"
                volume_mark = "üìà" if signal.get('volume_confirmation') else "üìâ"

                print(f"   {symbol}: {direction} {confidence}% {trend_mark}{volume_mark}")

                if entry and stop and profit:
                    risk_reward = round(abs(profit - entry) / abs(entry - stop), 2) if entry != stop else 0
                    print(f"      üí∞ –í—Ö–æ–¥: {entry:.4f}")
                    print(f"      üõë –°—Ç–æ–ø: {stop:.4f}")
                    print(f"      üéØ –ü—Ä–æ—Ñ–∏—Ç: {profit:.4f}")
                    print(f"      üìä –†–∏—Å–∫/–î–æ—Ö–æ–¥: 1:{risk_reward}")

                # –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑
                if signal.get('analysis'):
                    analysis_short = signal['analysis'][:200] + "..." if len(signal['analysis']) > 200 else signal['analysis']
                    print(f"      üí° {analysis_short}")
                print()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
        with open('bot_result.json', 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ bot_result.json")

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.cleanup()
        print("üßπ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")


if __name__ == "__main__":
    asyncio.run(main())