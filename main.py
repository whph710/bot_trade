import asyncio
import json
import logging
import time
from typing import List, Dict, Any

from func_trade import (
    get_signal_details,
    check_ema_tsi_signal,
    calculate_indicators_for_candles
)
from func_async import get_klines_async, get_usdt_trading_pairs
from deepseek import deep_seek

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class TradingSignalAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ EMA+TSI –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Bybit
    """

    def __init__(self,
                 ema1_period: int = 7,
                 ema2_period: int = 14,
                 ema3_period: int = 28,
                 tsi_long: int = 12,
                 tsi_short: int = 6,
                 tsi_signal: int = 6):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        """
        self.ema1_period = ema1_period
        self.ema2_period = ema2_period
        self.ema3_period = ema3_period
        self.tsi_long = tsi_long
        self.tsi_short = tsi_short
        self.tsi_signal = tsi_signal

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.required_candles_for_analysis = max(self.ema3_period, self.tsi_long, 50) + 50
        # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π
        self.candles_for_ai = 100

    async def analyze_pair(self, symbol: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ EMA+TSI —Å–∏–≥–Ω–∞–ª–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            candles = await get_klines_async(
                symbol,
                interval="15",
                limit=self.required_candles_for_analysis
            )

            if not candles or len(candles) < self.required_candles_for_analysis:
                return {
                    'pair': symbol,
                    'signal': 'NO_SIGNAL',
                    'reason': 'INSUFFICIENT_DATA',
                    'details': {},
                    'candles': [],
                    'indicators': {}
                }

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = check_ema_tsi_signal(
                candles,
                self.ema1_period,
                self.ema2_period,
                self.ema3_period,
                self.tsi_long,
                self.tsi_short,
                self.tsi_signal
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            details = get_signal_details(
                candles,
                self.ema1_period,
                self.ema2_period,
                self.ema3_period,
                self.tsi_long,
                self.tsi_short,
                self.tsi_signal
            )

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            if signal in ['LONG', 'SHORT']:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
                candles_for_ai = candles[-self.candles_for_ai:] if len(candles) >= self.candles_for_ai else candles

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —ç—Ç–∏—Ö —Å–≤–µ—á–µ–π
                indicators = calculate_indicators_for_candles(
                    candles,
                    self.ema1_period,
                    self.ema2_period,
                    self.ema3_period,
                    self.tsi_long,
                    self.tsi_short,
                    self.tsi_signal
                )

                # –û–±—Ä–µ–∑–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                if indicators:
                    start_idx = len(candles) - len(candles_for_ai)
                    indicators_for_ai = {
                        'ema1_values': indicators['ema1_values'][start_idx:],
                        'ema2_values': indicators['ema2_values'][start_idx:],
                        'ema3_values': indicators['ema3_values'][start_idx:],
                        'tsi_values': indicators['tsi_values'][start_idx:],
                        'tsi_signal_values': indicators['tsi_signal_values'][start_idx:]
                    }
                else:
                    indicators_for_ai = {}

                return {
                    'pair': symbol,
                    'signal': signal,
                    'details': details,
                    'candles': candles_for_ai,
                    'indicators': indicators_for_ai
                }
            else:
                return {
                    'pair': symbol,
                    'signal': signal,
                    'details': details,
                    'candles': [],
                    'indicators': {}
                }

        except Exception as e:
            return {
                'pair': symbol,
                'signal': 'ERROR',
                'reason': str(e),
                'details': {},
                'candles': [],
                'indicators': {}
            }

    async def analyze_all_pairs(self) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        start_time = time.time()
        logger.info("üîç –≠–¢–ê–ü: –ú–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        try:
            pairs = await get_usdt_trading_pairs()
        except Exception as e:
            logger.error(f"‚ùå –≠–¢–ê–ü –ü–†–û–í–ê–õ–ï–ù: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã - {e}")
            return {
                'success': False,
                'message': f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}',
                'pairs_data': [],
                'signal_counts': {'LONG': 0, 'SHORT': 0, 'NO_SIGNAL': 0},
                'execution_time': 0
            }

        if not pairs:
            logger.error("‚ùå –≠–¢–ê–ü –ü–†–û–í–ê–õ–ï–ù: –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø—É—Å—Ç")
            return {
                'success': False,
                'message': '–°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø—É—Å—Ç',
                'pairs_data': [],
                'signal_counts': {'LONG': 0, 'SHORT': 0, 'NO_SIGNAL': 0},
                'execution_time': 0
            }

        logger.info(f"üìä –≠–¢–ê–ü: –ê–Ω–∞–ª–∏–∑ {len(pairs)} –ø–∞—Ä –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–±–∞—Ç—á–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit)
        batch_size = 50  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ 50 –ø–∞—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        all_results = []

        for i in range(0, len(pairs), batch_size):
            batch = pairs[i:i + batch_size]

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –±–∞—Ç—á–∞
            tasks = [self.analyze_pair(pair) for pair in batch]

            # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á
            batch_results = await asyncio.gather(*tasks, return_exceptions=True)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in batch_results:
                if isinstance(result, Exception):
                    logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∞—Ä—ã: {result}")
                else:
                    all_results.append(result)

            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            progress = min(i + batch_size, len(pairs))
            logger.info(f"‚è≥ –ü–†–û–ì–†–ï–°–°: {progress}/{len(pairs)} –ø–∞—Ä –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(0.2)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ (LONG –∏–ª–∏ SHORT)
        pairs_with_signals = [
            result for result in all_results
            if result['signal'] in ['LONG', 'SHORT']
        ]

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        signal_counts = {'LONG': 0, 'SHORT': 0, 'NO_SIGNAL': 0}
        for result in all_results:
            signal = result['signal']
            if signal in signal_counts:
                signal_counts[signal] += 1
            else:
                signal_counts['NO_SIGNAL'] += 1

        execution_time = time.time() - start_time

        logger.info(f"‚úÖ –≠–¢–ê–ü –ó–ê–í–ï–†–®–ï–ù: –ù–∞–π–¥–µ–Ω–æ {len(pairs_with_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ {execution_time:.1f}—Å–µ–∫")

        return {
            'success': True,
            'pairs_data': pairs_with_signals,  # –¢–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
            'all_pairs_data': all_results,  # –í—Å–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
            'signal_counts': signal_counts,
            'total_pairs_checked': len(all_results),
            'execution_time': execution_time
        }


def load_prompt_from_file(filename: str = 'prompt.txt') -> str:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
    """
    try:
        logger.info(f"üìÑ –≠–¢–ê–ü: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ {filename}")
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read().strip()
        logger.info("‚úÖ –≠–¢–ê–ü –ó–ê–í–ï–†–®–ï–ù: –ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return content
    except FileNotFoundError:
        logger.error(f"‚ùå –≠–¢–ê–ü –ü–†–û–í–ê–õ–ï–ù: –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ""
    except Exception as e:
        logger.error(f"‚ùå –≠–¢–ê–ü –ü–†–û–í–ê–õ–ï–ù: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename} - {str(e)}")
        return ""


def create_ai_message(base_prompt: str, pair_info: Dict[str, Any]) -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ò–ò
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–∏–≥–Ω–∞–ª–∞
    details = pair_info['details']

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analysis_header = f"""=== –î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê ===
–¢–û–†–ì–û–í–ê–Ø –ü–ê–†–ê: {pair_info['pair']}
–¢–ò–ü –°–ò–ì–ù–ê–õ–ê: {pair_info['signal']} ({details['reason']})
–¢–ï–ö–£–©–ê–Ø –¶–ï–ù–ê: {details['last_price']:.6f}
–¢–ê–ô–ú–§–†–ï–ô–ú: 15 –º–∏–Ω—É—Ç
–ö–û–õ–ò–ß–ï–°–¢–í–û –°–í–ï–ß–ï–ô: {len(pair_info['candles'])}
–†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï EMA: {details['ema_alignment']}
–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï TSI: {details['tsi_crossover_direction']}
"""

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    indicators_section = f"""=== –ó–ù–ê–ß–ï–ù–ò–Ø –ò–ù–î–ò–ö–ê–¢–û–†–û–í ===
EMA7 (—Ç–µ–∫—É—â–µ–µ): {details['ema1']:.6f}
EMA14 (—Ç–µ–∫—É—â–µ–µ): {details['ema2']:.6f} 
EMA28 (—Ç–µ–∫—É—â–µ–µ): {details['ema3']:.6f}
TSI (—Ç–µ–∫—É—â–µ–µ): {details['tsi_value']:.2f}
TSI Signal (—Ç–µ–∫—É—â–µ–µ): {details['tsi_signal_value']:.2f}

EMA7 VALUES: {pair_info['indicators']['ema1_values']}
EMA14 VALUES: {pair_info['indicators']['ema2_values']}
EMA28 VALUES: {pair_info['indicators']['ema3_values']}
TSI VALUES: {pair_info['indicators']['tsi_values']}
TSI SIGNAL VALUES: {pair_info['indicators']['tsi_signal_values']}
"""

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    candles_section = f"""=== –°–í–ï–ß–ù–û–ô –ì–†–ê–§–ò–ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(pair_info['candles'])} —Å–≤–µ—á–µ–π) ===
–§–æ—Ä–º–∞—Ç: [timestamp, open, high, low, close, volume, turnover]
{json.dumps(pair_info['candles'], indent=2)}
"""

    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    full_message = f"""{base_prompt}

{analysis_header}

{indicators_section}

{candles_section}
"""

    return full_message


def write_ai_response_to_file(pair_info: Dict[str, Any], ai_response: str):
    """
    –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ —Ñ–∞–π–ª —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    """
    try:
        with open('ai_responses.log', 'a', encoding='utf-8') as f:
            f.write(f"\n{'=' * 80}\n")
            f.write(
                f"–ü–ê–†–ê: {pair_info['pair']} | –°–ò–ì–ù–ê–õ: {pair_info['signal']} | –í–†–ï–ú–Ø: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"{'=' * 80}\n")
            f.write(f"{ai_response}\n")

            # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
            f.flush()

        logger.info(f"‚úÖ –ü–û–î–≠–¢–ê–ü –ó–ê–í–ï–†–®–ï–ù: {pair_info['pair']} - –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –¥–ª—è {pair_info['pair']}: {str(e)}")


async def process_pairs_with_ai(pairs_data: List[Dict[str, Any]]):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    """
    try:
        logger.info("ü§ñ –≠–¢–ê–ü: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
        base_prompt = load_prompt_from_file('prompt.txt')

        if not base_prompt:
            logger.error("‚ùå –≠–¢–ê–ü –ü–†–û–í–ê–õ–ï–ù: –ü—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ò–ò")
            return

        logger.info(f"üîÑ –≠–¢–ê–ü: –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(pairs_data)} –ø–∞—Ä –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
        for i, pair_info in enumerate(pairs_data, 1):
            try:
                logger.info(f"üì§ –ü–û–î–≠–¢–ê–ü: –û—Ç–ø—Ä–∞–≤–∫–∞ {i}/{len(pairs_data)} - {pair_info['pair']} ({pair_info['signal']})")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
                if not pair_info.get('candles') or not pair_info.get('indicators'):
                    logger.warning(f"‚ö†Ô∏è –ü–û–î–≠–¢–ê–ü –ü–†–û–ü–£–©–ï–ù: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pair_info['pair']}")
                    continue

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                ai_message = create_ai_message(base_prompt, pair_info)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
                ai_response = await deep_seek(ai_message)

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å flush
                write_ai_response_to_file(pair_info, ai_response)

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(2)

            except Exception as e:
                logger.error(f"‚ùå –ü–û–î–≠–¢–ê–ü –ü–†–û–í–ê–õ–ï–ù: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {pair_info['pair']} - {str(e)}")
                continue

        logger.info("‚úÖ –≠–¢–ê–ü –ó–ê–í–ï–†–®–ï–ù: –í—Å–µ –ø–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é")

    except Exception as e:
        logger.error(f"‚ùå –≠–¢–ê–ü –ü–†–û–í–ê–õ–ï–ù: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò - {str(e)}")


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ EMA+TSI –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    """
    try:
        logger.info("üöÄ –°–¢–ê–†–¢: –ó–∞–ø—É—Å–∫ EMA+TSI —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")

        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        analyzer = TradingSignalAnalyzer(
            ema1_period=7,  # –ë—ã—Å—Ç—Ä–∞—è EMA
            ema2_period=14,  # –°—Ä–µ–¥–Ω—è—è EMA
            ema3_period=28,  # –ú–µ–¥–ª–µ–Ω–Ω–∞—è EMA
            tsi_long=12,  # –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ TSI
            tsi_short=6,  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ TSI
            tsi_signal=6  # –ü–µ—Ä–∏–æ–¥ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ TSI
        )

        logger.info(
            f"‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò: EMA({analyzer.ema1_period},{analyzer.ema2_period},{analyzer.ema3_period}) | TSI({analyzer.tsi_long},{analyzer.tsi_short},{analyzer.tsi_signal})")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        result = await analyzer.analyze_all_pairs()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result['success']:
            logger.info("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            signal_counts = result['signal_counts']
            total_signals = signal_counts['LONG'] + signal_counts['SHORT']

            logger.info(
                f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: {total_signals} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {result['total_pairs_checked']} –ø–∞—Ä –∑–∞ {result['execution_time']:.1f}—Å–µ–∫")
            logger.info(f"üìà LONG: {signal_counts['LONG']} | üìâ SHORT: {signal_counts['SHORT']}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if result['pairs_data']:
                logger.info("üéØ –ù–ê–ô–î–ï–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´:")
                for pair_data in result['pairs_data']:
                    signal_emoji = "üìà" if pair_data['signal'] == 'LONG' else "üìâ"
                    logger.info(f"{signal_emoji} {pair_data['pair']}: {pair_data['details']['last_price']:.6f}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
                await process_pairs_with_ai(result['pairs_data'])

            else:
                logger.info("üîç –†–ï–ó–£–õ–¨–¢–ê–¢: –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        else:
            logger.error(f"‚ùå –§–ò–ù–ê–õ: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π - {result.get('message', 'Unknown error')}")

    except KeyboardInterrupt:
        logger.info("üõë –ü–†–ï–†–´–í–ê–ù–ò–ï: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())


if __name__ == "__main__":
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
    """
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()