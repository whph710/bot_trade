"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã–π –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π multiple AI providers
–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù –°: Enhanced Validator, Market Data, Correlations, Volume Profile, AI Advanced
"""

import asyncio
import logging
import time
import json
from datetime import datetime
from typing import List, Dict, Any, Optional

from config import config, has_ai_available
from func_async import get_trading_pairs, fetch_klines, batch_fetch_klines, cleanup as cleanup_api, get_optimized_session
from func_trade import calculate_basic_indicators, calculate_ai_indicators, check_basic_signal
from ai_router import ai_router

# –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´
from func_enhanced_validator import (
    EnhancedSignalValidator,
    validate_signals_batch,
    batch_quick_market_check,
    get_validation_statistics
)

# –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)


class DataCache:
    """–ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self):
        self.klines_cache = {}
        self.indicators_cache = {}

    def cache_klines(self, symbol: str, interval: str, klines: List):
        """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if symbol not in self.klines_cache:
            self.klines_cache[symbol] = {}
        self.klines_cache[symbol][interval] = klines

    def get_klines(self, symbol: str, interval: str, limit: int) -> Optional[List]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–µ–∑–∫–æ–π –ø–æ –ª–∏–º–∏—Ç—É"""
        cached = self.klines_cache.get(symbol, {}).get(interval)
        if cached and len(cached) >= limit:
            return cached[-limit:]
        return None

    def cache_indicators(self, symbol: str, interval: str, indicators: Dict):
        """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        if symbol not in self.indicators_cache:
            self.indicators_cache[symbol] = {}
        self.indicators_cache[symbol][interval] = indicators

    def get_indicators(self, symbol: str, interval: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        return self.indicators_cache.get(symbol, {}).get(interval)

    def clear(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞"""
        self.klines_cache.clear()
        self.indicators_cache.clear()

    def clear_symbol(self, symbol: str):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        if symbol in self.klines_cache:
            del self.klines_cache[symbol]
        if symbol in self.indicators_cache:
            del self.indicators_cache[symbol]


class OptimizedScalpingBot:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã–π –±–æ—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""

    def __init__(self):
        self.processed_pairs = 0
        self.session_start = time.time()
        self.cache = DataCache()
        self.validation_data = {}
        self.enhanced_validator = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∂–µ

    async def initialize_validator(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
        if not self.enhanced_validator:
            session = await get_optimized_session()
            self.enhanced_validator = EnhancedSignalValidator(session, ai_router)
            logger.info("‚úÖ Enhanced validator initialized")

    def validate_klines_data(self, klines: List, min_length: int = 10) -> bool:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not klines or len(klines) < min_length:
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–≤–µ—á–∏ –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü
            for i, candle in enumerate(klines[:3]):
                if not isinstance(candle, list) or len(candle) < 6:
                    logger.debug(f"–°–≤–µ—á–∞ {i} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                    return False

                try:
                    timestamp = int(candle[0])
                    open_price = float(candle[1])
                    high_price = float(candle[2])
                    low_price = float(candle[3])
                    close_price = float(candle[4])
                    volume = float(candle[5])

                    if any(price <= 0 for price in [open_price, high_price, low_price, close_price]):
                        return False

                    if high_price < max(open_price, close_price) or low_price > min(open_price, close_price):
                        return False

                    if volume < 0:
                        return False

                except (ValueError, IndexError):
                    return False

            return True

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    async def load_initial_data(self, pairs: List[str]) -> Dict[str, bool]:
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(pairs)} –ø–∞—Ä...")

        requests = []
        for pair in pairs:
            requests.extend([
                {'symbol': pair, 'interval': '15', 'limit': max(config.AI_BULK_15M, config.FINAL_15M)},
                {'symbol': pair, 'interval': '5', 'limit': config.FINAL_5M}
            ])

        results = await batch_fetch_klines(requests)

        loaded_pairs = set()
        for result in results:
            if result.get('success') and result.get('klines'):
                symbol = result['symbol']
                klines = result['klines']

                if not self.validate_klines_data(klines, 15):
                    continue

                if len(klines) >= 100:
                    self.cache.cache_klines(symbol, '5', klines)
                else:
                    self.cache.cache_klines(symbol, '15', klines)
                loaded_pairs.add(symbol)

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ {len(loaded_pairs)} –ø–∞—Ä–∞–º")
        return {pair: pair in loaded_pairs for pair in pairs}

    def calculate_and_cache_indicators(self, symbol: str, interval: str, klines: List, history_length: int) -> Optional[Dict]:
        """–†–∞—Å—á–µ—Ç –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        cached = self.cache.get_indicators(symbol, interval)
        if cached:
            return cached

        if not self.validate_klines_data(klines, 20):
            return None

        try:
            if history_length > 20:
                indicators = calculate_ai_indicators(klines, history_length)
            else:
                indicators = calculate_basic_indicators(klines)

            if indicators:
                self.cache.cache_indicators(symbol, interval, indicators)

            return indicators
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol} {interval}: {e}")
            return None

    def calculate_fresh_indicators(self, symbol: str, interval: str, klines: List, history_length: int) -> Optional[Dict]:
        """–†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ë–ï–ó –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö)"""
        if not self.validate_klines_data(klines, 20):
            return None

        try:
            if history_length > 20:
                indicators = calculate_ai_indicators(klines, history_length)
            else:
                indicators = calculate_basic_indicators(klines)

            return indicators
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–≤–µ–∂–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol} {interval}: {e}")
            return None

    async def stage1_filter_signals(self) -> List[Dict]:
        """–≠–¢–ê–ü 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ + QUICK MARKET CHECKS"""
        start_time = time.time()
        logger.info("=" * 60)
        logger.info("–≠–¢–ê–ü 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ + Quick Checks")
        logger.info("=" * 60)

        pairs = await get_trading_pairs()
        if not pairs:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
            return []

        # –ù–û–í–û–ï: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ market conditions
        logger.info(f"üìä –í—ã–ø–æ–ª–Ω—è–µ–º quick market checks –¥–ª—è {len(pairs)} –ø–∞—Ä...")
        session = await get_optimized_session()
        quick_checks = await batch_quick_market_check(session, pairs[:200], max_concurrent=20)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ tradeable –ø–∞—Ä—ã
        tradeable_pairs = [p for p, check in quick_checks.items() if check.get('tradeable', False)]
        filtered_out = len(quick_checks) - len(tradeable_pairs)

        logger.info(f"‚úÖ Quick checks: {len(tradeable_pairs)} tradeable, {filtered_out} filtered out")

        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è tradeable –ø–∞—Ä
        loaded_data = await self.load_initial_data(tradeable_pairs)
        available_pairs = [pair for pair, loaded in loaded_data.items() if loaded]

        pairs_with_signals = []
        processed = 0
        errors = 0

        logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(available_pairs)} –ø–∞—Ä...")

        for symbol in available_pairs:
            klines_15m = self.cache.get_klines(symbol, '15', config.QUICK_SCAN_15M)
            if not klines_15m or not self.validate_klines_data(klines_15m, 20):
                errors += 1
                continue

            try:
                indicators = self.calculate_and_cache_indicators(symbol, '15', klines_15m, 20)
                if not indicators:
                    errors += 1
                    continue

                signal_check = check_basic_signal(indicators)
                if signal_check['signal'] and signal_check['confidence'] >= config.MIN_CONFIDENCE:
                    pair_data = {
                        'symbol': symbol,
                        'confidence': signal_check['confidence'],
                        'direction': signal_check['direction'],
                        'base_indicators': indicators
                    }
                    pairs_with_signals.append(pair_data)

                processed += 1

            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
                errors += 1
                continue

        pairs_with_signals.sort(key=lambda x: x['confidence'], reverse=True)

        elapsed = time.time() - start_time
        self.processed_pairs = processed

        logger.info(f"‚úÖ –≠–¢–ê–ü 1 –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f}—Å")
        logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed} –ø–∞—Ä")
        logger.info(f"   –°–∏–≥–Ω–∞–ª—ã: {len(pairs_with_signals)}")
        logger.info(f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {filtered_out}")
        logger.info(f"   –û—à–∏–±–∫–∏: {errors}")

        return pairs_with_signals

    async def stage2_ai_bulk_select(self, signal_pairs: List[Dict]) -> List[str]:
        """–≠–¢–ê–ü 2: AI –æ—Ç–±–æ—Ä –ø–∞—Ä"""
        start_time = time.time()
        logger.info("=" * 60)
        logger.info(f"–≠–¢–ê–ü 2: AI –∞–Ω–∞–ª–∏–∑ {len(signal_pairs)} –ø–∞—Ä")
        logger.info("=" * 60)

        if not signal_pairs:
            return []

        ai_input_data = []
        preparation_errors = 0

        for pair_data in signal_pairs:
            symbol = pair_data['symbol']

            try:
                candles_15m = self.cache.get_klines(symbol, '15', config.AI_BULK_15M)
                if not candles_15m or not self.validate_klines_data(candles_15m, 20):
                    preparation_errors += 1
                    continue

                indicators_15m = self.calculate_and_cache_indicators(
                    symbol, '15', candles_15m, config.AI_INDICATORS_HISTORY
                )
                if not indicators_15m:
                    preparation_errors += 1
                    continue

                pair_ai_data = {
                    'symbol': symbol,
                    'confidence': pair_data['confidence'],
                    'direction': pair_data['direction'],
                    'candles_15m': candles_15m,
                    'indicators_15m': indicators_15m
                }
                ai_input_data.append(pair_ai_data)

            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                preparation_errors += 1
                continue

        if not ai_input_data:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞")
            return []

        logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(ai_input_data)} –ø–∞—Ä –≤ AI (–æ—à–∏–±–æ–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {preparation_errors})")

        selected_pairs = await ai_router.select_pairs(ai_input_data)

        elapsed = time.time() - start_time
        logger.info(f"‚úÖ –≠–¢–ê–ü 2 –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f}—Å")
        logger.info(f"   –í—ã–±—Ä–∞–Ω–æ: {len(selected_pairs)} –ø–∞—Ä")

        return selected_pairs

    async def stage3_detailed_analysis(self, selected_pairs: List[str]) -> List[Dict]:
        """–≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–û–ô —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        start_time = time.time()
        logger.info("=" * 60)
        logger.info(f"–≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {len(selected_pairs)} –ø–∞—Ä (–°–í–ï–ñ–ò–ï –î–ê–ù–ù–´–ï)")
        logger.info("=" * 60)

        if not selected_pairs:
            return []

        final_signals = []

        for symbol in selected_pairs:
            try:
                logger.debug(f"üì• {symbol}: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
                self.cache.clear_symbol(symbol)

                klines_5m = await fetch_klines(symbol, '5', config.FINAL_5M)
                klines_15m = await fetch_klines(symbol, '15', config.FINAL_15M)

                if not klines_5m or not klines_15m:
                    logger.warning(f"{symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ")
                    continue

                if not self.validate_klines_data(klines_5m, 20) or not self.validate_klines_data(klines_15m, 20):
                    logger.warning(f"{symbol}: –°–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                    continue

                logger.debug(f"üî¢ {symbol}: –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
                indicators_5m = self.calculate_fresh_indicators(symbol, '5', klines_5m, config.FINAL_INDICATORS)
                indicators_15m = self.calculate_fresh_indicators(symbol, '15', klines_15m, config.FINAL_INDICATORS)

                if not indicators_5m or not indicators_15m:
                    logger.warning(f"{symbol}: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
                    continue

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                self.validation_data[symbol] = {
                    'klines_5m': klines_5m[-100:],
                    'klines_15m': klines_15m[-50:],
                    'indicators_5m': indicators_5m,
                    'indicators_15m': indicators_15m,
                    'data_timestamp': datetime.now().isoformat(),
                    'data_freshness': 'FRESH'
                }

                logger.debug(f"ü§ñ {symbol}: AI –∞–Ω–∞–ª–∏–∑...")
                analysis = await ai_router.analyze_pair(symbol, klines_5m, klines_15m, indicators_5m, indicators_15m)

                if analysis['signal'] != 'NO_SIGNAL' and analysis['confidence'] >= config.MIN_CONFIDENCE:
                    analysis['data_freshness'] = 'FRESH'
                    analysis['data_timestamp'] = datetime.now().isoformat()
                    final_signals.append(analysis)
                    logger.info(f"‚úÖ {symbol}: {analysis['signal']} {analysis['confidence']}% (FRESH DATA)")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                continue

        elapsed = time.time() - start_time
        logger.info(f"‚úÖ –≠–¢–ê–ü 3 –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f}—Å")
        logger.info(f"   –°–∏–≥–Ω–∞–ª—ã: {len(final_signals)}")

        return final_signals

    async def stage4_final_validation(self, preliminary_signals: List[Dict]) -> Dict[str, List[Dict]]:
        """–≠–¢–ê–ü 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –†–ê–°–®–ò–†–ï–ù–ù–´–ú–ò –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        start_time = time.time()
        logger.info("=" * 60)
        logger.info(f"–≠–¢–ê–ü 4: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è {len(preliminary_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        logger.info("=" * 60)

        if not preliminary_signals:
            return {'validated': [], 'rejected': []}

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
            await self.initialize_validator()

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            candles_data = {}
            for signal in preliminary_signals:
                symbol = signal['symbol']
                if symbol in self.validation_data:
                    candles_data[symbol] = {
                        '1h': self.validation_data[symbol]['klines_5m'],
                        '4h': self.validation_data[symbol]['klines_15m']
                    }

            # –ó–∞–≥—Ä—É–∂–∞–µ–º BTC –¥–∞–Ω–Ω—ã–µ
            logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ BTC –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            btc_candles_1h = await fetch_klines('BTCUSDT', '5', 168)

            # –ü–∞–∫–µ—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            logger.info("üîç –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
            validation_result = await validate_signals_batch(
                self.enhanced_validator,
                preliminary_signals,
                candles_data,
                btc_candles_1h,
                None  # sector_candles –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            )

            validated_signals = validation_result['validated']
            rejected_signals = validation_result['rejected']

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            all_results = [s.get('validation', {}) for s in validated_signals]
            stats = get_validation_statistics(all_results)

            elapsed = time.time() - start_time
            logger.info(f"‚úÖ –≠–¢–ê–ü 4 –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f}—Å")
            logger.info(f"   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {len(validated_signals)}")
            logger.info(f"   –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {len(rejected_signals)}")
            logger.info(f"   Approval rate: {stats['approval_rate']}%")
            logger.info(f"   Avg confidence change: {stats['avg_confidence_change']:+.1f}")

            return {
                'validated': validated_signals,
                'rejected': rejected_signals,
                'validation_stats': stats
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return {'validated': [], 'rejected': []}

    async def run_full_cycle(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        cycle_start = time.time()

        logger.info("=" * 80)
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –ê–ù–ê–õ–ò–ó–ê")
        logger.info("=" * 80)

        # –°—Ç–∞—Ç—É—Å AI
        ai_status = ai_router.get_status()
        logger.info(f"ü§ñ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {[k for k, v in ai_status['providers_available'].items() if v]}")
        logger.info(f"üìä –≠—Ç–∞–ø—ã: –æ—Ç–±–æ—Ä-{ai_status['effective_providers']['selection']}, "
                    f"–∞–Ω–∞–ª–∏–∑-{ai_status['effective_providers']['analysis']}, "
                    f"–≤–∞–ª–∏–¥–∞—Ü–∏—è-{ai_status['effective_providers']['validation']}")

        try:
            self.cache.clear()

            # –≠–¢–ê–ü 1
            signal_pairs = await self.stage1_filter_signals()
            if not signal_pairs:
                return {
                    'result': 'NO_SIGNAL_PAIRS',
                    'total_time': time.time() - cycle_start,
                    'pairs_scanned': self.processed_pairs,
                    'message': '–ù–µ—Ç –ø–∞—Ä —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏'
                }

            # –≠–¢–ê–ü 2
            selected_pairs = await self.stage2_ai_bulk_select(signal_pairs)
            if not selected_pairs:
                return {
                    'result': 'NO_AI_SELECTION',
                    'total_time': time.time() - cycle_start,
                    'signal_pairs': len(signal_pairs),
                    'pairs_scanned': self.processed_pairs,
                    'message': 'AI –Ω–µ –≤—ã–±—Ä–∞–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä'
                }

            # –≠–¢–ê–ü 3
            preliminary_signals = await self.stage3_detailed_analysis(selected_pairs)
            if not preliminary_signals:
                return {
                    'result': 'NO_PRELIMINARY_SIGNALS',
                    'total_time': time.time() - cycle_start,
                    'pairs_scanned': self.processed_pairs,
                    'signal_pairs': len(signal_pairs),
                    'ai_selected': len(selected_pairs),
                    'message': '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã—è–≤–∏–ª –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤'
                }

            # –≠–¢–ê–ü 4
            validation_result = await self.stage4_final_validation(preliminary_signals)
            validated_signals = validation_result['validated']
            rejected_signals = validation_result['rejected']

            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            total_time = time.time() - cycle_start
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

            if validated_signals:
                result_type = 'SUCCESS'
            elif rejected_signals:
                result_type = 'NO_VALIDATED_SIGNALS_WITH_REJECTED'
            else:
                result_type = 'NO_VALIDATED_SIGNALS'

            final_result = {
                'timestamp': timestamp,
                'result': result_type,
                'total_time': round(total_time, 2),
                'ai_status': ai_status,
                'data_freshness': 'STAGE3_FRESH_DATA',
                'stats': {
                    'pairs_scanned': self.processed_pairs,
                    'signal_pairs_found': len(signal_pairs),
                    'ai_selected': len(selected_pairs),
                    'preliminary_signals': len(preliminary_signals),
                    'validated_signals': len(validated_signals),
                    'rejected_signals': len(rejected_signals),
                    'processing_speed': round(self.processed_pairs / total_time, 1) if total_time > 0 else 0
                },
                'validated_signals': validated_signals,
                'rejected_signals': rejected_signals if rejected_signals else None,
                'validation_stats': validation_result.get('validation_stats', {}),
                'ai_providers': ai_status['providers_available']
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            filename = f'bot_result_{timestamp}.json'
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(final_result, f, indent=2, ensure_ascii=False, default=str)

            logger.info("=" * 80)
            logger.info(f"‚úÖ –¶–ò–ö–õ –ó–ê–í–ï–†–®–ï–ù: {self.processed_pairs}->{len(signal_pairs)}->{len(selected_pairs)}->{len(preliminary_signals)}->{len(validated_signals)}")
            logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è: {total_time:.1f}—Å, —Å–∫–æ—Ä–æ—Å—Ç—å: {self.processed_pairs/total_time:.0f} –ø–∞—Ä/—Å–µ–∫")
            logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            logger.info("=" * 80)

            return final_result

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return {
                'result': 'ERROR',
                'error': str(e),
                'total_time': time.time() - cycle_start
            }

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.cache.clear()
        await cleanup_api()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 80)
    print("üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –°–ö–ê–õ–¨–ü–ò–ù–ì–û–í–´–ô –ë–û–¢ v3.0 (ENHANCED VALIDATION)")
    print("=" * 80)
    print(f"–ó–∞–ø—É—Å–∫: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    ai_status = ai_router.get_status()
    print(f"ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ AI: {[k for k, v in ai_status['providers_available'].items() if v]}")
    print(f"üìä –≠—Ç–∞–ø—ã: {ai_status['effective_providers']['selection']}/{ai_status['effective_providers']['analysis']}/{ai_status['effective_providers']['validation']}")
    print("=" * 80)
    print("‚ú® –ù–û–í–û–ï: Enhanced Validator —Å Market Data + Correlations + Volume Profile + AI Advanced")
    print("=" * 80)
    print()

    bot = OptimizedScalpingBot()

    try:
        result = await bot.run_full_cycle()

        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥
        print()
        print("=" * 80)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {result['result']}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {result.get('total_time', 0):.1f}—Å–µ–∫")
        print(f"üîç –°–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: {result.get('data_freshness', 'UNKNOWN')}")
        print("=" * 80)

        if 'stats' in result:
            s = result['stats']
            print(f"\nüìà –ü–∞–π–ø–ª–∞–π–Ω: {s['pairs_scanned']}->{s['signal_pairs_found']}->{s['ai_selected']}->{s['preliminary_signals']}->{s['validated_signals']}")
            print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {s['processing_speed']} –ø–∞—Ä/—Å–µ–∫")

        if 'validation_stats' in result and result['validation_stats']:
            vs = result['validation_stats']
            print(f"\nüéØ –í–∞–ª–∏–¥–∞—Ü–∏—è:")
            print(f"   Approval rate: {vs.get('approval_rate', 0)}%")
            print(f"   Avg confidence change: {vs.get('avg_confidence_change', 0):+.1f}")

        if result.get('validated_signals'):
            print(f"\n‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´ ({len(result['validated_signals'])}):")
            for signal in result['validated_signals']:
                rr = signal.get('risk_reward_ratio', 'N/A')
                duration = signal.get('hold_duration_minutes', 'N/A')
                confidence = signal.get('confidence', 0)
                orig_conf = signal.get('original_confidence', confidence)
                adjustment = confidence - orig_conf
                freshness = signal.get('data_freshness', 'UNKNOWN')
                print(f"  {signal['symbol']}: {signal['signal']} ({orig_conf}‚Üí{confidence}% {adjustment:+d}) R/R:1:{rr} {duration}–º–∏–Ω [{freshness}]")

        elif result.get('rejected_signals'):
            rejected = result['rejected_signals']
            print(f"\n‚ùå –û–¢–ö–õ–û–ù–ï–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´ ({len(rejected)}):")
            for signal in rejected[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
                entry = signal.get('entry_price', 0)
                confidence = signal.get('confidence', 0)
                freshness = signal.get('data_freshness', 'UNKNOWN')
                reason = signal.get('rejection_reason', 'Unknown')
                print(f"  {signal['symbol']}: {signal['signal']} ({confidence}%) [{freshness}]")
                print(f"    –í—Ö–æ–¥: {entry:.6f} | –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        else:
            print("\n‚ö†Ô∏è  –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        print("\n" + "=" * 80)

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
    finally:
        await bot.cleanup()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")