"""
Main Entry Point - Orchestrator –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Telegram –±–æ—Ç–æ–º
"""

import asyncio
import sys
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É —Å –±–æ—Ç–æ–º –≤ PATH
BOT_DIR = Path(__file__).parent / "trade_bot_programm"
sys.path.insert(0, str(BOT_DIR))

from logging_config import setup_module_logger
from utils import save_bot_result, print_bot_result, cleanup_old_results

logger = setup_module_logger(__name__)


async def run_trading_bot_cycle():
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
    """
    try:
        from bot_runner import run_trading_bot

        logger.info("Bot cycle initialization started")

        result = await run_trading_bot()

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print_bot_result(result)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª
        saved_path = save_bot_result(result, output_dir="bot_results")

        if saved_path:
            logger.info(f"Result saved: {saved_path}")

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        cleanup_old_results(results_dir="bot_results", keep_last=10)

        return result

    except Exception as e:
        logger.error(f"Critical cycle error: {e}", exc_info=True)
        return {
            'result': 'ERROR',
            'error': str(e),
            'stats': {}
        }


async def run_telegram_bot():
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞
    """
    try:
        from telegram_bot.telegram_bot_main import run_telegram_bot

        logger.info("Starting Telegram Bot...")
        await run_telegram_bot()

    except Exception as e:
        logger.error(f"Telegram bot error: {e}", exc_info=True)


async def main_single_cycle():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    result = await run_trading_bot_cycle()
    return result


async def main_telegram():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞"""
    await run_telegram_bot()


def parse_arguments():
    """–ü–∞—Ä—Å–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='Trading Bot with Telegram')
    parser.add_argument(
        'mode',
        nargs='?',
        default='telegram',
        choices=['telegram', 'once'],
        help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: telegram (—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º) –∏–ª–∏ once (–æ–¥–∏–Ω —Ü–∏–∫–ª)'
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_arguments()

    try:
        if args.mode == 'once':
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
            logger.info("üöÄ Running trading bot ONCE")
            result = asyncio.run(main_single_cycle())

            if result.get('result') in ['SUCCESS', 'NO_VALIDATED_SIGNALS']:
                sys.exit(0)
            else:
                sys.exit(1)

        else:  # telegram mode (default)
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
            logger.info("ü§ñ Starting Telegram Bot with schedule")
            asyncio.run(main_telegram())

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Bot stopped by user")
        sys.exit(0)

    except Exception as e:
        logger.error(f"Fatal error: {e}", exc_info=True)
        sys.exit(1)