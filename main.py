import asyncio
import json
import logging
import time
import math
import numpy as np
from typing import List, Dict, Any, Optional
from dataclasses import dataclass, asdict
import re
import datetime

# –ò–ú–ü–û–†–¢–´ –ö–û–¢–û–†–´–ï –ù–ï–õ–¨–ó–Ø –ú–ï–ù–Ø–¢–¨
from func_async import get_klines_async, get_usdt_trading_pairs, filter_high_volume_pairs
from deepseek import deep_seek_selection, deep_seek_analysis, cleanup_http_client

# –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ (–∑–∞–º–µ–Ω—è—é—Ç —Å—Ç–∞—Ä—ã–µ –∏–∑ func_trade)
from func_trade import detect_scalping_signal, calculate_scalping_indicators

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scalping_5m_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø 5M –°–ö–ê–õ–¨–ü–ò–ù–ì–ê
SCALPING_CONFIG = {
    'candles_for_scan': 40,  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è 5M (40 —Å–≤–µ—á–µ–π = 3.3 —á–∞—Å–∞)
    'candles_for_analysis': 20,  # –î–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞ –ò–ò (20 —Å–≤–µ—á–µ–π = 1.7 —á–∞—Å–∞)
    'candles_for_detailed': 100,  # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (100 —Å–≤–µ—á–µ–π = 8.3 —á–∞—Å–∞)
    'batch_size': 30,  # –£–º–µ–Ω—å—à–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
    'min_confidence': 80,  # –ü–û–í–´–®–ï–ù –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ 5M —Å–∏–≥–Ω–∞–ª–æ–≤
    'max_pairs_to_ai': 8,  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    'min_volume_24h': 100_000_000,  # –ú–∏–Ω–∏–º—É–º $100M –æ–±–æ—Ä–æ—Ç–∞
    'forbidden_hours': [22, 23, 0, 1, 2, 3, 4],  # –ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å UTC (—Å–æ–∫—Ä–∞—â–µ–Ω–æ)
}


def clean_value(value):
    """–û—á–∏—Å—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç NaN, Infinity –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–º —Ç–∏–ø–∞–º"""
    if isinstance(value, (np.integer, np.floating)):
        value = float(value)
    elif isinstance(value, np.bool_):
        return bool(value)
    elif isinstance(value, np.ndarray):
        return [clean_value(x) for x in value.tolist()]

    if isinstance(value, float):
        if math.isnan(value) or math.isinf(value):
            return 0.0
        return value
    elif isinstance(value, dict):
        return {k: clean_value(v) for k, v in value.items()}
    elif isinstance(value, list):
        return [clean_value(item) for item in value]
    else:
        return value


def safe_json_serialize(obj: Any) -> Any:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NaN"""
    return clean_value(obj)


@dataclass
class ScalpingSignal:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    pair: str
    signal_type: str  # 'LONG', 'SHORT', 'NO_SIGNAL'
    confidence: int
    entry_price: float
    timestamp: int

    # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è 5M
    quality_score: int
    volatility_regime: str
    volume_confirmed: bool
    momentum_strength: int
    entry_reasons: List[str]

    # –î–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞
    candles_data: List = None
    indicators_data: Dict = None


class Extreme5MAnalyzer:
    """–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç"""

    def __init__(self):
        self.session_start = time.time()
        logger.info("üöÄ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô 5M –°–ö–ê–õ–¨–ü–ò–ù–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ó–ê–ü–£–©–ï–ù")
        logger.info("‚ö° –¶–ï–õ–¨: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –ü–†–û–§–ò–¢ –ù–ê 5-–ú–ò–ù–£–¢–ù–´–• –°–í–ï–ß–ê–•")

    def is_trading_hours(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Å–æ–≤ (–±–æ–ª–µ–µ –≥–∏–±–∫–∞—è –¥–ª—è 5M)"""
        current_hour = datetime.datetime.utcnow().hour
        return current_hour not in SCALPING_CONFIG['forbidden_hours']

    async def quick_scan_pair(self, symbol: str) -> Optional[ScalpingSignal]:
        """–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –ø–∞—Ä—ã –¥–ª—è 5M"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            candles = await get_klines_async(
                symbol,
                interval="5",  # 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
                limit=SCALPING_CONFIG['candles_for_scan']
            )

            if not candles or len(candles) < 25:
                return None

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            signal_result = detect_scalping_signal(candles)

            if signal_result['signal'] == 'NO_SIGNAL':
                return None

            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–Ω–∞—á–µ–Ω–∏–π
            try:
                entry_price = float(candles[-1][4])
                confidence = int(signal_result['confidence'])
                quality_score = int(signal_result.get('quality_score', 0))
                momentum_strength = int(signal_result.get('momentum_strength', 0))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                if math.isnan(entry_price) or math.isnan(confidence):
                    logger.warning(f"‚ùå NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ {symbol}")
                    return None

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è 5M
                if confidence < SCALPING_CONFIG['min_confidence']:
                    return None

            except (ValueError, TypeError) as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π {symbol}: {e}")
                return None

            return ScalpingSignal(
                pair=symbol,
                signal_type=signal_result['signal'],
                confidence=confidence,
                entry_price=entry_price,
                timestamp=int(time.time()),
                quality_score=quality_score,
                volatility_regime=signal_result.get('volatility_regime', 'MEDIUM'),
                volume_confirmed=bool(signal_result.get('indicators', {}).get('volume_spike', False)),
                momentum_strength=momentum_strength,
                entry_reasons=signal_result.get('entry_reasons', []),
                candles_data=candles[-SCALPING_CONFIG['candles_for_analysis']:],
                indicators_data=clean_value(signal_result.get('indicators', {}))
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}: {e}")
            return None

    async def mass_scan_markets(self) -> List[ScalpingSignal]:
        """–ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        # if not self.is_trading_hours():
        #     logger.warning("‚è∞ –ù–µ—Ç–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        #     return []

        start_time = time.time()
        logger.info("üîç –≠–¢–ê–ü 1: –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï 5M –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
            all_pairs = await get_usdt_trading_pairs()
            if not all_pairs:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä")
                return []

            # –ù–û–í–ò–ù–ö–ê: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–º—É
            high_volume_pairs = await filter_high_volume_pairs(all_pairs, SCALPING_CONFIG['min_volume_24h'])

            if not high_volume_pairs:
                logger.error("‚ùå –ù–µ—Ç –≤—ã—Å–æ–∫–æ–ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä")
                return []

            logger.info(f"üìä –°–∫–∞–Ω–∏—Ä—É–µ–º {len(high_volume_pairs)} –≤—ã—Å–æ–∫–æ–ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä (–∏–∑ {len(all_pairs)})")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
            promising_signals = []

            for i in range(0, len(high_volume_pairs), SCALPING_CONFIG['batch_size']):
                batch = high_volume_pairs[i:i + SCALPING_CONFIG['batch_size']]

                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –±–∞—Ç—á–∞
                tasks = [self.quick_scan_pair(pair) for pair in batch]

                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                results = await asyncio.gather(*tasks, return_exceptions=True)

                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for result in results:
                    if isinstance(result, ScalpingSignal):
                        promising_signals.append(result)

                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                processed = min(i + SCALPING_CONFIG['batch_size'], len(high_volume_pairs))
                logger.info(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{len(high_volume_pairs)}")

                # –ë—ã—Å—Ç—Ä–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if i + SCALPING_CONFIG['batch_size'] < len(high_volume_pairs):
                    await asyncio.sleep(0.05)  # –£–º–µ–Ω—å—à–µ–Ω–∞ –¥–ª—è 5M

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –∑–∞—Ç–µ–º –ø–æ momentum
            promising_signals.sort(key=lambda x: (x.confidence, x.momentum_strength), reverse=True)

            execution_time = time.time() - start_time
            logger.info(f"‚úÖ –≠–¢–ê–ü 1 –∑–∞–≤–µ—Ä—à–µ–Ω: {len(promising_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ {execution_time:.2f}—Å–µ–∫")

            # –õ–æ–≥–∏—Ä—É–µ–º –¢–û–ü-5 —Å–∏–≥–Ω–∞–ª–æ–≤
            if promising_signals:
                logger.info("üèÜ –¢–û–ü-5 –°–ò–ì–ù–ê–õ–û–í:")
                for i, signal in enumerate(promising_signals[:5], 1):
                    logger.info(
                        f"  {i}. {signal.pair} - {signal.signal_type} ({signal.confidence}% conf, {signal.momentum_strength}% momentum)")

            return promising_signals

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return []


class AI5MSelector:
    """–ò–ò —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""

    def __init__(self):
        self.selection_prompt = self._load_prompt('prompt2.txt')
        self.analysis_prompt = self._load_prompt('prompt.txt')

    def _load_prompt(self, filename: str) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return f.read().strip()
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ""

    def _prepare_signals_for_ai(self, signals: List[ScalpingSignal]) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞ (20 —Å–≤–µ—á–µ–π + —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)"""
        prepared_data = []

        for signal in signals:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π –¥–ª—è 5M
            recent_candles = signal.candles_data[-20:] if signal.candles_data else []

            signal_data = {
                'pair': signal.pair,
                'signal_type': signal.signal_type,
                'confidence': int(signal.confidence),
                'entry_price': float(signal.entry_price),
                'quality_score': int(signal.quality_score),
                'volatility_regime': str(signal.volatility_regime),
                'volume_confirmed': bool(signal.volume_confirmed),
                'momentum_strength': int(signal.momentum_strength),
                'entry_reasons': [str(reason) for reason in signal.entry_reasons],

                # 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5M —Å–≤–µ—á–µ–π
                'recent_candles': [
                    {
                        'timestamp': int(c[0]),
                        'open': float(c[1]),
                        'high': float(c[2]),
                        'low': float(c[3]),
                        'close': float(c[4]),
                        'volume': float(c[5])
                    } for c in recent_candles
                ],

                # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–Ω–∞—á–µ–Ω–∏–π)
                'indicators': safe_json_serialize({
                    # TSI - –∫–æ—Ä–æ–ª—å momentum
                    'tsi_values': signal.indicators_data.get('tsi_values', [])[-20:],
                    'tsi_current': signal.indicators_data.get('tsi_current', 0.0),
                    'tsi_bullish': signal.indicators_data.get('tsi_bullish', False),
                    'tsi_bearish': signal.indicators_data.get('tsi_bearish', False),

                    # Linda Raschke MACD
                    'macd_line': signal.indicators_data.get('macd_line', [])[-20:],
                    'macd_signal': signal.indicators_data.get('macd_signal', [])[-20:],
                    'macd_histogram': signal.indicators_data.get('macd_histogram', [])[-20:],
                    'macd_crossover': signal.indicators_data.get('macd_crossover', 'NONE'),

                    # VWAP
                    'vwap_values': signal.indicators_data.get('vwap_values', [])[-20:],
                    'vwap_position': signal.indicators_data.get('vwap_position', 'BELOW'),
                    'vwap_distance': signal.indicators_data.get('vwap_distance', 0.0),

                    # DeMarker
                    'demarker_values': signal.indicators_data.get('demarker_values', [])[-20:],
                    'demarker_current': signal.indicators_data.get('demarker_current', 0.5),
                    'demarker_signal': signal.indicators_data.get('demarker_signal', 'NEUTRAL'),

                    # –ë—ã—Å—Ç—Ä—ã–π RSI
                    'rsi_values': signal.indicators_data.get('rsi_values', [])[-20:],
                    'rsi_current': signal.indicators_data.get('rsi_current', 50.0),

                    # EMA —Ç—Ä–µ–Ω–¥
                    'ema_fast': signal.indicators_data.get('ema_fast', [])[-20:],
                    'ema_slow': signal.indicators_data.get('ema_slow', [])[-20:],
                    'ema_trend': signal.indicators_data.get('ema_trend', 'NEUTRAL'),
                    'ema_distance': signal.indicators_data.get('ema_distance', 0.0),

                    # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    'atr_values': signal.indicators_data.get('atr_values', [])[-20:],
                    'atr_current': signal.indicators_data.get('atr_current', 0.0),

                    # –û–±—ä–µ–º—ã (—É—Å–∏–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
                    'volume_ratio': signal.indicators_data.get('volume_ratio', 1.0),
                    'volume_strength': signal.indicators_data.get('volume_strength', 0),
                    'volume_acceleration': signal.indicators_data.get('volume_acceleration', 0.0),

                    # –ú–æ–º–µ–Ω—Ç—É–º
                    'price_momentum': signal.indicators_data.get('price_momentum', 0.0)
                })
            }

            prepared_data.append(signal_data)

        return {
            'signals_count': len(prepared_data),
            'timeframe': '5m',  # –ò–ó–ú–ï–ù–ï–ù–û –Ω–∞ 5M
            'strategy': 'extreme_5m_scalping',  # –ò–ó–ú–ï–ù–ï–ù–û
            'timestamp': int(time.time()),
            'signals': prepared_data
        }

    async def select_best_pairs(self, signals: List[ScalpingSignal]) -> List[str]:
        """–ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ç–±–æ—Ä —á–µ—Ä–µ–∑ –ò–ò (20 —Å–≤–µ—á–µ–π 5M)"""
        if not self.selection_prompt or not signals:
            return []

        logger.info(f"ü§ñ –≠–¢–ê–ü 2: –ò–ò –æ—Ç–±–æ—Ä –∏–∑ {len(signals)} 5M —Å–∏–≥–Ω–∞–ª–æ–≤")

        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ò–ò
            top_signals = signals[:SCALPING_CONFIG['max_pairs_to_ai']]

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            ai_data = self._prepare_signals_for_ai(top_signals)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            message = f"""{self.selection_prompt}

=== –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô 5M –°–ö–ê–õ–¨–ü–ò–ù–ì: –ü–ï–†–í–ò–ß–ù–´–ô –û–¢–ë–û–† ===
–ö–û–õ–ò–ß–ï–°–¢–í–û –°–ò–ì–ù–ê–õ–û–í: {len(top_signals)}
–£–î–ï–†–ñ–ê–ù–ò–ï: 1-2 —Å–≤–µ—á–∏ (5-10 –º–∏–Ω—É—Ç)
–î–ê–ù–ù–´–ï: –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π 5M + —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã

{json.dumps(ai_data, indent=2, ensure_ascii=False)}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í—ã–±–µ—Ä–∏ –º–∞–∫—Å–∏–º—É–º 3 –°–ê–ú–´–• –õ–£–ß–®–ò–• –ø–∞—Ä—ã –¥–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞.
–£—á–∏—Ç—ã–≤–∞–π TSI momentum, MACD –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è, VWAP –ø–æ–∑–∏—Ü–∏—é, DeMarker —ç–∫—Å—Ç—Ä–µ–º—É–º—ã.
–í–µ—Ä–Ω–∏ JSON: {{"pairs": ["BTCUSDT", "ETHUSDT"]}}"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–±–æ—Ä–∞
            ai_response = await deep_seek_selection(message)

            if not ai_response:
                logger.error("‚ùå –ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
                return []

            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            selected_pairs = self._parse_ai_response(ai_response)

            logger.info(f"‚úÖ –≠–¢–ê–ü 2 –∑–∞–≤–µ—Ä—à–µ–Ω: –ò–ò –≤—ã–±—Ä–∞–ª {len(selected_pairs)} –ø–∞—Ä –¥–ª—è 5M")
            if selected_pairs:
                logger.info(f"üéØ –í–´–ë–†–ê–ù–ù–´–ï –ü–ê–†–´: {', '.join(selected_pairs)}")

            return selected_pairs

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò –æ—Ç–±–æ—Ä–∞: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return []

    def _parse_ai_response(self, response: str) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ò–ò"""
        try:
            # –ò—â–µ–º JSON —Å –ø–∞—Ä–∞–º–∏
            json_match = re.search(r'\{[^}]*"pairs"[^}]*\}', response)
            if json_match:
                data = json.loads(json_match.group())
                return data.get('pairs', [])
            return []
        except:
            return []

    async def detailed_analysis(self, pair: str) -> Optional[str]:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã (100 —Å–≤–µ—á–µ–π 5M)"""
        if not self.analysis_prompt:
            return None

        logger.info(f"üî¨ –≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π 5M –∞–Ω–∞–ª–∏–∑ {pair}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (100 —Å–≤–µ—á–µ–π = 8.3 —á–∞—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏)
            full_candles = await get_klines_async(pair, "5", limit=SCALPING_CONFIG['candles_for_detailed'])

            if not full_candles or len(full_candles) < 50:
                logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 5M –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pair}")
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            full_indicators = calculate_scalping_indicators(full_candles)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            analysis_data = {
                'pair': pair,
                'timeframe': '5M',
                'timestamp': int(time.time()),
                'current_price': float(full_candles[-1][4]),

                # –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è 5M —Å–≤–µ—á–µ–π
                'candles_count': len(full_candles),
                'last_30_candles': [  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è 5M
                    {
                        'open': float(c[1]),
                        'high': float(c[2]),
                        'low': float(c[3]),
                        'close': float(c[4]),
                        'volume': float(c[5])
                    } for c in full_candles[-30:]
                ],

                # –ü–æ–ª–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                'technical_analysis': safe_json_serialize({
                    'tsi_analysis': {
                        'current_value': full_indicators.get('tsi_current', 0.0),
                        'bullish_momentum': full_indicators.get('tsi_bullish', False),
                        'bearish_momentum': full_indicators.get('tsi_bearish', False)
                    },
                    'macd_analysis': {
                        'crossover': full_indicators.get('macd_crossover', 'NONE'),
                        'current_histogram': full_indicators.get('macd_histogram', [])[-1] if full_indicators.get(
                            'macd_histogram') else 0
                    },
                    'vwap_analysis': {
                        'position': full_indicators.get('vwap_position', 'BELOW'),
                        'distance_percent': full_indicators.get('vwap_distance', 0.0),
                        'fair_value': full_indicators.get('vwap_values', [])[-1] if full_indicators.get(
                            'vwap_values') else 0
                    },
                    'demarker_analysis': {
                        'current_value': full_indicators.get('demarker_current', 0.5),
                        'signal': full_indicators.get('demarker_signal', 'NEUTRAL'),
                        'reversal_potential': 'HIGH' if full_indicators.get('demarker_current',
                                                                            0.5) < 0.3 or full_indicators.get(
                            'demarker_current', 0.5) > 0.7 else 'LOW'
                    },
                    'ema_trend': {
                        'direction': full_indicators.get('ema_trend', 'NEUTRAL'),
                        'strength_percent': full_indicators.get('ema_distance', 0.0)
                    },
                    'volume': {
                        'spike_detected': full_indicators.get('volume_spike', False),
                        'ratio': full_indicators.get('volume_ratio', 1.0),
                        'strength': full_indicators.get('volume_strength', 0),
                        'acceleration': full_indicators.get('volume_acceleration', 0.0)
                    },
                    'volatility': {
                        'regime': full_indicators.get('volatility_regime', 'MEDIUM'),
                        'atr_current': full_indicators.get('atr_current', 0),
                        'atr_percent': (
                                    full_indicators.get('atr_current', 0) / float(full_candles[-1][4]) * 100) if float(
                            full_candles[-1][4]) > 0 else 0
                    },
                    'momentum': {
                        'price_momentum': full_indicators.get('price_momentum', 0.0),
                        'strength': full_indicators.get('momentum_strength', 0)
                    }
                }),

                'signal_quality': full_indicators.get('signal_quality', 0),
                'recommended_hold_time': '5-15 minutes',  # –î–ª—è 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
                'target_profit': '0.3-0.8%'  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è 5M
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            message = f"""{self.analysis_prompt}

=== –î–ï–¢–ê–õ–¨–ù–´–ô 5M –°–ö–ê–õ–¨–ü–ò–ù–ì –ê–ù–ê–õ–ò–ó ===
–ü–ê–†–ê: {pair}
–°–¢–†–ê–¢–ï–ì–ò–Ø: –£–¥–µ—Ä–∂–∞–Ω–∏–µ 1-2 —Å–≤–µ—á–∏ –Ω–∞ 5M (5-10 –º–∏–Ω—É—Ç)
–¢–ï–ö–£–©–ê–Ø –¶–ï–ù–ê: {analysis_data['current_price']}
–¶–ï–õ–ï–í–ê–Ø –ü–†–ò–ë–´–õ–¨: 0.3-0.8% –∑–∞ 5-15 –º–∏–Ω—É—Ç

{json.dumps(analysis_data, indent=2, ensure_ascii=False)}

–ö–†–ò–¢–ò–ß–ù–û: –£—á—Ç–∏ —á—Ç–æ —ç—Ç–æ 5-–º–∏–Ω—É—Ç–Ω—ã–π —Å–∫–∞–ª—å–ø–∏–Ω–≥:
- –°–ø—Ä–µ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <0.05%
- –û–±—ä–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω
- TSI momentum –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ–Ω
- VWAP –∫–∞–∫ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è —Ü–µ–Ω–∞
- DeMarker –¥–ª—è —Ç–æ—á–µ–∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –¥–∞–π —Ç–æ—á–Ω—ã–π –ø–ª–∞–Ω —Å–¥–µ–ª–∫–∏ —Å —É—á—ë—Ç–æ–º –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã 5M —Ä—ã–Ω–∫–∞."""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            analysis_result = await deep_seek_analysis(message)

            if analysis_result:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._save_analysis(pair, analysis_result)
                logger.info(f"‚úÖ 5M –∞–Ω–∞–ª–∏–∑ {pair} –∑–∞–≤–µ—Ä—à–µ–Ω")
                return analysis_result

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ 5M –∞–Ω–∞–ª–∏–∑–∞ {pair}: {e}")
            return None

    def _save_analysis(self, pair: str, analysis: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            with open('scalping_5m_analysis.log', 'a', encoding='utf-8') as f:
                f.write(f"\n{'=' * 80}\n")
                f.write(f"–ü–ê–†–ê: {pair} (5M –°–ö–ê–õ–¨–ü–ò–ù–ì)\n")
                f.write(f"–í–†–ï–ú–Ø: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–ê–ù–ê–õ–ò–ó:\n{analysis}\n")
                f.write(f"{'=' * 80}\n")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ 5M —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    logger.info("üöÄ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô 5M –°–ö–ê–õ–¨–ü–ò–ù–ì–û–í–´–ô –ë–û–¢ - –ó–ê–ü–£–°–ö")
    logger.info("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –£–¥–µ—Ä–∂–∞–Ω–∏–µ 1-2 —Å–≤–µ—á–∏ (5-10 –º–∏–Ω—É—Ç)")
    logger.info("‚ö° –†–µ–∂–∏–º: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã + –ò–ò –æ—Ç–±–æ—Ä")
    logger.info("üí∞ –¶–µ–ª—å: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –ü–†–û–§–ò–¢ –Ω–∞ 5-–º–∏–Ω—É—Ç–∫–∞—Ö")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    analyzer = Extreme5MAnalyzer()
    ai_selector = AI5MSelector()

    try:
        # –≠–¢–ê–ü 1: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—ã—Å–æ–∫–æ–ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä
        promising_signals = await analyzer.mass_scan_markets()

        if not promising_signals:
            logger.info("‚ÑπÔ∏è –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö 5M —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        logger.info(f"üìà –ù–∞–π–¥–µ–Ω–æ {len(promising_signals)} –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö 5M —Å–∏–≥–Ω–∞–ª–æ–≤")

        # –≠–¢–ê–ü 2: –ò–ò –æ—Ç–±–æ—Ä –ª—É—á—à–∏—Ö (20 —Å–≤–µ—á–µ–π 5M)
        selected_pairs = await ai_selector.select_best_pairs(promising_signals)

        if not selected_pairs:
            logger.info("‚ÑπÔ∏è –ò–ò –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã –¥–ª—è 5M")
            return

        logger.info(f"ü§ñ –ò–ò –≤—ã–±—Ä–∞–ª {len(selected_pairs)} –ø–∞—Ä –¥–ª—è 5M: {selected_pairs}")

        # –≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã (100 —Å–≤–µ—á–µ–π 5M)
        successful_analyses = 0

        for pair in selected_pairs:
            analysis = await ai_selector.detailed_analysis(pair)

            if analysis:
                successful_analyses += 1
                logger.info(f"‚úÖ {pair} - 5M –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                logger.error(f"‚ùå {pair} - –æ—à–∏–±–∫–∞ 5M –∞–Ω–∞–ª–∏–∑–∞")

            # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –ò–ò –¥–ª—è 5M
            await asyncio.sleep(0.8)

        # –ò–¢–û–ì–ò
        logger.info(f"\nüéâ 5M –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        logger.info(f"üìä –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤—ã—Å–æ–∫–æ–ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä: –º–Ω–æ–≥–æ")
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ 5M —Å–∏–≥–Ω–∞–ª–æ–≤: {len(promising_signals)}")
        logger.info(f"ü§ñ –ò–ò –≤—ã–±—Ä–∞–ª –¥–ª—è 5M: {len(selected_pairs)}")
        logger.info(f"üìã –£—Å–ø–µ—à–Ω—ã—Ö 5M –∞–Ω–∞–ª–∏–∑–æ–≤: {successful_analyses}")
        logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: scalping_5m_analysis.log")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–ü —Å–∏–≥–Ω–∞–ª—ã
        if promising_signals:
            logger.info(f"\nüèÜ –¢–û–ü-3 –°–ò–ì–ù–ê–õ–ê:")
            for i, signal in enumerate(promising_signals[:3], 1):
                reasons_str = ', '.join(signal.entry_reasons[:3])  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–∏—á–∏–Ω—ã
                logger.info(f"  {i}. {signal.pair}: {signal.signal_type} "
                            f"(Conf: {signal.confidence}%, Mom: {signal.momentum_strength}%, Vol: {'‚úì' if signal.volume_confirmed else '‚úó'})")
                logger.info(f"     –ü—Ä–∏—á–∏–Ω—ã: {reasons_str}")

        # –û—á–∏—â–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await cleanup_http_client()

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    logger.info("=" * 80)
    logger.info("üéØ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô 5M –°–ö–ê–õ–¨–ü–ò–ù–ì–û–í–´–ô –ë–û–¢")
    logger.info("üìä –£–¥–µ—Ä–∂–∞–Ω–∏–µ: 1-2 —Å–≤–µ—á–∏ (5-10 –º–∏–Ω—É—Ç)")
    logger.info("‚ö° TSI + MACD + VWAP + DeMarker + –æ–±—ä–µ–º—ã")
    logger.info("üí∞ –¶–ï–õ–¨: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –ü–†–û–§–ò–¢")
    logger.info("=" * 80)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üîö –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")