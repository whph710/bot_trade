import asyncio
import json
import logging
import time
from typing import List, Dict, Any
import aiohttp
from func_trade import get_signal_details, check_ema_tsi_signal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class TradingSignalAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ EMA+TSI –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Bybit
    """

    def __init__(self,
                 ema1_period: int = 7,
                 ema2_period: int = 14,
                 ema3_period: int = 28,
                 tsi_long: int = 12,
                 tsi_short: int = 6,
                 tsi_signal: int = 6):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞

        Args:
            ema1_period: –ü–µ—Ä–∏–æ–¥ –±—ã—Å—Ç—Ä–æ–π EMA
            ema2_period: –ü–µ—Ä–∏–æ–¥ —Å—Ä–µ–¥–Ω–µ–π EMA
            ema3_period: –ü–µ—Ä–∏–æ–¥ –º–µ–¥–ª–µ–Ω–Ω–æ–π EMA
            tsi_long: –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ TSI
            tsi_short: –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ TSI
            tsi_signal: –ü–µ—Ä–∏–æ–¥ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ TSI
        """
        self.ema1_period = ema1_period
        self.ema2_period = ema2_period
        self.ema3_period = ema3_period
        self.tsi_long = tsi_long
        self.tsi_short = tsi_short
        self.tsi_signal = tsi_signal

        self.base_url = "https://api.bybit.com"
        self.session = None

    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        self.session = aiohttp.ClientSession()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        if self.session:
            await self.session.close()

    async def get_trading_pairs(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä USDT

        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        """
        try:
            url = f"{self.base_url}/v5/market/instruments-info"
            params = {
                'category': 'spot'
            }

            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()

                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ
                    pairs = []
                    for instrument in data['result']['list']:
                        symbol = instrument['symbol']
                        status = instrument['status']

                        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ
                        if (symbol.endswith('USDT') and
                                status == 'Trading' and
                                not symbol.startswith('USDT')):  # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã
                            pairs.append(symbol)

                    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä USDT")
                    return pairs

                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {response.status}")
                    return []

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            return []

    async def get_klines(self, symbol: str, interval: str = "15", limit: int = 200) -> List[List[str]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 –º–∏–Ω—É—Ç)
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Bybit
        """
        try:
            url = f"{self.base_url}/v5/market/kline"
            params = {
                'category': 'spot',
                'symbol': symbol,
                'interval': interval,
                'limit': limit
            }

            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    return data['result']['list']
                else:
                    logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {response.status}")
                    return []

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π {symbol}: {e}")
            return []

    async def analyze_pair(self, symbol: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ EMA+TSI —Å–∏–≥–Ω–∞–ª–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä—ã
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
            candles = await self.get_klines(symbol)

            if not candles or len(candles) < 50:
                return {
                    'pair': symbol,
                    'signal': 'NO_SIGNAL',
                    'reason': 'INSUFFICIENT_DATA',
                    'details': {}
                }

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = check_ema_tsi_signal(
                candles,
                self.ema1_period,
                self.ema2_period,
                self.ema3_period,
                self.tsi_long,
                self.tsi_short,
                self.tsi_signal
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            details = get_signal_details(
                candles,
                self.ema1_period,
                self.ema2_period,
                self.ema3_period,
                self.tsi_long,
                self.tsi_short,
                self.tsi_signal
            )

            return {
                'pair': symbol,
                'signal': signal,
                'details': details
            }

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return {
                'pair': symbol,
                'signal': 'ERROR',
                'reason': str(e),
                'details': {}
            }

    async def analyze_all_pairs(self) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        start_time = time.time()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        pairs = await self.get_trading_pairs()

        if not pairs:
            return {
                'success': False,
                'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä',
                'pairs_data': [],
                'signal_counts': {'LONG': 0, 'SHORT': 0, 'NO_SIGNAL': 0},
                'execution_time': 0
            }

        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–±–∞—Ç—á–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit)
        batch_size = 10  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ 10 –ø–∞—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        all_results = []

        for i in range(0, len(pairs), batch_size):
            batch = pairs[i:i + batch_size]

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –±–∞—Ç—á–∞
            tasks = [self.analyze_pair(pair) for pair in batch]

            # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á
            batch_results = await asyncio.gather(*tasks, return_exceptions=True)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in batch_results:
                if isinstance(result, Exception):
                    logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {result}")
                else:
                    all_results.append(result)

            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            logger.info(f"üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {min(i + batch_size, len(pairs))}/{len(pairs)} –ø–∞—Ä")

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(0.1)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ (LONG –∏–ª–∏ SHORT)
        pairs_with_signals = [
            result for result in all_results
            if result['signal'] in ['LONG', 'SHORT']
        ]

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        signal_counts = {'LONG': 0, 'SHORT': 0, 'NO_SIGNAL': 0}
        for result in all_results:
            signal = result['signal']
            if signal in signal_counts:
                signal_counts[signal] += 1
            else:
                signal_counts['NO_SIGNAL'] += 1

        execution_time = time.time() - start_time

        return {
            'success': True,
            'pairs_data': pairs_with_signals,  # –¢–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
            'all_pairs_data': all_results,  # –í—Å–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
            'signal_counts': signal_counts,
            'total_pairs_checked': len(all_results),
            'execution_time': execution_time
        }


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ EMA+TSI –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    """
    try:
        logger.info("üöÄ –ó–ê–ü–£–°–ö EMA+TSI –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
        logger.info("=" * 70)

        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        async with TradingSignalAnalyzer(
                ema1_period=7,  # –ë—ã—Å—Ç—Ä–∞—è EMA
                ema2_period=14,  # –°—Ä–µ–¥–Ω—è—è EMA
                ema3_period=28,  # –ú–µ–¥–ª–µ–Ω–Ω–∞—è EMA
                tsi_long=12,  # –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ TSI
                tsi_short=6,  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ TSI
                tsi_signal=6  # –ü–µ—Ä–∏–æ–¥ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ TSI
        ) as analyzer:

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            result = await analyzer.analyze_all_pairs()

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result['success']:
                logger.info("=" * 70)
                logger.info("‚úÖ –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù")
                logger.info("=" * 70)

                # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result['execution_time']:.2f} —Å–µ–∫—É–Ω–¥")
                logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∞—Ä: {result['total_pairs_checked']}")

                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
                signal_counts = result['signal_counts']
                logger.info(f"üìà LONG —Å–∏–≥–Ω–∞–ª—ã: {signal_counts['LONG']}")
                logger.info(f"üìâ SHORT —Å–∏–≥–Ω–∞–ª—ã: {signal_counts['SHORT']}")
                logger.info(f"‚ö™ –ë–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤: {signal_counts['NO_SIGNAL']}")

                total_signals = signal_counts['LONG'] + signal_counts['SHORT']
                logger.info(f"üéØ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {total_signals}")

                # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                if result['pairs_data']:
                    logger.info("=" * 70)
                    logger.info("üéØ –ù–ê–ô–î–ï–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´:")
                    logger.info("=" * 70)

                    for pair_data in result['pairs_data']:
                        signal_emoji = "üìà" if pair_data['signal'] == 'LONG' else "üìâ"
                        logger.info(f"{signal_emoji} {pair_data['pair']}: {pair_data['signal']} "
                                    f"(–¶–µ–Ω–∞: {pair_data['details']['last_price']:.6f})")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    save_results_to_file(result)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
                    await process_pairs_with_ai(result['pairs_data'], analyzer)

                else:
                    logger.info("üîç –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç")

            else:
                logger.error("‚ùå –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô")
                logger.error(f"–ü—Ä–∏—á–∏–Ω–∞: {result.get('message', 'Unknown error')}")

    except KeyboardInterrupt:
        logger.info("üõë –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        import traceback
        logger.error(traceback.format_exc())


def save_results_to_file(result: Dict[str, Any]):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª

    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    """
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_data = {
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'execution_time': result['execution_time'],
            'total_pairs_checked': result['total_pairs_checked'],
            'signal_counts': result['signal_counts'],
            'signals_found': []
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
        for pair_info in result['pairs_data']:
            save_data['signals_found'].append({
                'pair': pair_info['pair'],
                'signal': pair_info['signal'],
                'last_price': pair_info['details']['last_price'],
                'ema1': pair_info['details']['ema1'],
                'ema2': pair_info['details']['ema2'],
                'ema3': pair_info['details']['ema3'],
                'tsi_value': pair_info['details']['tsi_value'],
                'tsi_signal_value': pair_info['details']['tsi_signal_value'],
                'ema_alignment': pair_info['details']['ema_alignment'],
                'tsi_crossover_direction': pair_info['details']['tsi_crossover_direction'],
                'reason': pair_info['details']['reason']
            })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
        with open('trading_analysis_result.json', 'w', encoding='utf-8') as f:
            json.dump(save_data, f, indent=2, ensure_ascii=False, default=str)

        logger.info("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª 'trading_analysis_result.json'")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")


def load_prompt_from_file(filename: str) -> str:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞

    Args:
        filename: –ò–º—è —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º

    Returns:
        –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return f.read().strip()
    except FileNotFoundError:
        logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ""
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        return ""


def format_pair_data(pair_info: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—ã –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏

    Args:
        pair_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    return {
        'pair': pair_info['pair'],
        'signal': pair_info['signal'],
        'last_price': pair_info['details']['last_price'],
        'ema1': pair_info['details']['ema1'],
        'ema2': pair_info['details']['ema2'],
        'ema3': pair_info['details']['ema3'],
        'tsi_value': pair_info['details']['tsi_value'],
        'tsi_signal_value': pair_info['details']['tsi_signal_value'],
        'ema_alignment': pair_info['details']['ema_alignment'],
        'tsi_crossover_direction': pair_info['details']['tsi_crossover_direction'],
        'reason': pair_info['details']['reason']
    }


async def process_pairs_with_ai(pairs_data: List[Dict[str, Any]], analyzer: TradingSignalAnalyzer):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏

    Args:
        pairs_data: –°–ø–∏—Å–æ–∫ –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
        analyzer: –≠–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
        main_prompt = load_prompt_from_file('prompt_main.txt')
        analysis_prompt = load_prompt_from_file('prompt_analysis.txt')

        if not main_prompt or not analysis_prompt:
            logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ")
            main_prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã:"
            analysis_prompt = "–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ö–æ–¥—É –≤ –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É."

        logger.info(f"ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(pairs_data)} –ø–∞—Ä —Å –ø–æ–º–æ—â—å—é –ò–ò...")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        import os
        os.makedirs('ai_results', exist_ok=True)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
        for i, pair_info in enumerate(pairs_data, 1):
            try:
                logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã {i}/{len(pairs_data)}: {pair_info['pair']}")

                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
                candles = await analyzer.get_klines(pair_info['pair'], interval="15", limit=100)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
                formatted_data = format_pair_data(pair_info)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
                full_prompt = create_single_pair_prompt(
                    main_prompt,
                    analysis_prompt,
                    formatted_data,
                    candles
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
                prompt_filename = f'ai_results/prompt_{pair_info["pair"]}_{pair_info["signal"]}.txt'
                with open(prompt_filename, 'w', encoding='utf-8') as f:
                    f.write(full_prompt)

                logger.info(f"üíæ –ü—Ä–æ–º–ø—Ç –¥–ª—è {pair_info['pair']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {prompt_filename}")

                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ API –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                # await send_to_openai_api(full_prompt, pair_info['pair'])

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.5)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {pair_info['pair']}: {e}")
                continue

        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_pairs_with_ai: {e}")


def create_single_pair_prompt(main_prompt: str, analysis_prompt: str, pair_data: Dict[str, Any],
                              candles: List[List[str]]) -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã

    Args:
        main_prompt: –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
        analysis_prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ —Ñ–∞–π–ª–∞
        pair_data: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
        candles: –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π

    Returns:
        –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ò–ò
    """
    # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç
    prompt = f"{main_prompt}\n\n"

    # –î–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ä–µ
    prompt += "–î–ê–ù–ù–´–ï –¢–û–†–ì–û–í–û–ô –ü–ê–†–´:\n"
    prompt += "=" * 50 + "\n"
    prompt += f"–ü–∞—Ä–∞: {pair_data['pair']}\n"
    prompt += f"–°–∏–≥–Ω–∞–ª: {pair_data['signal']}\n"
    prompt += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {pair_data['last_price']:.6f}\n"
    prompt += f"EMA7: {pair_data['ema1']:.6f}\n"
    prompt += f"EMA14: {pair_data['ema2']:.6f}\n"
    prompt += f"EMA28: {pair_data['ema3']:.6f}\n"
    prompt += f"TSI: {pair_data['tsi_value']:.2f}\n"
    prompt += f"TSI Signal: {pair_data['tsi_signal_value']:.2f}\n"
    prompt += f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ EMA: {pair_data['ema_alignment']}\n"
    prompt += f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è TSI: {pair_data['tsi_crossover_direction']}\n"
    prompt += f"–ü—Ä–∏—á–∏–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞: {pair_data['reason']}\n\n"

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ (–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
    if candles:
        prompt += "–ü–û–°–õ–ï–î–ù–ò–ï –°–í–ï–ß–ò (OHLCV):\n"
        prompt += "=" * 50 + "\n"
        prompt += "Timestamp | Open | High | Low | Close | Volume\n"
        prompt += "-" * 50 + "\n"

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        recent_candles = candles[:20]  # Bybit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for candle in recent_candles:
            timestamp = candle[0]
            open_price = float(candle[1])
            high_price = float(candle[2])
            low_price = float(candle[3])
            close_price = float(candle[4])
            volume = float(candle[5])

            prompt += f"{timestamp} | {open_price:.6f} | {high_price:.6f} | {low_price:.6f} | {close_price:.6f} | {volume:.2f}\n"

        prompt += "\n"

    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    prompt += f"{analysis_prompt}\n"

    return prompt


async def send_to_ai_analysis(pairs_data: List[Dict[str, Any]]):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é

    Args:
        pairs_data: –°–ø–∏—Å–æ–∫ –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ò–ò
        ai_prompt = create_ai_prompt(pairs_data)

        logger.info("ü§ñ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ò–ò:")
        logger.info("=" * 50)
        logger.info(ai_prompt)
        logger.info("=" * 50)

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ OpenAI API, Claude API –∏ —Ç.–¥.
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª
        with open('ai_analysis_prompt.txt', 'w', encoding='utf-8') as f:
            f.write(ai_prompt)

        logger.info("üíæ –ü—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª 'ai_analysis_prompt.txt'")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò: {e}")


def create_ai_prompt(pairs_data: List[Dict[str, Any]]) -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é

    Args:
        pairs_data: –î–∞–Ω–Ω—ã–µ –ø–∞—Ä —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏

    Returns:
        –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
    """
    prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º –ø–∞—Ä–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ EMA+TSI:

–ù–ê–ô–î–ï–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´:

"""

    for pair_data in pairs_data:
        details = pair_data['details']
        prompt += f"""
–ü–∞—Ä–∞: {pair_data['pair']}
–°–∏–≥–Ω–∞–ª: {pair_data['signal']}
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {details['last_price']:.6f}
EMA7: {details['ema1']:.6f}
EMA14: {details['ema2']:.6f}  
EMA28: {details['ema3']:.6f}
TSI: {details['tsi_value']:.2f}
TSI Signal: {details['tsi_signal_value']:.2f}
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ EMA: {details['ema_alignment']}
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è TSI: {details['tsi_crossover_direction']}
–ü—Ä–∏—á–∏–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞: {details['reason']}
---"""

    prompt += """

–ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
2. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
3. –û—Ü–µ–Ω–∏ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è LONG/SHORT —Å–∏–≥–Ω–∞–ª–æ–≤
4. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
5. –£–∫–∞–∂–∏ –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø–æ–∑–∏—Ü–∏—é

–û—Ç–≤–µ—Ç –¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."""

    return prompt


if __name__ == "__main__":
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
    """
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()