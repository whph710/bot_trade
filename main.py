import asyncio
import json
import logging
import time
from typing import List, Dict, Any
import aiohttp
from func_trade import get_signal_details, check_ema_tsi_signal
from func_async import get_klines_async
from deepseek import deep_seek

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class TradingSignalAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ EMA+TSI –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Bybit
    """

    def __init__(self,
                 ema1_period: int = 7,
                 ema2_period: int = 14,
                 ema3_period: int = 28,
                 tsi_long: int = 12,
                 tsi_short: int = 6,
                 tsi_signal: int = 6):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        """
        self.ema1_period = ema1_period
        self.ema2_period = ema2_period
        self.ema3_period = ema3_period
        self.tsi_long = tsi_long
        self.tsi_short = tsi_short
        self.tsi_signal = tsi_signal

        self.base_url = "https://api.bybit.com"
        self.session = None

    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        self.session = aiohttp.ClientSession()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        if self.session:
            await self.session.close()

    async def get_trading_pairs(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä USDT
        """
        try:
            url = f"{self.base_url}/v5/market/instruments-info"
            params = {
                'category': 'linear'
            }

            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()

                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ
                    pairs = []
                    for instrument in data['result']['list']:
                        symbol = instrument['symbol']
                        status = instrument['status']

                        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ
                        if (symbol.endswith('USDT') and
                                status == 'Trading' and
                                not symbol.startswith('USDT')):  # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã
                            pairs.append(symbol)

                    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä USDT")
                    return pairs

                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {response.status}")
                    return []

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            return []

    async def get_klines(self, symbol: str, interval: str = "15", limit: int = 200) -> List[List[str]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
        """
        try:
            url = f"{self.base_url}/v5/market/kline"
            params = {
                'category': 'linear',
                'symbol': symbol,
                'interval': interval,
                'limit': limit
            }

            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    return data['result']['list']
                else:
                    logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {response.status}")
                    return []

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π {symbol}: {e}")
            return []

    async def analyze_pair(self, symbol: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ EMA+TSI —Å–∏–≥–Ω–∞–ª–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
            candles = await self.get_klines(symbol)

            if not candles or len(candles) < 50:
                return {
                    'pair': symbol,
                    'signal': 'NO_SIGNAL',
                    'reason': 'INSUFFICIENT_DATA',
                    'details': {}
                }

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = check_ema_tsi_signal(
                candles,
                self.ema1_period,
                self.ema2_period,
                self.ema3_period,
                self.tsi_long,
                self.tsi_short,
                self.tsi_signal
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            details = get_signal_details(
                candles,
                self.ema1_period,
                self.ema2_period,
                self.ema3_period,
                self.tsi_long,
                self.tsi_short,
                self.tsi_signal
            )

            return {
                'pair': symbol,
                'signal': signal,
                'details': details
            }

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return {
                'pair': symbol,
                'signal': 'ERROR',
                'reason': str(e),
                'details': {}
            }

    async def analyze_all_pairs(self) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        start_time = time.time()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        pairs = await self.get_trading_pairs()

        if not pairs:
            return {
                'success': False,
                'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä',
                'pairs_data': [],
                'signal_counts': {'LONG': 0, 'SHORT': 0, 'NO_SIGNAL': 0},
                'execution_time': 0
            }

        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–±–∞—Ç—á–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit)
        batch_size = 100  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ 10 –ø–∞—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        all_results = []

        for i in range(0, len(pairs), batch_size):
            batch = pairs[i:i + batch_size]

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –±–∞—Ç—á–∞
            tasks = [self.analyze_pair(pair) for pair in batch]

            # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á
            batch_results = await asyncio.gather(*tasks, return_exceptions=True)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in batch_results:
                if isinstance(result, Exception):
                    logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {result}")
                else:
                    all_results.append(result)

            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            logger.info(f"üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {min(i + batch_size, len(pairs))}/{len(pairs)} –ø–∞—Ä")

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(0.1)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ (LONG –∏–ª–∏ SHORT)
        pairs_with_signals = [
            result for result in all_results
            if result['signal'] in ['LONG', 'SHORT']
        ]

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        signal_counts = {'LONG': 0, 'SHORT': 0, 'NO_SIGNAL': 0}
        for result in all_results:
            signal = result['signal']
            if signal in signal_counts:
                signal_counts[signal] += 1
            else:
                signal_counts['NO_SIGNAL'] += 1

        execution_time = time.time() - start_time

        return {
            'success': True,
            'pairs_data': pairs_with_signals,  # –¢–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
            'all_pairs_data': all_results,  # –í—Å–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
            'signal_counts': signal_counts,
            'total_pairs_checked': len(all_results),
            'execution_time': execution_time
        }


def load_prompt_from_file(filename: str = 'prompt.txt') -> str:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
    """
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return f.read().strip()
    except FileNotFoundError:
        logger.error(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ""
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        return ""


def format_pair_data_for_ai(pair_info: Dict[str, Any], candles: List[List[str]]) -> Dict[str, Any]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ò–ò
    """
    return {
        'pair': pair_info['pair'],
        'signal': pair_info['signal'],
        'last_price': pair_info['details']['last_price'],
        'ema1': pair_info['details']['ema1'],
        'ema2': pair_info['details']['ema2'],
        'ema3': pair_info['details']['ema3'],
        'tsi_value': pair_info['details']['tsi_value'],
        'tsi_signal_value': pair_info['details']['tsi_signal_value'],
        'ema_alignment': pair_info['details']['ema_alignment'],
        'tsi_crossover_direction': pair_info['details']['tsi_crossover_direction'],
        'reason': pair_info['details']['reason'],
        'candles': candles  # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á–∏
    }


def create_full_prompt(base_prompt: str, pair_data: Dict[str, Any]) -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ò–ò
    """
    # –°–æ–∑–¥–∞–µ–º JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä—ã
    pair_json = {
        'pair': pair_data['pair'],
        'signal': pair_data['signal'],
        'last_price': pair_data['last_price'],
        'ema1': pair_data['ema1'],
        'ema2': pair_data['ema2'],
        'ema3': pair_data['ema3'],
        'tsi_value': pair_data['tsi_value'],
        'tsi_signal_value': pair_data['tsi_signal_value'],
        'ema_alignment': pair_data['ema_alignment'],
        'tsi_crossover_direction': pair_data['tsi_crossover_direction'],
        'reason': pair_data['reason']
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    full_prompt = f"{base_prompt}\n\n–î–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã:\n{json.dumps(pair_json, ensure_ascii=False, indent=2)}"

    return full_prompt


async def process_pairs_with_ai(pairs_data: List[Dict[str, Any]], analyzer: TradingSignalAnalyzer):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
        base_prompt = load_prompt_from_file('prompt.txt')

        if not base_prompt:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞ prompt.txt")
            return

        logger.info(f"ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(pairs_data)} –ø–∞—Ä —Å –ø–æ–º–æ—â—å—é –ò–ò...")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
        for i, pair_info in enumerate(pairs_data, 1):
            try:
                logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã {i}/{len(pairs_data)}: {pair_info['pair']}")

                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
                candles = await get_klines_async(pair_info['pair'], interval=15, limit=100)

                if not candles:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è {pair_info['pair']}")
                    continue

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
                formatted_data = format_pair_data_for_ai(pair_info, candles)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                full_prompt = create_full_prompt(base_prompt, formatted_data)
                print(full_prompt)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ò–ò: {pair_info['pair']}")
                ai_response = await deep_seek(full_prompt)

                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                logger.info(f"üì• –û—Ç–≤–µ—Ç –ò–ò –¥–ª—è {pair_info['pair']}: {ai_response}")

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {pair_info['pair']}: {e}")
                continue

        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_pairs_with_ai: {e}")


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ EMA+TSI –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    """
    try:
        logger.info("üöÄ –ó–ê–ü–£–°–ö EMA+TSI –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
        logger.info("=" * 70)

        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        async with TradingSignalAnalyzer(
                ema1_period=7,  # –ë—ã—Å—Ç—Ä–∞—è EMA
                ema2_period=14,  # –°—Ä–µ–¥–Ω—è—è EMA
                ema3_period=28,  # –ú–µ–¥–ª–µ–Ω–Ω–∞—è EMA
                tsi_long=12,  # –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ TSI
                tsi_short=6,  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ TSI
                tsi_signal=6  # –ü–µ—Ä–∏–æ–¥ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ TSI
        ) as analyzer:

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            result = await analyzer.analyze_all_pairs()

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result['success']:
                logger.info("=" * 70)
                logger.info("‚úÖ –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù")
                logger.info("=" * 70)

                # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result['execution_time']:.2f} —Å–µ–∫—É–Ω–¥")
                logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∞—Ä: {result['total_pairs_checked']}")

                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
                signal_counts = result['signal_counts']
                logger.info(f"üìà LONG —Å–∏–≥–Ω–∞–ª—ã: {signal_counts['LONG']}")
                logger.info(f"üìâ SHORT —Å–∏–≥–Ω–∞–ª—ã: {signal_counts['SHORT']}")
                logger.info(f"‚ö™ –ë–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤: {signal_counts['NO_SIGNAL']}")

                total_signals = signal_counts['LONG'] + signal_counts['SHORT']
                logger.info(f"üéØ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {total_signals}")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                if result['pairs_data']:
                    logger.info("=" * 70)
                    logger.info("üéØ –ù–ê–ô–î–ï–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´:")
                    logger.info("=" * 70)

                    for pair_data in result['pairs_data']:
                        signal_emoji = "üìà" if pair_data['signal'] == 'LONG' else "üìâ"
                        logger.info(f"{signal_emoji} {pair_data['pair']}: {pair_data['signal']} "
                                    f"(–¶–µ–Ω–∞: {pair_data['details']['last_price']:.6f})")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
                    logger.info("=" * 70)
                    logger.info("ü§ñ –ê–ù–ê–õ–ò–ó –ù–ï–ô–†–û–°–ï–¢–¨–Æ")
                    logger.info("=" * 70)
                    await process_pairs_with_ai(result['pairs_data'], analyzer)

                else:
                    logger.info("üîç –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç")

            else:
                logger.error("‚ùå –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô")
                logger.error(f"–ü—Ä–∏—á–∏–Ω–∞: {result.get('message', 'Unknown error')}")

    except KeyboardInterrupt:
        logger.info("üõë –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        import traceback
        logger.error(traceback.format_exc())


if __name__ == "__main__":
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
    """
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()