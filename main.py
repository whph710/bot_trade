import asyncio
import json
import logging
import time
from typing import List, Dict, Any, Optional
from dataclasses import dataclass, asdict
import re

from func_trade import (
    enhanced_signal_detection,
    format_ai_input_data,
    signal_quality_validator,
    SCALPING_15M_PARAMS,
    get_optimal_params_for_asset
)
from func_async import get_klines_async, get_usdt_trading_pairs
from deepseek import deep_seek

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


def convert_to_json_serializable(obj):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if isinstance(obj, dict):
        return {key: convert_to_json_serializable(value) for key, value in obj.items()}
    elif isinstance(obj, list):
        return [convert_to_json_serializable(item) for item in obj]
    elif isinstance(obj, bool):
        return obj  # bool —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–∫–ª–∞—Å—Å–æ–º int –≤ Python, –ø–æ—ç—Ç–æ–º—É –¥–æ–ª–∂–µ–Ω —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è
    elif isinstance(obj, (int, float, str, type(None))):
        return obj
    else:
        return str(obj)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –≤ —Å—Ç—Ä–æ–∫—É


@dataclass
class TradingSignal:
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    pair: str
    signal_type: str  # 'LONG', 'SHORT', 'NO_SIGNAL'
    confidence: int  # 0-100
    entry_price: float
    timestamp: int

    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    trend_strength: int
    momentum_score: int
    volume_confirmation: bool
    volatility_regime: str

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä—ã–Ω–∫–∞
    market_conditions: str
    confluence_factors: List[str]
    warning_signals: List[str]

    # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    signal_quality: int
    filters_passed: List[str]
    filters_failed: List[str]


@dataclass
class PairAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
    pair: str
    signal: Optional[TradingSignal] = None
    error: Optional[str] = None
    execution_time: float = 0.0

    def is_valid_signal(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        return (self.signal is not None and
                self.signal.signal_type in ['LONG', 'SHORT'] and
                self.signal.confidence >= 50)


class OptimizedTradingAnalyzer:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ 15M"""

    def __init__(self, batch_size: int = 100, min_confidence: int = 75):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

        Args:
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            min_confidence: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
        """
        self.batch_size = batch_size
        self.min_confidence = min_confidence
        self.required_candles = 200  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤

        # –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self._params_cache = {}

        logger.info(f"üöÄ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        logger.info(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
        logger.info(f"   ‚Ä¢ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {min_confidence}%")
        logger.info(f"   ‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {SCALPING_15M_PARAMS}")

    def _get_asset_params(self, symbol: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if symbol not in self._params_cache:
            self._params_cache[symbol] = get_optimal_params_for_asset(symbol)
        return self._params_cache[symbol]

    async def analyze_single_pair(self, symbol: str) -> PairAnalysisResult:
        """
        –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏

        Args:
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä—ã
        """
        start_time = time.time()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            candles = await get_klines_async(
                symbol,
                interval="15",
                limit=self.required_candles
            )

            if not candles or len(candles) < 100:
                return PairAnalysisResult(
                    pair=symbol,
                    error="INSUFFICIENT_DATA",
                    execution_time=time.time() - start_time
                )

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_result = enhanced_signal_detection(candles)

            if signal_result['signal'] == 'NO_SIGNAL':
                return PairAnalysisResult(
                    pair=symbol,
                    error="NO_SIGNAL_DETECTED",
                    execution_time=time.time() - start_time
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
            if not signal_quality_validator(signal_result, signal_result.get('market_context', {})):
                return PairAnalysisResult(
                    pair=symbol,
                    error="SIGNAL_QUALITY_TOO_LOW",
                    execution_time=time.time() - start_time
                )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò
            ai_data = format_ai_input_data(signal_result, symbol)

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            trading_signal = self._create_trading_signal(ai_data, candles)

            return PairAnalysisResult(
                pair=symbol,
                signal=trading_signal,
                execution_time=time.time() - start_time
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return PairAnalysisResult(
                pair=symbol,
                error=str(e),
                execution_time=time.time() - start_time
            )

    def _create_trading_signal(self, ai_data: Dict[str, Any], candles: List) -> TradingSignal:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        entry_signal = ai_data['entry_signal']
        technical_analysis = ai_data['technical_analysis']
        risk_assessment = ai_data['risk_assessment']

        return TradingSignal(
            pair=entry_signal['pair'],
            signal_type=entry_signal['direction'].upper(),
            confidence=entry_signal['confidence'],
            entry_price=float(candles[-1][4]),  # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            timestamp=entry_signal['timestamp'],

            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            trend_strength=technical_analysis['trend_strength'],
            momentum_score=technical_analysis['momentum_score'],
            volume_confirmation=technical_analysis['volume_confirmation'],
            volatility_regime=technical_analysis['volatility_regime'],

            # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä—ã–Ω–∫–∞
            market_conditions=risk_assessment['market_conditions'],
            confluence_factors=risk_assessment['confluence_factors'],
            warning_signals=risk_assessment['warning_signals'],

            # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            signal_quality=risk_assessment['signal_quality'],
            filters_passed=[],  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ signal_result
            filters_failed=[]  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ signal_result
        )

    async def scan_all_markets(self) -> Dict[str, Any]:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä—ã–Ω–∫–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ä—ã–Ω–∫–æ–≤
        """
        start_time = time.time()
        logger.info("üîç –ù–ê–ß–ê–õ–û: –ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            pairs = await get_usdt_trading_pairs()
            if not pairs:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")

            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")

            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞–º–∏
            all_results = await self._process_pairs_in_batches(pairs)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            valid_signals = [
                result for result in all_results
                if result.is_valid_signal()
            ]

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            valid_signals.sort(
                key=lambda x: x.signal.confidence if x.signal else 0,
                reverse=True
            )

            execution_time = time.time() - start_time

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = self._calculate_statistics(all_results)

            logger.info(f"‚úÖ –ó–ê–í–ï–†–®–ï–ù–û: –ù–∞–π–¥–µ–Ω–æ {len(valid_signals)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å–µ–∫")
            logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")

            return {
                'success': True,
                'valid_signals': [asdict(result) for result in valid_signals],
                'all_results': [asdict(result) for result in all_results],
                'statistics': stats,
                'execution_time': execution_time,
                'total_pairs': len(pairs)
            }

        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {
                'success': False,
                'error': str(e),
                'execution_time': time.time() - start_time
            }

    async def _process_pairs_in_batches(self, pairs: List[str]) -> List[PairAnalysisResult]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä –±–∞—Ç—á–∞–º–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –Ω–∞–≥—Ä—É–∑–∫–∏"""
        all_results = []

        for i in range(0, len(pairs), self.batch_size):
            batch = pairs[i:i + self.batch_size]

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –±–∞—Ç—á–∞
            tasks = [self.analyze_single_pair(pair) for pair in batch]

            # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            batch_results = await asyncio.gather(*tasks, return_exceptions=True)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in batch_results:
                if isinstance(result, Exception):
                    logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –±–∞—Ç—á–µ: {result}")
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
                    all_results.append(PairAnalysisResult(
                        pair="UNKNOWN",
                        error=str(result)
                    ))
                else:
                    all_results.append(result)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            processed = min(i + self.batch_size, len(pairs))
            logger.info(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{len(pairs)} –ø–∞—Ä")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            if i + self.batch_size < len(pairs):
                await asyncio.sleep(0.1)

        return all_results

    def _calculate_statistics(self, results: List[PairAnalysisResult]) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        total = len(results)
        valid_signals = sum(1 for r in results if r.is_valid_signal())
        errors = sum(1 for r in results if r.error is not None)

        signal_types = {'LONG': 0, 'SHORT': 0}
        confidence_levels = {'HIGH': 0, 'MEDIUM': 0, 'LOW': 0}

        for result in results:
            if result.signal:
                signal_types[result.signal.signal_type] = signal_types.get(result.signal.signal_type, 0) + 1

                if result.signal.confidence >= 80:
                    confidence_levels['HIGH'] += 1
                elif result.signal.confidence >= 60:
                    confidence_levels['MEDIUM'] += 1
                else:
                    confidence_levels['LOW'] += 1

        avg_execution_time = sum(r.execution_time for r in results) / total if total > 0 else 0

        return {
            'total_pairs': total,
            'valid_signals': valid_signals,
            'errors': errors,
            'success_rate': f"{(valid_signals / total * 100):.1f}%" if total > 0 else "0%",
            'signal_types': signal_types,
            'confidence_levels': confidence_levels,
            'avg_execution_time': f"{avg_execution_time:.3f}s"
        }


class AITradingOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò"""

    def __init__(self):
        self.selection_prompt = self._load_prompt('prompt2.txt')
        self.analysis_prompt = self._load_prompt('prompt.txt')

    def _load_prompt(self, filename: str) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return f.read().strip()
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ""
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}: {e}")
            return ""

    async def select_best_pairs(self, valid_signals: List[Dict[str, Any]]) -> List[str]:
        """
        –û—Ç–±–æ—Ä –ª—É—á—à–∏—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ –ò–ò

        Args:
            valid_signals: –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä
        """
        if not self.selection_prompt:
            logger.error("‚ùå –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–±–æ—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return []

        if not valid_signals:
            logger.info("‚ÑπÔ∏è  –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–±–æ—Ä–∞")
            return []

        logger.info(f"ü§ñ –ò–ò –æ—Ç–±–æ—Ä –∏–∑ {len(valid_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")

        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò
            selection_data = self._prepare_selection_data(valid_signals)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            serializable_data = convert_to_json_serializable(selection_data)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            message = f"""{self.selection_prompt}

=== –î–ê–ù–ù–´–ï –î–õ–Ø –û–¢–ë–û–†–ê ===
–ö–û–õ–ò–ß–ï–°–¢–í–û –°–ò–ì–ù–ê–õ–û–í: {len(valid_signals)}
–¢–ê–ô–ú–§–†–ï–ô–ú: 15 –º–∏–Ω—É—Ç (—Å–∫–∞–ª—å–ø–∏–Ω–≥)
–°–¢–†–ê–¢–ï–ì–ò–Ø: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è EMA+TSI

{json.dumps(serializable_data, indent=2, ensure_ascii=False)}

–í–µ—Ä–Ω–∏ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {{"pairs": ["BTCUSDT", "ETHUSDT"]}} –∏–ª–∏ {{"pairs": []}}
"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
            ai_response = await deep_seek(message)

            if not ai_response:
                logger.error("‚ùå –ò–ò –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç")
                return []

            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            selected_pairs = self._parse_ai_selection(ai_response)

            logger.info(f"‚úÖ –ò–ò –≤—ã–±—Ä–∞–ª {len(selected_pairs)} –ø–∞—Ä: {selected_pairs}")
            return selected_pairs

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ò–ò: {e}")
            import traceback
            traceback.print_exc()
            return []

    def _prepare_selection_data(self, valid_signals: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–±–æ—Ä–∞ –ò–ò"""
        selection_data = []

        for signal_data in valid_signals:
            signal = signal_data.get('signal')
            if not signal:
                continue

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
            selection_item = {
                'pair': str(signal.get('pair', '')),
                'signal_type': str(signal.get('signal_type', '')),
                'confidence': int(signal.get('confidence', 0)),
                'entry_price': float(signal.get('entry_price', 0.0)),

                # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                'trend_strength': int(signal.get('trend_strength', 0)),
                'momentum_score': int(signal.get('momentum_score', 0)),
                'volume_confirmation': bool(signal.get('volume_confirmation', False)),
                'volatility_regime': str(signal.get('volatility_regime', '')),

                # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
                'market_conditions': str(signal.get('market_conditions', '')),
                'confluence_factors': list(signal.get('confluence_factors', [])),
                'warning_signals': list(signal.get('warning_signals', [])),
                'signal_quality': int(signal.get('signal_quality', 0))
            }

            selection_data.append(selection_item)

        return selection_data

    def _parse_ai_selection(self, ai_response: str) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è –æ—Ç–±–æ—Ä–∞"""
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_match = re.search(r'\{[^}]*"pairs"[^}]*\}', ai_response)
            if json_match:
                response_data = json.loads(json_match.group())
                return response_data.get('pairs', [])

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω JSON –≤ –ø—Ä–æ—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏—â–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            json_matches = re.findall(r'\{.*?"pairs".*?\}', ai_response, re.DOTALL)
            for match in json_matches:
                try:
                    response_data = json.loads(match)
                    if 'pairs' in response_data:
                        return response_data.get('pairs', [])
                except json.JSONDecodeError:
                    continue

            return []
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            logger.error(f"–û—Ç–≤–µ—Ç –ò–ò: {ai_response[:500]}...")
            return []

    async def analyze_selected_pair(self, pair_name: str, signal_data: Dict[str, Any]) -> Optional[str]:
        """
        –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã

        Args:
            pair_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.analysis_prompt:
            logger.error("‚ùå –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return None

        logger.info(f"üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {pair_name}")

        signal = signal_data.get('signal')
        if not signal:
            logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair_name}")
            return None

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
            message = f"""{self.analysis_prompt}

=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ê–†–´ ===
–ü–ê–†–ê: {signal.get('pair', pair_name)}
–°–ò–ì–ù–ê–õ: {signal.get('signal_type', 'UNKNOWN')}
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: {signal.get('confidence', 0)}%
–¶–ï–ù–ê –í–•–û–î–ê: {signal.get('entry_price', 0.0)}
–í–†–ï–ú–Ø: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(signal.get('timestamp', time.time())))}

=== –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó ===
–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {signal.get('trend_strength', 0)}/100
–ú–æ–º–µ–Ω—Ç—É–º: {signal.get('momentum_score', 0)}/100
–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–º: {'–î–∞' if signal.get('volume_confirmation', False) else '–ù–µ—Ç'}
–†–µ–∂–∏–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {signal.get('volatility_regime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

=== –û–¶–ï–ù–ö–ê –†–ò–°–ö–û–í ===
–£—Å–ª–æ–≤–∏—è —Ä—ã–Ω–∫–∞: {signal.get('market_conditions', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–§–∞–∫—Ç–æ—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {signal.get('confluence_factors', [])}
–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {signal.get('warning_signals', [])}
–ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞: {signal.get('signal_quality', 0)}/100

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏–≥–Ω–∞–ª –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ.
"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑
            analysis_result = await deep_seek(message)

            if analysis_result:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–Ω–∞–ª–∏–∑ –¥–ª—è {pair_name}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._save_analysis_result(pair_name, signal, analysis_result)

                return analysis_result
            else:
                logger.error(f"‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è {pair_name}")
                return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {pair_name}: {e}")
            import traceback
            traceback.print_exc()
            return None

    def _save_analysis_result(self, pair_name: str, signal: Dict[str, Any], analysis: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª"""
        try:
            with open('ai_trading_analysis.log', 'a', encoding='utf-8') as f:
                f.write(f"\n{'=' * 80}\n")
                f.write(f"–ü–ê–†–ê: {pair_name}\n")
                f.write(f"–í–†–ï–ú–Ø: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(
                    f"–°–ò–ì–ù–ê–õ: {signal.get('signal_type', 'UNKNOWN')} | –£–í–ï–†–ï–ù–ù–û–°–¢–¨: {signal.get('confidence', 0)}%\n")
                f.write(f"–¶–ï–ù–ê: {signal.get('entry_price', 0.0)}\n")
                f.write(f"–ö–ê–ß–ï–°–¢–í–û: {signal.get('signal_quality', 0)}/100\n")
                f.write(f"\n–ê–ù–ê–õ–ò–ó –ò–ò:\n{analysis}\n")
                f.write("=" * 80 + "\n")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø–æ–¥—Ö–æ–¥:
    1. –ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä
    2. –ò–ò –æ—Ç–±–æ—Ä –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö
    """
    logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
    logger.info("üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è EMA+TSI –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ 15M")
    logger.info("üéØ –¶–µ–ª—å: –ü–æ–∏—Å–∫ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    analyzer = OptimizedTradingAnalyzer(
        batch_size=100,
        min_confidence=60  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–±–æ—Ä–∞
    )

    ai_orchestrator = AITradingOrchestrator()

    try:
        # ===== –≠–¢–ê–ü 1: –ú–ê–°–°–û–í–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï =====
        logger.info("\nüîç –≠–¢–ê–ü 1: –ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤")

        scan_result = await analyzer.scan_all_markets()

        if not scan_result['success']:
            logger.error(f"‚ùå –≠–¢–ê–ü 1 –ü–†–û–í–ê–õ–ï–ù: {scan_result.get('error')}")
            return

        valid_signals = scan_result['valid_signals']

        if not valid_signals:
            logger.info("‚ÑπÔ∏è  –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {scan_result['statistics']}")
            return

        logger.info(f"‚úÖ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù: –ù–∞–π–¥–µ–Ω–æ {len(valid_signals)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

        # ===== –≠–¢–ê–ü 2: –ò–ò –û–¢–ë–û–† =====
        logger.info("\nü§ñ –≠–¢–ê–ü 2: –ò–ò –æ—Ç–±–æ—Ä –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

        selected_pairs = await ai_orchestrator.select_best_pairs(valid_signals)

        if not selected_pairs:
            logger.info("‚ÑπÔ∏è  –ò–ò –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã")
            return

        logger.info(f"‚úÖ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù: –í—ã–±—Ä–∞–Ω–æ {len(selected_pairs)} –ø–∞—Ä")

        # ===== –≠–¢–ê–ü 3: –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó =====
        logger.info("\nüìä –≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä")

        successful_analyses = 0

        for pair_name in selected_pairs:
            # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
            signal_data = None
            for signal_info in valid_signals:
                if signal_info.get('signal', {}).get('pair') == pair_name:
                    signal_data = signal_info
                    break

            if not signal_data:
                logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è {pair_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                continue

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—É
            analysis_result = await ai_orchestrator.analyze_selected_pair(pair_name, signal_data)

            if analysis_result:
                successful_analyses += 1
                logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ {pair_name} –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {pair_name}")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –ò–ò
            await asyncio.sleep(1)

        # ===== –ò–¢–û–ì–ò =====
        logger.info(f"\nüéâ –í–°–ï –≠–¢–ê–ü–´ –ó–ê–í–ï–†–®–ï–ù–´!")
        logger.info(f"üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: {scan_result['total_pairs']}")
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(valid_signals)}")
        logger.info(f"ü§ñ –ò–ò –≤—ã–±—Ä–∞–ª –ø–∞—Ä: {len(selected_pairs)}")
        logger.info(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {successful_analyses}")
        logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ai_trading_analysis.log")
        logger.info(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {scan_result['execution_time']:.2f}—Å–µ–∫")

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    logger.info("=" * 80)
    logger.info("üéØ –¢–û–†–ì–û–í–´–ô –ë–û–¢ - –°–ö–ê–õ–¨–ü–ò–ù–ì EMA+TSI")
    logger.info("üìä –í–µ—Ä—Å–∏—è: 3.0 (–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)")
    logger.info("‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: 15 –º–∏–Ω—É—Ç")
    logger.info("üöÄ –†–µ–∂–∏–º: –ü—Ä–æ–¥–∞–∫—à–Ω (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏)")
    logger.info("=" * 80)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    except Exception as e:
        logger.error(f"üí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
    finally:
        logger.info("üîö –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")