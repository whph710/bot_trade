import asyncio
import time
import json
import logging
import re
import os
from typing import Dict, List, Optional, Tuple

from func_async import get_usdt_linear_symbols, get_klines_async
from func_trade import (
    calculate_atr,
    analyze_last_candle,
    get_detailed_signal_info,
    check_tsi_confirmation
)
from deepseek import deep_seek

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class TradingAnalyzer:
    def __init__(self,
                 atr_threshold: float = 0.01,
                 min_pairs_per_direction: int = 0,  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 5 –¥–æ 3 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                 use_tsi_filter: bool = True,
                 tsi_long: int = 25,
                 tsi_short: int = 13,
                 tsi_signal: int = 13):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏

        Args:
            atr_threshold: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ ATR –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            min_pairs_per_direction: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–∞–∂–¥–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            use_tsi_filter: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TSI –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            tsi_long: –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ TSI
            tsi_short: –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ TSI
            tsi_signal: –ü–µ—Ä–∏–æ–¥ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ TSI
        """
        self.atr_threshold = atr_threshold
        self.min_pairs_per_direction = min_pairs_per_direction
        self.use_tsi_filter = use_tsi_filter
        self.tsi_long = tsi_long
        self.tsi_short = tsi_short
        self.tsi_signal = tsi_signal

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.ema_signal_counts = {'LONG': 0, 'SHORT': 0, 'NO_SIGNAL': 0}
        self.tsi_confirmation_counts = {'LONG': 0, 'SHORT': 0, 'REJECTED': 0}

        if use_tsi_filter:
            logger.info(f"üîç TSI —Ñ–∏–ª—å—Ç—Ä –í–ö–õ–Æ–ß–ï–ù (–ø–µ—Ä–∏–æ–¥—ã: {tsi_long}, {tsi_short}, {tsi_signal})")
        else:
            logger.info("‚ö†Ô∏è  TSI —Ñ–∏–ª—å—Ç—Ä –û–¢–ö–õ–Æ–ß–ï–ù")

    def read_prompt_file(self, filename: str, default_content: str = "") -> str:
        """
        –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫

        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            default_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        try:
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as file:
                    content = file.read().strip()
                    if content:
                        logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {filename}")
                        return content
                    else:
                        logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª {filename} –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            else:
                logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")

        return default_content

    async def collect_and_filter_by_atr(self) -> List[str]:
        """
        –≠—Ç–∞–ø 1: –°–±–æ—Ä –≤—Å–µ—Ö –ø–∞—Ä –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ ATR

        Returns:
            –°–ø–∏—Å–æ–∫ –ø–∞—Ä, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ ATR
        """
        logger.info("=" * 60)
        logger.info("–≠–¢–ê–ü 1: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ ATR")
        logger.info("=" * 60)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ USDT –ø–∞—Ä—ã
        all_pairs = await get_usdt_linear_symbols()
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ ATR
        filtered_pairs = []
        semaphore = asyncio.Semaphore(20)

        async def check_atr_for_pair(pair: str) -> Optional[Tuple[str, float]]:
            async with semaphore:
                try:
                    candles = await get_klines_async(symbol=pair, interval=15, limit=50)
                    if not candles or len(candles) < 20:
                        return None

                    atr = calculate_atr(candles, period=14)
                    if atr >= self.atr_threshold:
                        return pair, atr
                    return None
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ATR –¥–ª—è {pair}: {e}")
                    return None

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
        batch_size = 50
        atr_results = []

        for i in range(0, len(all_pairs), batch_size):
            batch = all_pairs[i:i + batch_size]
            tasks = [check_atr_for_pair(pair) for pair in batch]
            results = await asyncio.gather(*tasks, return_exceptions=True)

            for result in results:
                if isinstance(result, tuple):
                    pair, atr_value = result
                    atr_results.append((pair, atr_value))
                    filtered_pairs.append(pair)

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {min(i + batch_size, len(all_pairs))} –ø–∞—Ä, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {len(filtered_pairs)}")
            await asyncio.sleep(0.1)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ATR (–ø–æ —É–±—ã–≤–∞–Ω–∏—é - –±–æ–ª–µ–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –ø–µ—Ä–≤—ã–º–∏)
        atr_results.sort(key=lambda x: x[1], reverse=True)
        filtered_pairs = [pair for pair, _ in atr_results]

        logger.info(f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ ATR –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(filtered_pairs)} –ø–∞—Ä –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä")
        if atr_results:
            logger.info(f"üìà –¢–û–ü-5 –ø–æ ATR: {[(pair, f'{atr:.6f}') for pair, atr in atr_results[:5]]}")

        return filtered_pairs

    async def analyze_ema_signals(self, pairs: List[str]) -> Dict[str, List[str]]:
        """
        –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ EMA —Å–∏–≥–Ω–∞–ª–æ–≤ —Å TSI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è

        Args:
            pairs: –°–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        """
        logger.info("=" * 60)
        logger.info(f"–≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑ EMA —Å–∏–≥–Ω–∞–ª–æ–≤ {'—Å TSI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º' if self.use_tsi_filter else '–±–µ–∑ TSI'}")
        logger.info("=" * 60)

        long_pairs = []
        short_pairs = []
        semaphore = asyncio.Semaphore(25)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.ema_signal_counts = {'LONG': 0, 'SHORT': 0, 'NO_SIGNAL': 0}
        self.tsi_confirmation_counts = {'LONG': 0, 'SHORT': 0, 'REJECTED': 0}

        async def analyze_pair_ema(pair: str) -> Optional[Tuple[str, str, Dict]]:
            async with semaphore:
                try:
                    # –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è TSI
                    limit = 150 if self.use_tsi_filter else 100
                    candles = await get_klines_async(symbol=pair, interval=15, limit=limit)

                    if not candles or len(candles) < (100 if self.use_tsi_filter else 50):
                        return None

                    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º EMA —Å–∏–≥–Ω–∞–ª –±–µ–∑ TSI
                    ema_signal = analyze_last_candle(
                        candles,
                        use_tsi_filter=False  # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π EMA —Å–∏–≥–Ω–∞–ª
                    )

                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ EMA —Å–∏–≥–Ω–∞–ª–æ–≤
                    self.ema_signal_counts[ema_signal] += 1

                    if ema_signal not in ['LONG', 'SHORT']:
                        return None

                    # –ï—Å–ª–∏ TSI —Ñ–∏–ª—å—Ç—Ä –≤–∫–ª—é—á–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    if self.use_tsi_filter:
                        tsi_confirmed = check_tsi_confirmation(
                            candles,
                            ema_signal,
                            self.tsi_long,
                            self.tsi_short,
                            self.tsi_signal
                        )

                        if tsi_confirmed:
                            self.tsi_confirmation_counts[ema_signal] += 1
                        else:
                            self.tsi_confirmation_counts['REJECTED'] += 1
                            return None

                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    signal_details = get_detailed_signal_info(
                        candles,
                        use_tsi_filter=self.use_tsi_filter,
                        tsi_long=self.tsi_long,
                        tsi_short=self.tsi_short,
                        tsi_signal=self.tsi_signal
                    )

                    return pair, ema_signal, signal_details

                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ EMA –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {pair}: {e}")
                    return None

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º EMA —Å–∏–≥–Ω–∞–ª—ã
        batch_size = 40
        for i in range(0, len(pairs), batch_size):
            batch = pairs[i:i + batch_size]
            tasks = [analyze_pair_ema(pair) for pair in batch]
            results = await asyncio.gather(*tasks, return_exceptions=True)

            for result in results:
                if isinstance(result, tuple):
                    pair, signal, details = result
                    if signal == 'LONG':
                        long_pairs.append(pair)
                    elif signal == 'SHORT':
                        short_pairs.append(pair)

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {min(i + batch_size, len(pairs))} –ø–∞—Ä")
            await asyncio.sleep(0.1)

        # –í—ã–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info("üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê EMA –°–ò–ì–ù–ê–õ–û–í:")
        for signal_type, count in self.ema_signal_counts.items():
            logger.info(f"   {signal_type}: {count}")

        if self.use_tsi_filter:
            logger.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TSI –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ô:")
            for conf_type, count in self.tsi_confirmation_counts.items():
                logger.info(f"   {conf_type}: {count}")

        logger.info(f"‚úÖ EMA –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: LONG={len(long_pairs)}, SHORT={len(short_pairs)}")
        return {'LONG': long_pairs, 'SHORT': short_pairs}

    async def prepare_pairs_data(self, pairs: List[str]) -> Dict[str, Dict]:
        """
        –≠—Ç–∞–ø 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Args:
            pairs: –°–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä
        """
        logger.info("=" * 60)
        logger.info(f"–≠–¢–ê–ü 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(pairs)} –ø–∞—Ä")
        logger.info("=" * 60)

        pairs_with_data = {}
        semaphore = asyncio.Semaphore(25)

        async def get_pair_data(pair: str) -> Optional[Tuple[str, Dict]]:
            async with semaphore:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ (–±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è TSI)
                    limit = 150 if self.use_tsi_filter else 100
                    candles = await get_klines_async(symbol=pair, interval=15, limit=limit)

                    if not candles or len(candles) < (100 if self.use_tsi_filter else 50):
                        return None

                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ EMA —Å TSI
                    ema_details = get_detailed_signal_info(
                        candles,
                        use_tsi_filter=self.use_tsi_filter,
                        tsi_long=self.tsi_long,
                        tsi_short=self.tsi_short,
                        tsi_signal=self.tsi_signal
                    )
                    atr = calculate_atr(candles, period=14)

                    return pair, {
                        'candles': candles,
                        'ema_details': ema_details,
                        'atr': atr
                    }
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pair}: {e}")
                    return None

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞–º–∏
        batch_size = 30
        for i in range(0, len(pairs), batch_size):
            batch = pairs[i:i + batch_size]
            tasks = [get_pair_data(pair) for pair in batch]
            results = await asyncio.gather(*tasks, return_exceptions=True)

            for result in results:
                if isinstance(result, tuple):
                    pair, data = result
                    pairs_with_data[pair] = data

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {min(i + batch_size, len(pairs))} –ø–∞—Ä")
            await asyncio.sleep(0.1)

        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {len(pairs_with_data)} –ø–∞—Ä")
        return pairs_with_data

    async def analyze_direction_with_ai(self, pairs_data: Dict[str, Dict], direction: str) -> Optional[str]:
        """
        –≠—Ç–∞–ø 4: –ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò

        Args:
            pairs_data: –î–∞–Ω–Ω—ã–µ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ('LONG' –∏–ª–∏ 'SHORT')

        Returns:
            –í—ã–±—Ä–∞–Ω–Ω–∞—è –ò–ò –ø–∞—Ä–∞ –∏–ª–∏ None
        """
        if not pairs_data:
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction}")
            return None

        logger.info("=" * 60)
        logger.info(f"–≠–¢–ê–ü 4: –ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction} —Å –ø–æ–º–æ—â—å—é –ò–ò ({len(pairs_data)} –ø–∞—Ä)")
        logger.info("=" * 60)

        try:
            # –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            prompt2 = self.read_prompt_file(
                "prompt2.txt",
                """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ Python —Å–ª–æ–≤–∞—Ä—è.
                –§–æ—Ä–º–∞—Ç: {'pairs': ['BTCUSDT', 'ETHUSDT']}. –í—ã–±–µ—Ä–∏ –¥–æ 5 –ª—É—á—à–∏—Ö –ø–∞—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.
                –£—á–∏—Ç—ã–≤–∞–π EMA —Å–∏–≥–Ω–∞–ª—ã, TSI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ ATR –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—É—á—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."""
            )

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò
            analysis_data = {}
            for pair, data in pairs_data.items():
                ema_details = data['ema_details']
                analysis_data[pair] = {
                    'candles_recent': data['candles'][-20:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π
                    'ema_signal': ema_details['signal'],
                    'ema_alignment': ema_details['ema_alignment'],
                    'atr': data['atr'],
                    'last_price': ema_details['last_price'],
                    'ema_fast_value': ema_details['ema_fast_value'],
                    'ema_medium_value': ema_details['ema_medium_value'],
                    'ema_slow_value': ema_details['ema_slow_value'],
                    'tsi_used': ema_details.get('tsi_used', self.use_tsi_filter),
                    'tsi_confirmed': ema_details.get('tsi_confirmed', False)
                }

                # –î–æ–±–∞–≤–ª—è–µ–º TSI –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                if 'tsi_value' in ema_details:
                    analysis_data[pair]['tsi_value'] = ema_details['tsi_value']
                    analysis_data[pair]['tsi_signal_value'] = ema_details['tsi_signal_value']
                    analysis_data[pair]['tsi_histogram'] = ema_details['tsi_histogram']

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            tsi_info = f" —Å TSI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º (–ø–µ—Ä–∏–æ–¥—ã: {self.tsi_long}, {self.tsi_short}, {self.tsi_signal})" if self.use_tsi_filter else ""
            direction_prompt = f"""
            {prompt2}

            –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û {direction} –ø–æ–∑–∏—Ü–∏–∏!

            –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}
            EMA –°–∏–≥–Ω–∞–ª—ã: –í—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã –∏–º–µ—é—Ç {direction} —Å–∏–≥–Ω–∞–ª{tsi_info}

            –î–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—é—Ç:
            - –°–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)
            - EMA —Å–∏–≥–Ω–∞–ª—ã –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ (7, 14, 28 –ø–µ—Ä–∏–æ–¥—ã)
            - TSI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ): –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ TSI –ª–∏–Ω–∏–∏ —Å —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–µ–π
            - ATR –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            - –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è EMA –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞

            {'TSI –õ–æ–≥–∏–∫–∞: –¥–ª—è LONG - TSI –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö, –¥–ª—è SHORT - —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑' if self.use_tsi_filter else ''}
            """

            # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            ai_response = await deep_seek(
                data=str(analysis_data),
                prompt=direction_prompt,
                max_tokens=1500,
                timeout=30
            )

            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            selected_pairs = self.parse_ai_response(ai_response)
            if not selected_pairs:
                logger.warning(f"–ò–ò –Ω–µ —Å–º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –ø–∞—Ä—ã –¥–ª—è {direction}")
                return None

            logger.info(f"ü§ñ –ò–ò –≤—ã–±—Ä–∞–ª {len(selected_pairs)} –ø–∞—Ä –¥–ª—è {direction}: {selected_pairs}")

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            selected_pair = selected_pairs[0]
            return selected_pair

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction}: {e}")
            return None

    async def final_analysis_with_ai(self, pair: str, pair_data: Dict, direction: str) -> Optional[Dict]:
        """
        –≠—Ç–∞–ø 5: –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞, —Å—Ç–æ–ø–∞ –∏ —Ç–µ–π–∫–∞

        Args:
            pair: –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞—Ä–∞
            pair_data: –î–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        logger.info("=" * 60)
        logger.info(f"–≠–¢–ê–ü 5: –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {pair} ({direction})")
        logger.info("=" * 60)

        try:
            # –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            main_prompt = self.read_prompt_file(
                "prompt.txt",
                """–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
                –£–∫–∞–∂–∏ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞, —Å—Ç–æ–ø-–ª–æ—Å—Å, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–ª–µ—á–æ.
                –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ EMA, TSI –∏ ATR."""
            )

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            full_data = {
                'pair': pair,
                'direction': direction,
                'full_candles': pair_data['candles'],
                'ema_details': pair_data['ema_details'],
                'atr': pair_data['atr'],
                'current_price': pair_data['ema_details']['last_price']
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            tsi_confirmation = ""
            if self.use_tsi_filter and pair_data['ema_details'].get('tsi_confirmed'):
                tsi_confirmation = f"\n‚úÖ TSI –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: –°–∏–≥–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º TSI (–ø–µ—Ä–∏–æ–¥—ã: {self.tsi_long}, {self.tsi_short}, {self.tsi_signal})"

            final_prompt = f"""
            {main_prompt}

            –¢–û–†–ì–û–í–û–ï –ó–ê–î–ê–ù–ò–ï:
            –ü–∞—Ä–∞: {pair}
            –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}
            –§–∏–ª—å—Ç—Ä—ã: EMA –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ{'+ TSI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ' if self.use_tsi_filter else ''}{tsi_confirmation}

            –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å:
            1. –¢–æ—á–∫—É –≤—Ö–æ–¥–∞ (Entry)
            2. –°—Ç–æ–ø-–ª–æ—Å—Å (Stop Loss)
            3. –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (Take Profit)
            4. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–ª–µ—á–æ (Leverage)

            –î–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—é—Ç:
            - –ü–æ–ª–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            - EMA —Å–∏–≥–Ω–∞–ª—ã (7, 14, 28)
            {'- TSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è' if self.use_tsi_filter else ''}
            - ATR –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            - –¢–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ EMA –∑–Ω–∞—á–µ–Ω–∏—è

            –í–ê–ñ–ù–û: –í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {direction}!
            –ò—Å–ø–æ–ª—å–∑—É–π ATR –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞.
            """

            # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            ai_response = await deep_seek(
                data=str(full_data),
                prompt=final_prompt,
                max_tokens=2000,
                timeout=45
            )

            return {
                'pair': pair,
                'direction': direction,
                'analysis': ai_response,
                'current_price': pair_data['ema_details']['last_price'],
                'atr': pair_data['atr'],
                'ema_signal': pair_data['ema_details']['signal'],
                'tsi_used': pair_data['ema_details'].get('tsi_used', self.use_tsi_filter),
                'tsi_confirmed': pair_data['ema_details'].get('tsi_confirmed', False)
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ {pair}: {e}")
            return None

    def parse_ai_response(self, ai_response: str) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä"""
        if not ai_response:
            return []

        # –ü–æ–∏—Å–∫ JSON
        try:
            data = json.loads(ai_response.strip())
            if isinstance(data, dict) and 'pairs' in data:
                return data['pairs'][:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –ø–∞—Ä
        except json.JSONDecodeError:
            pass

        # –ü–æ–∏—Å–∫ –ø–∞—Ä –≤ —Ç–µ–∫—Å—Ç–µ
        pairs_pattern = r'["\']([A-Z]+USDT)["\']'
        found_pairs = re.findall(pairs_pattern, ai_response)

        if found_pairs:
            return list(dict.fromkeys(found_pairs))[:5]  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –º–∞–∫—Å–∏–º—É–º 5

        return []

    async def run_full_analysis(self) -> Dict[str, Optional[Dict]]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è LONG –∏ SHORT
        """
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–û–†–ì–û–í–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
        start_time = time.time()

        try:
            # –≠—Ç–∞–ø 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ ATR
            atr_filtered_pairs = await self.collect_and_filter_by_atr()
            if len(atr_filtered_pairs) < 20:
                logger.warning("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä –ø—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ ATR")
                return {'LONG': None, 'SHORT': None}

            # –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ EMA —Å–∏–≥–Ω–∞–ª–æ–≤ —Å TSI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            ema_signals = await self.analyze_ema_signals(atr_filtered_pairs)

            results = {}

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            for direction in ['LONG', 'SHORT']:
                direction_pairs = ema_signals.get(direction, [])

                if len(direction_pairs) < self.min_pairs_per_direction:
                    logger.warning(
                        f"‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä –¥–ª—è {direction}: {len(direction_pairs)} (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {self.min_pairs_per_direction})")
                    results[direction] = None
                    continue

                # –≠—Ç–∞–ø 3: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä
                pairs_with_data = await self.prepare_pairs_data(direction_pairs)

                if not pairs_with_data:
                    logger.warning(f"‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {direction}")
                    results[direction] = None
                    continue

                # –≠—Ç–∞–ø 4: –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ò–ò
                selected_pair = await self.analyze_direction_with_ai(pairs_with_data, direction)

                if not selected_pair or selected_pair not in pairs_with_data:
                    logger.warning(f"‚ö†Ô∏è  –ò–ò –Ω–µ –≤—ã–±—Ä–∞–ª –ø–∞—Ä—É –¥–ª—è {direction}")
                    results[direction] = None
                    continue

                # –≠—Ç–∞–ø 5: –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                final_result = await self.final_analysis_with_ai(
                    selected_pair,
                    pairs_with_data[selected_pair],
                    direction
                )

                results[direction] = final_result

            elapsed_time = time.time() - start_time
            logger.info(f"‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")

            return results

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return {'LONG': None, 'SHORT': None}


def print_results(results: Dict[str, Optional[Dict]]):
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\n" + "=" * 80)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–û–†–ì–û–í–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 80)

    for direction in ['LONG', 'SHORT']:
        result = results.get(direction)

        print(f"\nüìä {direction} –ü–û–ó–ò–¶–ò–Ø:")
        print("-" * 40)

        if result:
            print(f"–ü–∞—Ä–∞: {result['pair']}")
            print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {result['direction']}")
            print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {result['current_price']}")
            print(f"ATR: {result['atr']:.6f}")
            print(f"EMA —Å–∏–≥–Ω–∞–ª: {result['ema_signal']}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TSI
            if result.get('tsi_used', False):
                tsi_status = "‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù" if result.get('tsi_confirmed', False) else "‚ùå –ù–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù"
                print(f"TSI —Ñ–∏–ª—å—Ç—Ä: {tsi_status}")
            else:
                print("TSI —Ñ–∏–ª—å—Ç—Ä: –û–¢–ö–õ–Æ–ß–ï–ù")

            print(f"\n–ê–ù–ê–õ–ò–ó:")
            print("-" * 20)
            print(result['analysis'])
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")

    print("\n" + "=" * 80)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üî• –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")

    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å TSI —Ñ–∏–ª—å—Ç—Ä–æ–º
        analyzer = TradingAnalyzer(
            atr_threshold=0.01,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ATR
            min_pairs_per_direction=3,  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            use_tsi_filter=True,  # –í–∫–ª—é—á–∞–µ–º TSI —Ñ–∏–ª—å—Ç—Ä
            tsi_long=25,  # –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ TSI
            tsi_short=13,  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ TSI
            tsi_signal=13  # –ü–µ—Ä–∏–æ–¥ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ TSI
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        results = await analyzer.run_full_analysis()

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print_results(results)

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")


if __name__ == "__main__":
    asyncio.run(main())