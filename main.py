import asyncio
import json
import logging
from func_trade import get_signal_details

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ EMA+TSI –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    """
    try:
        logger.info("üöÄ –ó–ê–ü–£–°–ö EMA+TSI –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
        logger.info("=" * 70)

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:
        analyzer = get_signal_details(
            ema1_period=7,  # –ë—ã—Å—Ç—Ä–∞—è EMA
            ema2_period=14,  # –°—Ä–µ–¥–Ω—è—è EMA
            ema3_period=28,  # –ú–µ–¥–ª–µ–Ω–Ω–∞—è EMA
            tsi_long=25,  # –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ TSI
            tsi_short=13,  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ TSI
            tsi_signal=13  # –ü–µ—Ä–∏–æ–¥ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ TSI
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        result = await analyzer.get_signal_details()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result['success']:
            logger.info("=" * 70)
            logger.info("‚úÖ –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù")
            logger.info("=" * 70)

            # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result['execution_time']:.2f} —Å–µ–∫—É–Ω–¥")
            logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∞—Ä: {result['total_pairs_checked']}")

            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_counts = result['signal_counts']
            logger.info(f"üìà LONG —Å–∏–≥–Ω–∞–ª—ã: {signal_counts['LONG']}")
            logger.info(f"üìâ SHORT —Å–∏–≥–Ω–∞–ª—ã: {signal_counts['SHORT']}")
            logger.info(f"‚ö™ –ë–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤: {signal_counts['NO_SIGNAL']}")

            total_signals = signal_counts['LONG'] + signal_counts['SHORT']
            logger.info(f"üéØ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {total_signals}")

            # –ê–Ω–∞–ª–∏–∑ –ò–ò
            ai_result = result['result']
            if ai_result and 'ai_analysis' in ai_result:
                logger.info("=" * 70)
                logger.info("ü§ñ –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê –ù–ï–ô–†–û–°–ï–¢–ò:")
                logger.info("=" * 70)
                print(ai_result['ai_analysis'])

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                save_results_to_file(result)

            else:
                logger.warning("‚ö†Ô∏è  –ê–Ω–∞–ª–∏–∑ –ò–ò –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

        else:
            logger.error("‚ùå –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô")
            logger.error(f"–ü—Ä–∏—á–∏–Ω–∞: {result.get('message', 'Unknown error')}")

            if 'signal_counts' in result:
                logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∞—Ä: {result['total_pairs_checked']}")
                logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {result['signal_counts']}")

    except KeyboardInterrupt:
        logger.info("üõë –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        import traceback
        logger.error(traceback.format_exc())


def save_results_to_file(result):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª

    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    """
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_data = {
            'execution_time': result['execution_time'],
            'total_pairs_checked': result['total_pairs_checked'],
            'signal_counts': result['signal_counts'],
            'ai_analysis': result['result'].get('ai_analysis', ''),
            'signals_found': []
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
        if 'pairs_data' in result['result']:
            for pair_info in result['result']['pairs_data']:
                save_data['signals_found'].append({
                    'pair': pair_info['pair'],
                    'signal': pair_info['signal'],
                    'last_price': pair_info['details']['last_price'],
                    'ema_alignment': pair_info['details']['ema_alignment'],
                    'tsi_crossover_direction': pair_info['details']['tsi_crossover_direction'],
                    'reason': pair_info['details']['reason']
                })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
        with open('trading_analysis_result.json', 'w', encoding='utf-8') as f:
            json.dump(save_data, f, indent=2, ensure_ascii=False, default=str)

        logger.info("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª 'trading_analysis_result.json'")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")


if __name__ == "__main__":
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
    """
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()