import asyncio
import json
import logging
import time
import math
import numpy as np
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass, asdict
import re
import datetime
from decimal import Decimal, ROUND_HALF_UP

# –ò–º–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
from func_async import get_klines_async, get_usdt_trading_pairs, get_orderbook_async, get_24h_stats_async
from deepseek import deep_seek_selection, deep_seek_analysis, cleanup_http_client
from func_trade import (
    calculate_advanced_scalping_indicators,
    analyze_market_microstructure,
    detect_liquidity_grab_pattern,
    calculate_dynamic_levels
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scalping_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ö–ê–õ–¨–ü–ò–ù–ì–ê (—Å–æ–≥–ª–∞—Å–Ω–æ —á–µ–∫-–ª–∏—Å—Ç—É)
SCALPING_CONFIG = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    'primary_timeframe': '5m',  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
    'confirmation_timeframe': '15m',  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
    'candles_for_scan': 100,  # –°–≤–µ—á–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    'candles_for_analysis': 50,  # –°–≤–µ—á–∏ –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞
    'candles_for_detailed': 200,  # –°–≤–µ—á–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (—á–µ–∫-–ª–∏—Å—Ç)
    'min_24h_volume': 100_000_000,  # > 100 –º–ª–Ω $
    'min_orderbook_depth': 100_000,  # ‚â• $100,000 –≤ —Ç–æ–ø-10
    'max_spread_percent': 0.05,  # ‚â§ 0.05% —Ü–µ–Ω—ã
    'min_atr_percent': 0.4,  # ‚â• 0.4% –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∏–∫–æ–≤
    'max_correlation': 0.9,  # < 0.9 –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–∏

    # –¢–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã (EU/US overlap)
    'active_hours': list(range(14, 21)),  # 14:00-20:00 UTC
    'forbidden_hours': [22, 23, 0, 1, 2, 3, 4, 5, 6, 7, 8],

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    'batch_size': 30,  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    'max_pairs_for_ai_selection': 15,  # –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ò–ò
    'max_pairs_for_detailed': 5,  # –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    'min_confidence_threshold': 75,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞

    # –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
    'max_position_risk': 0.02,  # –ú–∞–∫—Å–∏–º—É–º 2% –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
    'min_risk_reward': 1.5,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
    'adaptive_stop_multiplier': 1.2,  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–æ–ø–∞
}


@dataclass
class LiquidityMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä"""
    symbol: str
    volume_24h: float
    orderbook_depth_bid: float
    orderbook_depth_ask: float
    spread_percent: float
    atr_percent: float
    funding_rate: float

    def passes_liquidity_filter(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
        return (
                self.volume_24h >= SCALPING_CONFIG['min_24h_volume'] and
                min(self.orderbook_depth_bid, self.orderbook_depth_ask) >= SCALPING_CONFIG['min_orderbook_depth'] and
                self.spread_percent <= SCALPING_CONFIG['max_spread_percent'] and
                self.atr_percent >= SCALPING_CONFIG['min_atr_percent']
        )


@dataclass
class ScalpingSignal:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    symbol: str
    direction: str  # 'LONG', 'SHORT', 'NO_SIGNAL'
    confidence: int
    entry_price: float
    timestamp: int

    # –£—Ä–æ–≤–Ω–∏ –∏ —Ä–∏—Å–∫–∏
    stop_loss: float
    take_profit: float
    risk_reward_ratio: float
    position_size_percent: float

    # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    liquidity_score: int
    microstructure_score: int
    volume_confirmation: bool
    pattern_strength: int

    # –ü—Ä–∏—á–∏–Ω—ã –≤—Ö–æ–¥–∞
    entry_reasons: List[str]
    risk_factors: List[str]

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞
    primary_candles: List = None
    confirmation_candles: List = None
    indicators_data: Dict = None
    microstructure_data: Dict = None


class AdvancedMarketScanner:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        self.session_start = time.time()
        self.processed_pairs_cache = {}
        logger.info("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def is_optimal_trading_time(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        current_hour = datetime.datetime.utcnow().hour
        return current_hour in SCALPING_CONFIG['active_hours']

    async def get_liquidity_metrics(self, symbol: str) -> Optional[LiquidityMetrics]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–∞—Ä—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º 24h —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_24h = await get_24h_stats_async(symbol)
            if not stats_24h:
                return None

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫
            orderbook = await get_orderbook_async(symbol, limit=10)
            if not orderbook or 'bids' not in orderbook or 'asks' not in orderbook:
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É —Å—Ç–∞–∫–∞–Ω–∞ (—Ç–æ–ø-10 —É—Ä–æ–≤–Ω–µ–π)
            bid_depth = sum(float(bid[0]) * float(bid[1]) for bid in orderbook['bids'][:10])
            ask_depth = sum(float(ask[0]) * float(ask[1]) for ask in orderbook['asks'][:10])

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
            best_bid = float(orderbook['bids'][0][0])
            best_ask = float(orderbook['asks'][0][0])
            spread_percent = ((best_ask - best_bid) / best_bid) * 100

            # –ü–æ–ª—É—á–∞–µ–º ATR –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            candles = await get_klines_async(symbol, SCALPING_CONFIG['primary_timeframe'], limit=20)
            if not candles:
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ATR
            atr_values = []
            for i in range(1, len(candles)):
                high = float(candles[i][2])
                low = float(candles[i][3])
                prev_close = float(candles[i - 1][4])

                tr = max(
                    high - low,
                    abs(high - prev_close),
                    abs(low - prev_close)
                )
                atr_values.append(tr)

            current_price = float(candles[-1][4])
            atr_percent = (np.mean(atr_values[-14:]) / current_price) * 100 if atr_values else 0

            return LiquidityMetrics(
                symbol=symbol,
                volume_24h=float(stats_24h.get('volume', 0)) * current_price,  # –í USDT
                orderbook_depth_bid=bid_depth,
                orderbook_depth_ask=ask_depth,
                spread_percent=spread_percent,
                atr_percent=atr_percent,
                funding_rate=float(stats_24h.get('fundingRate', 0)) * 100
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ {symbol}: {e}")
            return None

    async def filter_liquid_pairs(self, pairs: List[str]) -> List[str]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
        logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è {len(pairs)} –ø–∞—Ä –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")

        liquid_pairs = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        for i in range(0, len(pairs), SCALPING_CONFIG['batch_size']):
            batch = pairs[i:i + SCALPING_CONFIG['batch_size']]

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [self.get_liquidity_metrics(pair) for pair in batch]
            results = await asyncio.gather(*tasks, return_exceptions=True)

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for pair, metrics in zip(batch, results):
                if isinstance(metrics, LiquidityMetrics) and metrics.passes_liquidity_filter():
                    liquid_pairs.append(pair)
                    logger.debug(
                        f"‚úÖ {pair}: V={metrics.volume_24h / 1e6:.1f}M, S={metrics.spread_percent:.3f}%, ATR={metrics.atr_percent:.2f}%")
                elif isinstance(metrics, Exception):
                    logger.error(f"‚ùå {pair}: {metrics}")

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(0.1)

        logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(liquid_pairs)} –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä –∏–∑ {len(pairs)}")
        return liquid_pairs

    async def scan_pair_for_signals(self, symbol: str) -> Optional[ScalpingSignal]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
            primary_candles = await get_klines_async(
                symbol,
                SCALPING_CONFIG['primary_timeframe'],
                limit=SCALPING_CONFIG['candles_for_scan']
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
            confirmation_candles = await get_klines_async(
                symbol,
                SCALPING_CONFIG['confirmation_timeframe'],
                limit=50
            )

            if not primary_candles or not confirmation_candles:
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = calculate_advanced_scalping_indicators(primary_candles)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—É
            microstructure = await analyze_market_microstructure(symbol)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
            signal_data = self._evaluate_scalping_signal(
                symbol, primary_candles, confirmation_candles,
                indicators, microstructure
            )

            if signal_data['direction'] == 'NO_SIGNAL':
                return None

            return ScalpingSignal(
                symbol=symbol,
                direction=signal_data['direction'],
                confidence=signal_data['confidence'],
                entry_price=signal_data['entry_price'],
                timestamp=int(time.time()),

                stop_loss=signal_data['stop_loss'],
                take_profit=signal_data['take_profit'],
                risk_reward_ratio=signal_data['risk_reward_ratio'],
                position_size_percent=signal_data['position_size_percent'],

                liquidity_score=signal_data['liquidity_score'],
                microstructure_score=signal_data['microstructure_score'],
                volume_confirmation=signal_data['volume_confirmation'],
                pattern_strength=signal_data['pattern_strength'],

                entry_reasons=signal_data['entry_reasons'],
                risk_factors=signal_data['risk_factors'],

                # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò
                primary_candles=primary_candles[-SCALPING_CONFIG['candles_for_analysis']:],
                confirmation_candles=confirmation_candles[-25:],
                indicators_data=self._clean_indicators_for_json(indicators),
                microstructure_data=microstructure
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}: {e}")
            return None

    def _evaluate_scalping_signal(self, symbol: str, primary_candles: List,
                                  confirmation_candles: List, indicators: Dict,
                                  microstructure: Dict) -> Dict:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""

        current_price = float(primary_candles[-1][4])
        current_volume = float(primary_candles[-1][5])
        avg_volume = np.mean([float(c[5]) for c in primary_candles[-20:]])

        # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
        entry_reasons = []
        risk_factors = []
        confidence = 0
        direction = 'NO_SIGNAL'

        # 1. –û–ë–™–ï–ú–ù–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï
        volume_ratio = current_volume / avg_volume if avg_volume > 0 else 0
        volume_confirmation = volume_ratio >= 1.5

        if volume_confirmation:
            entry_reasons.append(f"Volume spike: {volume_ratio:.1f}x")
            confidence += 15
        else:
            risk_factors.append(f"Low volume: {volume_ratio:.1f}x")

        # 2. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó
        rsi = indicators.get('rsi_current', 50)
        tema_alignment = indicators.get('tema_alignment', False)
        macd_signal = indicators.get('macd_signal', 'NEUTRAL')

        # –£—Å–ª–æ–≤–∏—è –¥–ª—è LONG
        if (rsi < 35 and tema_alignment and macd_signal in ['BULLISH', 'CROSS_UP'] and
                indicators.get('near_support', False)):
            direction = 'LONG'
            confidence += 25
            entry_reasons.append("LONG: RSI oversold + TEMA aligned + MACD bullish + near support")

        # –£—Å–ª–æ–≤–∏—è –¥–ª—è SHORT
        elif (rsi > 65 and not tema_alignment and macd_signal in ['BEARISH', 'CROSS_DOWN'] and
              indicators.get('near_resistance', False)):
            direction = 'SHORT'
            confidence += 25
            entry_reasons.append("SHORT: RSI overbought + TEMA bearish + MACD bearish + near resistance")

        # 3. –ú–ò–ö–†–û–°–¢–†–£–ö–¢–£–†–ù–´–ô –ê–ù–ê–õ–ò–ó
        if microstructure:
            book_imbalance = microstructure.get('book_imbalance', 0)
            spread_quality = microstructure.get('spread_stability', 0)

            if abs(book_imbalance) > 0.6:
                entry_reasons.append(f"Book imbalance: {book_imbalance:.2f}")
                confidence += 10

            if spread_quality > 0.7:
                confidence += 5
            else:
                risk_factors.append("Unstable spread")

        # 4. –ü–ê–¢–¢–ï–†–ù –°–¢–û–ü-–û–•–û–¢–´
        liquidity_grab = detect_liquidity_grab_pattern(primary_candles)
        if liquidity_grab['detected']:
            confidence += 20
            entry_reasons.append(f"Liquidity grab: {liquidity_grab['pattern']}")

        # 5. –†–ê–°–ß–ï–¢ –£–†–û–í–ù–ï–ô
        atr = indicators.get('atr_current', current_price * 0.005)

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å (—Å–æ–≥–ª–∞—Å–Ω–æ —á–µ–∫-–ª–∏—Å—Ç—É)
        base_stop_distance = atr * SCALPING_CONFIG['adaptive_stop_multiplier']
        spread_adjustment = current_price * 0.0005  # 0.05% –Ω–∞ —Å–ø—Ä–µ–¥
        commission_adjustment = current_price * 0.001  # 0.1% –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é
        slippage_adjustment = current_price * 0.0005  # 0.05% –Ω–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ

        stop_distance = base_stop_distance + spread_adjustment + commission_adjustment + slippage_adjustment
        stop_distance = max(stop_distance, current_price * 0.004)  # –ú–∏–Ω–∏–º—É–º 0.4%
        stop_distance = min(stop_distance, current_price * 0.008)  # –ú–∞–∫—Å–∏–º—É–º 0.8%

        if direction == 'LONG':
            stop_loss = current_price - stop_distance
            take_profit = current_price + (stop_distance * 2.0)  # R:R = 1:2
        elif direction == 'SHORT':
            stop_loss = current_price + stop_distance
            take_profit = current_price - (stop_distance * 2.0)
        else:
            stop_loss = take_profit = current_price

        # –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞
        risk_percent = stop_distance / current_price
        risk_reward_ratio = abs(take_profit - current_price) / abs(
            stop_loss - current_price) if stop_loss != current_price else 0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        if confidence < SCALPING_CONFIG['min_confidence_threshold']:
            direction = 'NO_SIGNAL'
            risk_factors.append(f"Low confidence: {confidence}")

        if risk_reward_ratio < SCALPING_CONFIG['min_risk_reward']:
            direction = 'NO_SIGNAL'
            risk_factors.append(f"Poor R:R: {risk_reward_ratio:.2f}")

        return {
            'direction': direction,
            'confidence': min(confidence, 100),
            'entry_price': current_price,
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'risk_reward_ratio': risk_reward_ratio,
            'position_size_percent': min(SCALPING_CONFIG['max_position_risk'],
                                         0.01 / risk_percent) if risk_percent > 0 else 0,

            'liquidity_score': min(confidence, 100),
            'microstructure_score': int(microstructure.get('overall_score', 50)) if microstructure else 50,
            'volume_confirmation': volume_confirmation,
            'pattern_strength': min(confidence, 100),

            'entry_reasons': entry_reasons,
            'risk_factors': risk_factors
        }

    def _clean_indicators_for_json(self, indicators: Dict) -> Dict:
        """–û—á–∏—Å—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        cleaned = {}
        for key, value in indicators.items():
            if isinstance(value, (np.ndarray, list)):
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–Ω–∞—á–µ–Ω–∏–π –∏ –æ—á–∏—â–∞–µ–º –æ—Ç NaN
                cleaned_values = []
                for v in (value[-20:] if len(value) > 20 else value):
                    if isinstance(v, (np.integer, np.floating)):
                        v = float(v)
                    if not (isinstance(v, float) and (math.isnan(v) or math.isinf(v))):
                        cleaned_values.append(v)
                cleaned[key] = cleaned_values
            elif isinstance(value, (np.integer, np.floating)):
                v = float(value)
                if not (math.isnan(v) or math.isinf(v)):
                    cleaned[key] = v
                else:
                    cleaned[key] = 0.0
            else:
                cleaned[key] = value

        return cleaned


class AIScalpingOrchestrator:
    """–ò–ò –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""

    def __init__(self):
        self.selection_prompt = self._load_prompt('prompt2.txt')
        self.detailed_prompt = self._load_prompt('prompt.txt')
        logger.info("ü§ñ –ò–ò –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _load_prompt(self, filename: str) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return f.read().strip()
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ""

    async def first_stage_selection(self, signals: List[ScalpingSignal]) -> List[str]:
        """–≠–¢–ê–ü 1: –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–±–æ—Ä –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –ò–ò"""
        if not self.selection_prompt or not signals:
            return []

        logger.info(f"ü§ñ –≠–¢–ê–ü 1 –ò–ò: –ê–Ω–∞–ª–∏–∑ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–±–æ—Ä–∞")

        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ò–ò
            top_signals = signals[:SCALPING_CONFIG['max_pairs_for_ai_selection']]

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
            ai_data = {
                'timestamp': int(time.time()),
                'market_session': 'EU_US_OVERLAP' if self._is_overlap_session() else 'OTHER',
                'total_signals': len(top_signals),
                'strategy': 'scalping_5m_15m_confirmation',

                'signals': []
            }

            for signal in top_signals:
                signal_data = {
                    'symbol': signal.symbol,
                    'direction': signal.direction,
                    'confidence': signal.confidence,
                    'entry_price': signal.entry_price,
                    'stop_loss': signal.stop_loss,
                    'take_profit': signal.take_profit,
                    'risk_reward': round(signal.risk_reward_ratio, 2),

                    'scores': {
                        'liquidity': signal.liquidity_score,
                        'microstructure': signal.microstructure_score,
                        'pattern_strength': signal.pattern_strength
                    },

                    'confirmations': {
                        'volume_spike': signal.volume_confirmation,
                        'entry_reasons': signal.entry_reasons[:3],  # –¢–æ–ø-3 –ø—Ä–∏—á–∏–Ω—ã
                        'risk_factors': signal.risk_factors[:2]  # –¢–æ–ø-2 —Ä–∏—Å–∫–∞
                    },

                    # –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π)
                    'technicals': {
                        'rsi_current': signal.indicators_data.get('rsi_current', 50),
                        'tema_aligned': signal.indicators_data.get('tema_alignment', False),
                        'macd_signal': signal.indicators_data.get('macd_signal', 'NEUTRAL'),
                        'atr_percent': signal.indicators_data.get('atr_percent', 0.5),
                        'volume_ratio': signal.indicators_data.get('volume_ratio', 1.0)
                    }
                }

                ai_data['signals'].append(signal_data)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
            message = f"""{self.selection_prompt}

=== –°–ö–ê–õ–¨–ü–ò–ù–ì 5M/15M: –ü–ï–†–í–ò–ß–ù–´–ô –û–¢–ë–û–† ===
–í—Ä–µ–º—è: {datetime.datetime.utcnow().strftime('%H:%M UTC')}
–°–µ—Å—Å–∏—è: {ai_data['market_session']}
–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –£–¥–µ—Ä–∂–∞–Ω–∏–µ 3-5 —Å–≤–µ—á–µ–π, —Ü–µ–ª—å 0.4-0.6% —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏

{json.dumps(ai_data, indent=2, ensure_ascii=False)}

–ó–ê–î–ê–ß–ê: –í—ã–±–µ—Ä–∏ 3-5 –ª—É—á—à–∏—Ö –ø–∞—Ä –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞, —É—á–∏—Ç—ã–≤–∞—è:
1. –ö–∞—á–µ—Å—Ç–≤–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
2. –°–∏–ª—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
3. –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
4. –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: {{"selected_pairs": ["BTCUSDT", "ETHUSDT"], "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"}}"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            ai_response = await deep_seek_selection(message)

            if not ai_response:
                logger.error("‚ùå –ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ç–±–æ—Ä")
                return []

            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            selected_pairs = self._parse_selection_response(ai_response)

            logger.info(f"‚úÖ –≠–¢–ê–ü 1 –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω: –≤—ã–±—Ä–∞–Ω–æ {len(selected_pairs)} –ø–∞—Ä")
            return selected_pairs

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –ò–ò –æ—Ç–±–æ—Ä–∞: {e}")
            return []

    async def second_stage_analysis(self, symbol: str) -> Optional[Dict]:
        """–≠–¢–ê–ü 2: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã"""
        if not self.detailed_prompt:
            return None

        logger.info(f"üî¨ –≠–¢–ê–ü 2 –ò–ò: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {symbol}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            primary_candles = await get_klines_async(
                symbol,
                SCALPING_CONFIG['primary_timeframe'],
                limit=SCALPING_CONFIG['candles_for_detailed']
            )

            confirmation_candles = await get_klines_async(
                symbol,
                SCALPING_CONFIG['confirmation_timeframe'],
                limit=100
            )

            if not primary_candles or not confirmation_candles:
                logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return None

            # –ü–æ–ª–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            full_indicators = calculate_advanced_scalping_indicators(primary_candles)
            microstructure = await analyze_market_microstructure(symbol)
            dynamic_levels = calculate_dynamic_levels(primary_candles)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            analysis_data = {
                'symbol': symbol,
                'timestamp': int(time.time()),
                'current_price': float(primary_candles[-1][4]),
                'market_session': 'EU_US_OVERLAP' if self._is_overlap_session() else 'OTHER',

                # –°–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–≤–µ—á–µ–π 5M + 15 —Å–≤–µ—á–µ–π 15M)
                'price_action': {
                    'primary_5m': [
                        {
                            'timestamp': int(c[0]),
                            'open': float(c[1]),
                            'high': float(c[2]),
                            'low': float(c[3]),
                            'close': float(c[4]),
                            'volume': float(c[5])
                        } for c in primary_candles[-30:]
                    ],
                    'confirmation_15m': [
                        {
                            'timestamp': int(c[0]),
                            'open': float(c[1]),
                            'high': float(c[2]),
                            'low': float(c[3]),
                            'close': float(c[4]),
                            'volume': float(c[5])
                        } for c in confirmation_candles[-15:]
                    ]
                },

                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
                'technical_analysis': {
                    'trend': {
                        'tema_alignment': full_indicators.get('tema_alignment', False),
                        'tema_slope': full_indicators.get('tema_slope', 0),
                        'trend_strength': full_indicators.get('trend_strength', 0),
                        'trend_direction': full_indicators.get('trend_direction', 'SIDEWAYS')
                    },
                    'momentum': {
                        'rsi_current': full_indicators.get('rsi_current', 50),
                        'rsi_trend': full_indicators.get('rsi_trend', 'NEUTRAL'),
                        'stoch_signal': full_indicators.get('stoch_signal', 'NEUTRAL'),
                        'macd_signal': full_indicators.get('macd_signal', 'NEUTRAL'),
                        'momentum_divergence': full_indicators.get('momentum_divergence', False)
                    },
                    'volatility': {
                        'atr_current': full_indicators.get('atr_current', 0),
                        'atr_percent': full_indicators.get('atr_percent', 0.5),
                        'volatility_regime': full_indicators.get('volatility_regime', 'MEDIUM'),
                        'price_velocity': full_indicators.get('price_velocity', 0),
                        'volatility_breakout': full_indicators.get('volatility_breakout', False)
                    },
                    'volume': {
                        'volume_spike': full_indicators.get('volume_spike', False),
                        'volume_ratio': full_indicators.get('volume_ratio', 1.0),
                        'volume_trend': full_indicators.get('volume_trend', 'NEUTRAL'),
                        'institutional_flow': full_indicators.get('institutional_flow', 'NEUTRAL')
                    }
                },

                # –ú–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞
                'microstructure': microstructure if microstructure else {},

                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏
                'levels': {
                    'support_levels': dynamic_levels.get('support_levels', [])[:5],
                    'resistance_levels': dynamic_levels.get('resistance_levels', [])[:5],
                    'pivot_points': dynamic_levels.get('pivot_points', {}),
                    'volume_profile': dynamic_levels.get('volume_profile', {}),
                    'liquidity_zones': dynamic_levels.get('liquidity_zones', [])
                },

                # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Å–∏–≥–Ω–∞–ª—ã
                'patterns': {
                    'liquidity_grab': detect_liquidity_grab_pattern(primary_candles),
                    'reversal_patterns': full_indicators.get('reversal_patterns', []),
                    'continuation_patterns': full_indicators.get('continuation_patterns', []),
                    'breakout_potential': full_indicators.get('breakout_potential', 0)
                }
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            message = f"""{self.detailed_prompt}

=== –î–ï–¢–ê–õ–¨–ù–´–ô –°–ö–ê–õ–¨–ü–ò–ù–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó ===
–ü–ê–†–ê: {symbol}
–í–†–ï–ú–Ø: {datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}
–¢–ï–ö–£–©–ê–Ø –¶–ï–ù–ê: {analysis_data['current_price']}
–°–ï–°–°–ò–Ø: {analysis_data['market_session']}

–°–¢–†–ê–¢–ï–ì–ò–Ø: –°–∫–∞–ª—å–ø–∏–Ω–≥ 5M —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º 15M
–¶–ï–õ–¨: 0.4-0.6% —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –∑–∞ 15-45 –º–∏–Ω—É—Ç
–£–î–ï–†–ñ–ê–ù–ò–ï: 3-5 —Å–≤–µ—á–µ–π

{json.dumps(analysis_data, indent=2, ensure_ascii=False)}

–¢–†–ï–ë–£–ï–¢–°–Ø –ê–ù–ê–õ–ò–ó:
1. –ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (—Å–ø—Ä–µ–¥—ã, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, timing)
2. –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
3. –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
4. –ü–ª–∞–Ω –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–∏–ø –æ—Ä–¥–µ—Ä–æ–≤, —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏)
5. –°—Ü–µ–Ω–∞—Ä–∏–∏ –≤—ã—Ö–æ–¥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π

–û–¢–í–ï–¢–¨ –í –§–û–†–ú–ê–¢–ï JSON —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–º–ø—Ç—É."""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            analysis_result = await deep_seek_analysis(message)

            if analysis_result:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._save_detailed_analysis(symbol, analysis_result, analysis_data)
                logger.info(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω")

                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                parsed_result = self._parse_analysis_response(analysis_result)
                return parsed_result

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return None

    def _is_overlap_session(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è EU/US —Å–µ—Å—Å–∏–π"""
        current_hour = datetime.datetime.utcnow().hour
        return 14 <= current_hour <= 18  # 14:00-18:00 UTC

    def _parse_selection_response(self, response: str) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞"""
        try:
            # –ò—â–µ–º JSON —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
            json_pattern = r'\{[^}]*"selected_pairs"[^}]*\}'
            match = re.search(json_pattern, response)
            if match:
                data = json.loads(match.group())
                return data.get('selected_pairs', [])

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä
            pair_pattern = r'([A-Z]{3,10}USDT)'
            pairs = re.findall(pair_pattern, response)
            return list(set(pairs))[:5]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã, –º–∞–∫—Å–∏–º—É–º 5

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–±–æ—Ä–∞: {e}")
            return []

    def _parse_analysis_response(self, response: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_pattern = r'\{[^{}]*"coin"[^{}]*\}'
            match = re.search(json_pattern, response)
            if match:
                return json.loads(match.group())
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None

    def _save_detailed_analysis(self, symbol: str, analysis: str, data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f'analysis_{symbol}_{timestamp}.json'

            save_data = {
                'symbol': symbol,
                'timestamp': timestamp,
                'analysis_text': analysis,
                'technical_data': data
            }

            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(save_data, f, indent=2, ensure_ascii=False)

            logger.info(f"üìÅ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    logger.info("üöÄ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –°–ö–ê–õ–¨–ü–ò–ù–ì–û–í–´–ô –ë–û–¢ - –ó–ê–ü–£–°–ö")
    logger.info("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: 5M –æ—Å–Ω–æ–≤–Ω–æ–π + 15M –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
    logger.info("üíé –¶–µ–ª—å: 0.4-0.6% —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –∑–∞ 15-45 –º–∏–Ω—É—Ç")
    logger.info("‚ö° –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ò–ò –∞–Ω–∞–ª–∏–∑ + —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    scanner = AdvancedMarketScanner()
    ai_orchestrator = AIScalpingOrchestrator()

    if not scanner.is_optimal_trading_time():
        logger.warning("‚è∞ –ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ (–Ω–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å)")
        logger.info("üïê –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 14:00-20:00 UTC (EU/US overlap)")
        return

    try:
        start_time = time.time()

        # ===== –≠–¢–ê–ü 1: –ü–û–õ–£–ß–ï–ù–ò–ï –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–ê–† =====
        logger.info("\n" + "=" * 60)
        logger.info("üìä –≠–¢–ê–ü 1: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–ê–† –ü–û –õ–ò–ö–í–ò–î–ù–û–°–¢–ò")
        logger.info("=" * 60)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ USDT –ø–∞—Ä—ã
        all_pairs = await get_usdt_trading_pairs()
        if not all_pairs:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            return

        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ {len(all_pairs)} USDT –ø–∞—Ä")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        liquid_pairs = await scanner.filter_liquid_pairs(all_pairs)

        if not liquid_pairs:
            logger.error("‚ùå –ù–µ—Ç –ø–∞—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
            return

        logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(liquid_pairs)} –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä")

        # ===== –≠–¢–ê–ü 2: –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ù–ê –°–ò–ì–ù–ê–õ–´ =====
        logger.info("\n" + "=" * 60)
        logger.info("üîç –≠–¢–ê–ü 2: –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –°–ö–ê–õ–¨–ü–ò–ù–ì–û–í–´–• –°–ò–ì–ù–ê–õ–û–í")
        logger.info("=" * 60)

        signals = []

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        for i in range(0, len(liquid_pairs), SCALPING_CONFIG['batch_size']):
            batch = liquid_pairs[i:i + SCALPING_CONFIG['batch_size']]

            tasks = [scanner.scan_pair_for_signals(pair) for pair in batch]
            results = await asyncio.gather(*tasks, return_exceptions=True)

            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in results:
                if isinstance(result, ScalpingSignal):
                    signals.append(result)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            processed = min(i + SCALPING_CONFIG['batch_size'], len(liquid_pairs))
            logger.info(f"‚è≥ –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {processed}/{len(liquid_pairs)} –ø–∞—Ä")

            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        signals.sort(key=lambda x: x.confidence, reverse=True)

        if not signals:
            logger.info("‚ÑπÔ∏è –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        logger.info(f"üìà –ù–∞–π–¥–µ–Ω–æ {len(signals)} –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-5 —Å–∏–≥–Ω–∞–ª–æ–≤
        logger.info("\nüèÜ –¢–û–ü-5 –°–ò–ì–ù–ê–õ–û–í:")
        for i, signal in enumerate(signals[:5], 1):
            logger.info(f"{i}. {signal.symbol}: {signal.direction} "
                        f"(conf: {signal.confidence}%, R:R: {signal.risk_reward_ratio:.2f})")

        # ===== –≠–¢–ê–ü 3: –ü–ï–†–í–ò–ß–ù–´–ô –ò–ò –û–¢–ë–û–† =====
        logger.info("\n" + "=" * 60)
        logger.info("ü§ñ –≠–¢–ê–ü 3: –ü–ï–†–í–ò–ß–ù–´–ô –ò–ò –û–¢–ë–û–†")
        logger.info("=" * 60)

        selected_pairs = await ai_orchestrator.first_stage_selection(signals)

        if not selected_pairs:
            logger.info("‚ÑπÔ∏è –ò–ò –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            return

        logger.info(f"‚úÖ –ò–ò –æ—Ç–æ–±—Ä–∞–ª {len(selected_pairs)} –ø–∞—Ä: {selected_pairs}")

        # ===== –≠–¢–ê–ü 4: –î–ï–¢–ê–õ–¨–ù–´–ô –ò–ò –ê–ù–ê–õ–ò–ó =====
        logger.info("\n" + "=" * 60)
        logger.info("üî¨ –≠–¢–ê–ü 4: –î–ï–¢–ê–õ–¨–ù–´–ô –ò–ò –ê–ù–ê–õ–ò–ó")
        logger.info("=" * 60)

        final_recommendations = []

        for pair in selected_pairs[:SCALPING_CONFIG['max_pairs_for_detailed']]:
            logger.info(f"üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {pair}...")

            analysis_result = await ai_orchestrator.second_stage_analysis(pair)

            if analysis_result and analysis_result.get('coin'):
                final_recommendations.append({
                    'pair': pair,
                    'recommendation': analysis_result
                })
                logger.info(f"‚úÖ {pair}: {analysis_result.get('direction', 'N/A')} "
                            f"@ {analysis_result.get('entry_price', 'N/A')}")
            else:
                logger.warning(f"‚ö†Ô∏è {pair}: –∞–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –ò–ò
            await asyncio.sleep(2)

        # ===== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ =====
        total_time = time.time() - start_time

        logger.info("\n" + "=" * 60)
        logger.info("üéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù - –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        logger.info("=" * 60)
        logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –í—Å–µ–≥–æ –ø–∞—Ä –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(all_pairs)}")
        logger.info(f"üíß –õ–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä: {len(liquid_pairs)}")
        logger.info(f"üìà –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
        logger.info(f"ü§ñ –ò–ò –æ—Ç–æ–±—Ä–∞–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {len(selected_pairs)}")
        logger.info(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(final_recommendations)}")

        if final_recommendations:
            logger.info("\nüèÜ –§–ò–ù–ê–õ–¨–ù–´–ï –¢–û–†–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for i, rec in enumerate(final_recommendations, 1):
                r = rec['recommendation']
                logger.info(f"{i}. {rec['pair']}: {r.get('direction', 'N/A')} "
                            f"@ {r.get('entry_price', 'N/A')} "
                            f"(SL: {r.get('stop_loss', 'N/A')}, "
                            f"TP: {r.get('take_profit', 'N/A')})")

        logger.info(f"\nüìÅ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ analysis_*.json")

        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        await cleanup_http_client()

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
    finally:
        logger.info("üîö –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("=" * 80)
    print("üéØ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –°–ö–ê–õ–¨–ü–ò–ù–ì–û–í–´–ô –ë–û–¢ BYBIT")
    print("üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: 5M –æ—Å–Ω–æ–≤–Ω–æ–π + 15M –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
    print("üíé –¶–µ–ª—å: 0.4-0.6% —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –∑–∞ 15-45 –º–∏–Ω—É—Ç")
    print("‚ö° –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ò–ò –∞–Ω–∞–ª–∏–∑ + —Å—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
    print("üïê –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 14:00-20:00 UTC")
    print("=" * 80)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üîö –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")