import asyncio
import json
import logging
import time
import math
import numpy as np
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
import datetime

# –ò–ú–ü–û–†–¢–´ –ö–û–¢–û–†–´–ï –ù–ï–õ–¨–ó–Ø –ú–ï–ù–Ø–¢–¨
from func_async import get_klines_async, get_usdt_trading_pairs
from deepseek import deep_seek_selection, deep_seek_analysis, cleanup_http_client

# –ù–û–í–´–ô –£–ü–†–û–©–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢
from func_trade import (
    detect_scalping_entry,
    calculate_simplified_indicators,
    prepare_ai_data,
    safe_float,
    safe_int,
    test_json_serialization
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scalping_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –£–ü–†–û–©–ï–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
SCALPING_CONFIG = {
    'candles_for_scan': 50,
    'batch_size': 30,  # –£–º–µ–Ω—å—à–µ–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    'min_confidence': 75,
    'max_pairs_to_ai': 8,  # –£–º–µ–Ω—å—à–µ–Ω–æ
    'forbidden_hours': [22, 23, 0, 1, 2, 3, 4, 5],
}


@dataclass
class SimpleScalpingSignal:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    pair: str
    signal_type: str
    confidence: int
    entry_price: float
    timestamp: int

    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    ema_signal: str
    rsi_value: float
    volume_spike: bool
    entry_reasons: List[str]

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò
    candles_data: List = None
    indicators_data: Dict = None


class SimplifiedScalpingAnalyzer:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä - —Ç–æ–ª—å–∫–æ 3 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""

    def __init__(self):
        self.session_start = time.time()
        logger.info("üöÄ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω (3 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞)")

    def is_trading_hours(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Å–æ–≤"""
        current_hour = datetime.datetime.utcnow().hour
        return current_hour not in SCALPING_CONFIG['forbidden_hours']

    async def quick_scan_pair(self, symbol: str) -> Optional[SimpleScalpingSignal]:
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –ø–∞—Ä—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
            candles = await get_klines_async(
                symbol,
                interval="5",
                limit=SCALPING_CONFIG['candles_for_scan']
            )

            if not candles or len(candles) < 30:
                return None

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_result = detect_scalping_entry(candles)

            if signal_result['signal'] == 'NO_SIGNAL':
                return None

            # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            try:
                entry_price = safe_float(candles[-1][4])
                confidence = safe_int(signal_result['confidence'])

                if entry_price <= 0 or confidence <= 0:
                    return None

                indicators = signal_result.get('indicators', {})

                return SimpleScalpingSignal(
                    pair=symbol,
                    signal_type=signal_result['signal'],
                    confidence=confidence,
                    entry_price=entry_price,
                    timestamp=int(time.time()),
                    ema_signal=str(indicators.get('ema_signal', 'NEUTRAL')),
                    rsi_value=safe_float(indicators.get('rsi_value', 50)),
                    volume_spike=bool(indicators.get('volume_spike', False)),
                    entry_reasons=signal_result.get('entry_reasons', []),
                    candles_data=candles[-20:],  # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π
                    indicators_data=indicators
                )

            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ {symbol}: {e}")
                return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}: {e}")
            return None

    async def mass_scan_markets(self) -> List[SimpleScalpingSignal]:
        """–ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤"""
        if not self.is_trading_hours():
            logger.warning("‚è∞ –ù–µ—Ç–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            return []

        start_time = time.time()
        logger.info("üîç –≠–¢–ê–ü 1: –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (3 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞)")

        try:
            pairs = await get_usdt_trading_pairs()
            if not pairs:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä")
                return []

            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-100 –ø–∞—Ä –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            pairs = pairs
            logger.info(f"üìä –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ø-{len(pairs)} –ø–∞—Ä")

            promising_signals = []

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
            for i in range(0, len(pairs), SCALPING_CONFIG['batch_size']):
                batch = pairs[i:i + SCALPING_CONFIG['batch_size']]

                tasks = [self.quick_scan_pair(pair) for pair in batch]
                results = await asyncio.gather(*tasks, return_exceptions=True)

                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for result in results:
                    if isinstance(result, SimpleScalpingSignal):
                        promising_signals.append(result)
                    elif isinstance(result, Exception):
                        logger.debug(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –±–∞—Ç—á–µ: {result}")

                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                processed = min(i + SCALPING_CONFIG['batch_size'], len(pairs))
                logger.info(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{len(pairs)}")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                await asyncio.sleep(0.2)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            promising_signals.sort(key=lambda x: x.confidence, reverse=True)

            execution_time = time.time() - start_time
            logger.info(f"‚úÖ –≠–¢–ê–ü 1 –∑–∞–≤–µ—Ä—à–µ–Ω: {len(promising_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ {execution_time:.2f}—Å–µ–∫")

            return promising_signals

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return []


class SimpleAISelector:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ò–ò —Å–µ–ª–µ–∫—Ç–æ—Ä"""

    def __init__(self):
        self.selection_prompt = self._load_prompt('prompt2.txt')

    def _load_prompt(self, filename: str) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return f.read().strip()
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return "–í—ã–±–µ—Ä–∏ –ª—É—á—à–∏–µ –ø–∞—Ä—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞. –í–µ—Ä–Ω–∏ JSON: {\"pairs\": [\"BTCUSDT\"]}"

    async def select_best_pairs(self, signals: List[SimpleScalpingSignal]) -> List[str]:
        """–ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ç–±–æ—Ä —á–µ—Ä–µ–∑ –ò–ò"""
        if not self.selection_prompt or not signals:
            return []

        logger.info(f"ü§ñ –≠–¢–ê–ü 2: –ò–ò –æ—Ç–±–æ—Ä –∏–∑ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")

        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            top_signals = signals[:SCALPING_CONFIG['max_pairs_to_ai']]

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            ai_data = self._prepare_simple_data(top_signals)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
            if not test_json_serialization(ai_data):
                logger.error("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –≤ JSON")
                return []

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            message = f"""{self.selection_prompt}

=== –£–ü–†–û–©–ï–ù–ù–´–ô –°–ö–ê–õ–¨–ü–ò–ù–ì 15M ===
–°–ò–°–¢–ï–ú–ê: 3 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (EMA + RSI + Volume)
–°–ò–ì–ù–ê–õ–û–í: {len(top_signals)}
–£–î–ï–†–ñ–ê–ù–ò–ï: 3-4 —Å–≤–µ—á–∏

{json.dumps(ai_data, indent=2, ensure_ascii=False)}

–í–ê–ñ–ù–û: –í—ã–±–µ—Ä–∏ –º–∞–∫—Å–∏–º—É–º 3 –ª—É—á—à–∏—Ö –ø–∞—Ä—ã.
–í–µ—Ä–Ω–∏ JSON: {{"pairs": ["BTCUSDT", "ETHUSDT"]}}"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò
            ai_response = await deep_seek_selection(message)

            if not ai_response:
                logger.error("‚ùå –ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
                return []

            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            selected_pairs = self._parse_ai_response(ai_response)

            logger.info(f"‚úÖ –≠–¢–ê–ü 2 –∑–∞–≤–µ—Ä—à–µ–Ω: –ò–ò –≤—ã–±—Ä–∞–ª {len(selected_pairs)} –ø–∞—Ä")
            return selected_pairs

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò –æ—Ç–±–æ—Ä–∞: {e}")
            return []

    def _prepare_simple_data(self, signals: List[SimpleScalpingSignal]) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò"""
        prepared_signals = []

        for signal in signals:
            try:
                # –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                signal_data = {
                    'pair': str(signal.pair),
                    'signal_type': str(signal.signal_type),
                    'confidence': safe_int(signal.confidence),
                    'entry_price': safe_float(signal.entry_price),

                    # 3 –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                    'ema_signal': str(signal.ema_signal),
                    'rsi_value': safe_float(signal.rsi_value),
                    'volume_spike': bool(signal.volume_spike),

                    'entry_reasons': [str(r) for r in signal.entry_reasons],

                    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    'last_5_candles': []
                }

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if signal.candles_data and len(signal.candles_data) >= 5:
                    for candle in signal.candles_data[-5:]:
                        if len(candle) >= 6:
                            signal_data['last_5_candles'].append({
                                'close': safe_float(candle[4]),
                                'volume': safe_float(candle[5])
                            })

                prepared_signals.append(signal_data)

            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ {signal.pair}: {e}")
                continue

        return {
            'signals_count': len(prepared_signals),
            'strategy': '3_indicators_scalping',
            'signals': prepared_signals
        }

    def _parse_ai_response(self, response: str) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ò–ò"""
        try:
            import re
            # –ò—â–µ–º JSON —Å –ø–∞—Ä–∞–º–∏
            json_match = re.search(r'\{[^}]*"pairs"[^}]*\}', response)
            if json_match:
                data = json.loads(json_match.group())
                pairs = data.get('pairs', [])
                return [str(pair) for pair in pairs if isinstance(pair, str)]
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ò–ò –æ—Ç–≤–µ—Ç–∞: {e}")
            return []

    async def detailed_analysis(self, pair: str) -> Optional[str]:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        logger.info(f"üî¨ –≠–¢–ê–ü 3: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {pair}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            full_candles = await get_klines_async(pair, "15", limit=100)

            if not full_candles or len(full_candles) < 50:
                logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pair}")
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = calculate_simplified_indicators(full_candles)

            if not indicators:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {pair}")
                return None

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_data = {
                'pair': pair,
                'current_price': safe_float(full_candles[-1][4]),
                'timestamp': int(time.time()),

                # 3 –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                'ema_fast': safe_float(indicators.get('ema_fast_value', 0)),
                'ema_slow': safe_float(indicators.get('ema_slow_value', 0)),
                'ema_signal': str(indicators.get('ema_signal', 'NEUTRAL')),
                'ema_diff_percent': safe_float(indicators.get('ema_diff_percent', 0)),

                'rsi_value': safe_float(indicators.get('rsi_value', 50)),
                'rsi_signal': str(indicators.get('rsi_signal', 'NEUTRAL')),

                'volume_spike': bool(indicators.get('volume_spike', False)),
                'volume_ratio': safe_float(indicators.get('volume_ratio', 1.0)),
                'volume_trend': str(indicators.get('volume_trend', 'NEUTRAL')),

                'signal_quality': safe_int(indicators.get('signal_quality', 0)),

                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π
                'recent_candles': [
                    {
                        'open': safe_float(c[1]),
                        'high': safe_float(c[2]),
                        'low': safe_float(c[3]),
                        'close': safe_float(c[4]),
                        'volume': safe_float(c[5])
                    } for c in full_candles[-10:]
                ]
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
            if not test_json_serialization(analysis_data):
                logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ {pair} –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è")
                return None

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_prompt = self._load_prompt('prompt.txt')
            message = f"""{analysis_prompt}

=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –£–ü–†–û–©–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ ===
–ü–ê–†–ê: {pair}
–°–ò–°–¢–ï–ú–ê: EMA + RSI + Volume
–¶–ï–ù–ê: {analysis_data['current_price']}

{json.dumps(analysis_data, indent=2, ensure_ascii=False)}

–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–¥–µ–ª–∫–µ."""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò
            analysis_result = await deep_seek_analysis(message)

            if analysis_result:
                self._save_analysis(pair, analysis_result)
                logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ {pair} –∑–∞–≤–µ—Ä—à–µ–Ω")
                return analysis_result

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {pair}: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return None

    def _save_analysis(self, pair: str, analysis: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            with open('simple_scalping_analysis.log', 'a', encoding='utf-8') as f:
                f.write(f"\n{'=' * 60}\n")
                f.write(f"–ü–ê–†–ê: {pair}\n")
                f.write(f"–í–†–ï–ú–Ø: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–°–ò–°–¢–ï–ú–ê: EMA + RSI + Volume\n")
                f.write(f"–ê–ù–ê–õ–ò–ó:\n{analysis}\n")
                f.write(f"{'=' * 60}\n")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    logger.info("üöÄ –£–ü–†–û–©–ï–ù–ù–´–ô –°–ö–ê–õ–¨–ü–ò–ù–ì–û–í–´–ô –ë–û–¢ 15M - –ó–ê–ü–£–°–ö")
    logger.info("üéØ –°–∏—Å—Ç–µ–º–∞: EMA + RSI + Volume (3 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞)")
    logger.info("‚ö° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –£–¥–µ—Ä–∂–∞–Ω–∏–µ 3-4 —Å–≤–µ—á–∏")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    analyzer = SimplifiedScalpingAnalyzer()
    ai_selector = SimpleAISelector()

    try:
        # –≠–¢–ê–ü 1: –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        promising_signals = await analyzer.mass_scan_markets()

        if not promising_signals:
            logger.info("‚ÑπÔ∏è –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        logger.info(f"üìà –ù–∞–π–¥–µ–Ω–æ {len(promising_signals)} –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-—Å–∏–≥–Ω–∞–ª—ã
        for i, signal in enumerate(promising_signals[:5], 1):
            logger.info(f"  {i}. {signal.pair}: {signal.signal_type} "
                        f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence}%, "
                        f"EMA: {signal.ema_signal}, RSI: {signal.rsi_value:.1f})")

        # –≠–¢–ê–ü 2: –ò–ò –æ—Ç–±–æ—Ä
        selected_pairs = await ai_selector.select_best_pairs(promising_signals)

        if not selected_pairs:
            logger.info("‚ÑπÔ∏è –ò–ò –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã")
            return

        logger.info(f"ü§ñ –ò–ò –≤—ã–±—Ä–∞–ª {len(selected_pairs)} –ø–∞—Ä: {selected_pairs}")

        # –≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        successful_analyses = 0

        for pair in selected_pairs:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {pair}...")

            analysis = await ai_selector.detailed_analysis(pair)

            if analysis:
                successful_analyses += 1
                logger.info(f"‚úÖ {pair} - –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                logger.error(f"‚ùå {pair} - –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(2)

        # –ò–¢–û–ì–ò
        logger.info(f"\nüéâ –£–ü–†–û–©–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        logger.info(f"üìä –°–∏—Å—Ç–µ–º–∞: 3 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (EMA + RSI + Volume)")
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(promising_signals)}")
        logger.info(f"ü§ñ –ò–ò –≤—ã–±—Ä–∞–ª: {len(selected_pairs)}")
        logger.info(f"üìã –£—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {successful_analyses}")
        logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: simple_scalping_analysis.log")

        # –û—á–∏—â–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
        await cleanup_http_client()

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await cleanup_http_client()


if __name__ == "__main__":
    logger.info("=" * 80)
    logger.info("üéØ –£–ü–†–û–©–ï–ù–ù–´–ô –°–ö–ê–õ–¨–ü–ò–ù–ì–û–í–´–ô –ë–û–¢")
    logger.info("üìä –°–∏—Å—Ç–µ–º–∞: EMA + RSI + Volume")
    logger.info("‚ö° –£–¥–µ—Ä–∂–∞–Ω–∏–µ: 3-4 —Å–≤–µ—á–∏ –Ω–∞ 15M")
    logger.info("=" * 80)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üîö –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")