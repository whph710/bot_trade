"""
Main Entry Point - Orchestrator –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Telegram –±–æ—Ç–æ–º
–ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω pre-check trading hours
"""

import asyncio
import sys
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É —Å –±–æ—Ç–æ–º –≤ PATH
BOT_DIR = Path(__file__).parent / "trade_bot_programm"
sys.path.insert(0, str(BOT_DIR))

from logging_config import setup_module_logger
from utils import save_bot_result, print_bot_result, cleanup_old_results

logger = setup_module_logger(__name__)


async def run_trading_bot_cycle():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å pre-checks
    –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ trading hours –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º
    """
    from simple_validator import check_trading_hours
    from datetime import datetime

    # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º trading hours –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º –ª—é–±—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    time_allowed, time_reason = check_trading_hours()
    if not time_allowed:
        logger.warning(f"‚è∞ Trading hours blocked: {time_reason}")
        return {
            'timestamp': datetime.now().strftime('%Y%m%d_%H%M%S'),
            'result': 'TRADING_HOURS_BLOCKED',
            'reason': time_reason,
            'stats': {
                'pairs_scanned': 0,
                'signal_pairs_found': 0,
                'ai_selected': 0,
                'analyzed': 0,
                'validated_signals': 0,
                'rejected_signals': 0,
                'total_time': 0
            }
        }

    # Proceed with bot cycle
    from bot_runner import run_trading_bot
    result = await run_trading_bot()
    return result


async def run_telegram_bot():
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞
    """
    try:
        from telegram_bot.telegram_bot_main import run_telegram_bot

        logger.info("Starting Telegram Bot...")
        await run_telegram_bot()

    except Exception as e:
        logger.error(f"Telegram bot error: {e}", exc_info=True)


async def main_single_cycle():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    result = await run_trading_bot_cycle()
    return result


async def main_telegram():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞"""
    await run_telegram_bot()


def parse_arguments():
    """–ü–∞—Ä—Å–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='Trading Bot with Telegram')
    parser.add_argument(
        'mode',
        nargs='?',
        default='telegram',
        choices=['telegram', 'once'],
        help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: telegram (—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º) –∏–ª–∏ once (–æ–¥–∏–Ω —Ü–∏–∫–ª)'
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_arguments()

    try:
        if args.mode == 'once':
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
            logger.info("üöÄ Running trading bot ONCE")
            result = asyncio.run(main_single_cycle())

            if result.get('result') in ['SUCCESS', 'NO_VALIDATED_SIGNALS', 'TRADING_HOURS_BLOCKED']:
                sys.exit(0)
            else:
                sys.exit(1)

        else:  # telegram mode (default)
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
            logger.info("ü§ñ Starting Telegram Bot with schedule")
            asyncio.run(main_telegram())

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Bot stopped by user")
        sys.exit(0)

    except Exception as e:
        logger.error(f"Fatal error: {e}", exc_info=True)
        sys.exit(1)