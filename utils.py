"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±–æ—Ç–∞
"""

import json
import logging
from pathlib import Path
from datetime import datetime
from typing import Dict, Any

logger = logging.getLogger(__name__)


def save_bot_result(result: Dict[str, Any], output_dir: str = "bot_results") -> str:
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ JSON —Ñ–∞–π–ª

    Args:
        result: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π)

    Returns:
        –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    try:
        # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        timestamp = result.get('timestamp', datetime.now().strftime('%Y%m%d_%H%M%S'))
        filename = f"bot_result_{timestamp}.json"

        # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = output_path / filename

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)

        logger.info(f"‚úÖ Result saved: {file_path}")
        return str(file_path.absolute())

    except Exception as e:
        logger.error(f"‚ùå Failed to save result: {e}")
        return ""


def print_bot_result(result: Dict[str, Any]) -> None:
    """
    –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å

    Args:
        result: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    """
    print("\n" + "=" * 60)
    print(f"RESULT: {result['result']}")
    print("=" * 60)

    # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    total_time = result.get('total_time', 0)
    print(f"‚è±Ô∏è  Time: {total_time:.1f}s")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = result.get('stats', {})
    print(f"\nüìä STATISTICS:")
    print(f"  Pairs scanned: {stats.get('pairs_scanned', 0)}")
    print(f"  Signal pairs found: {stats.get('signal_pairs_found', 0)}")
    print(f"  AI selected: {stats.get('ai_selected', 0)}")
    print(f"  Analyzed: {stats.get('analyzed', 0)}")
    print(f"  Validated: {stats.get('validated_signals', 0)}")
    print(f"  Rejected: {stats.get('rejected_signals', 0)}")
    print(f"  Speed: {stats.get('processing_speed', 0):.1f} pairs/sec")

    # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞
    if result.get('result') == 'VALIDATION_SKIPPED':
        print(f"\n‚è∞ {result.get('reason', 'Validation skipped')}")
        return

    # –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    validated = result.get('validated_signals', [])
    if validated:
        print(f"\n‚úÖ VALIDATED SIGNALS ({len(validated)}):")
        for sig in validated:
            tp_levels = sig.get('take_profit_levels', [0, 0, 0])
            print(f"\n  {sig['symbol']}: {sig['signal']} (Confidence: {sig['confidence']}%)")
            print(f"    Entry: ${sig['entry_price']:.2f}")
            print(f"    Stop:  ${sig['stop_loss']:.2f}")
            print(f"    TP1:   ${tp_levels[0]:.2f}")
            print(f"    TP2:   ${tp_levels[1]:.2f}")
            print(f"    TP3:   ${tp_levels[2]:.2f}")
            print(f"    R/R:   1:{sig.get('risk_reward_ratio', 0):.1f}")

    # –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–ø–µ—Ä–≤—ã–µ 3)
    rejected = result.get('rejected_signals', [])
    if rejected:
        print(f"\n‚ùå REJECTED SIGNALS ({len(rejected)}):")
        for rej in rejected[:3]:
            reason = rej.get('rejection_reason', 'Unknown')
            print(f"  {rej['symbol']}: {reason}")

        if len(rejected) > 3:
            print(f"  ... and {len(rejected) - 3} more")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    vstats = result.get('validation_stats', {})
    if vstats:
        print(f"\nüìà VALIDATION STATS:")
        print(f"  Approval rate: {vstats.get('approval_rate', 0)}%")
        print(f"  Avg R/R: 1:{vstats.get('avg_risk_reward', 0):.1f}")

        top_reasons = vstats.get('top_rejection_reasons', [])
        if top_reasons:
            print(f"  Top rejection reasons: {', '.join(top_reasons[:2])}")

    print()


def get_latest_result(results_dir: str = "bot_results") -> Dict[str, Any] | None:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    Args:
        results_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–ª–∏ None
    """
    try:
        results_path = Path(results_dir)

        if not results_path.exists():
            return None

        # –ù–∞–π—Ç–∏ –≤—Å–µ JSON —Ñ–∞–π–ª—ã
        json_files = list(results_path.glob("bot_result_*.json"))

        if not json_files:
            return None

        # –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π)
        latest_file = max(json_files, key=lambda p: p.stat().st_mtime)

        # –ü—Ä–æ—á–∏—Ç–∞—Ç—å JSON
        with open(latest_file, 'r', encoding='utf-8') as f:
            result = json.load(f)

        logger.info(f"üìÅ Loaded latest result: {latest_file.name}")
        return result

    except Exception as e:
        logger.error(f"‚ùå Failed to load latest result: {e}")
        return None


def cleanup_old_results(results_dir: str = "bot_results", keep_last: int = 10) -> int:
    """
    –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N

    Args:
        results_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keep_last: –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ –æ—Å—Ç–∞–≤–∏—Ç—å

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    try:
        results_path = Path(results_dir)

        if not results_path.exists():
            return 0

        # –ù–∞–π—Ç–∏ –≤—Å–µ JSON —Ñ–∞–π–ª—ã
        json_files = list(results_path.glob("bot_result_*.json"))

        if len(json_files) <= keep_last:
            return 0

        # –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        json_files.sort(key=lambda p: p.stat().st_mtime, reverse=True)

        # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
        files_to_delete = json_files[keep_last:]
        deleted_count = 0

        for file_path in files_to_delete:
            try:
                file_path.unlink()
                deleted_count += 1
            except Exception as e:
                logger.warning(f"Failed to delete {file_path.name}: {e}")

        if deleted_count > 0:
            logger.info(f"üóëÔ∏è  Cleaned up {deleted_count} old result files")

        return deleted_count

    except Exception as e:
        logger.error(f"‚ùå Cleanup failed: {e}")
        return 0